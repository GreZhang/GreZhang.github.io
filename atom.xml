<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gre的博客</title>
  
  <subtitle>风骚的程序员</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://grezhang.github.io/"/>
  <updated>2018-08-19T03:44:58.502Z</updated>
  <id>https://grezhang.github.io/</id>
  
  <author>
    <name>Gre World</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring boot之测试</title>
    <link href="https://grezhang.github.io/2018/08/25/spring-boot/18spring%20boot%E4%B9%8B%E6%B5%8B%E8%AF%95/"/>
    <id>https://grezhang.github.io/2018/08/25/spring-boot/18spring boot之测试/</id>
    <published>2018-08-25T09:12:56.000Z</published>
    <updated>2018-08-19T03:44:58.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><h1 id="Spring测试"><a href="#Spring测试" class="headerlink" title="Spring测试"></a>Spring测试</h1><h1 id="Spring-Boot测试"><a href="#Spring-Boot测试" class="headerlink" title="Spring Boot测试"></a>Spring Boot测试</h1><h1 id="高端测试框架"><a href="#高端测试框架" class="headerlink" title="高端测试框架"></a>高端测试框架</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单元测试&quot;&gt;&lt;a href=&quot;#单元测试&quot; class=&quot;headerlink&quot; title=&quot;单元测试&quot;&gt;&lt;/a&gt;单元测试&lt;/h1&gt;&lt;h1 id=&quot;Spring测试&quot;&gt;&lt;a href=&quot;#Spring测试&quot; class=&quot;headerlink&quot; title=&quot;S
      
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>spring boot之WebService</title>
    <link href="https://grezhang.github.io/2018/08/21/spring-boot/14spring%20boot%E4%B9%8Bwebservice/"/>
    <id>https://grezhang.github.io/2018/08/21/spring-boot/14spring boot之webservice/</id>
    <published>2018-08-21T04:12:56.000Z</published>
    <updated>2018-08-19T06:28:20.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web-Service"><a href="#Web-Service" class="headerlink" title="Web Service"></a>Web Service</h1><h1 id="JAX-RS（JSR-224）"><a href="#JAX-RS（JSR-224）" class="headerlink" title="JAX-RS（JSR-224）"></a>JAX-RS（JSR-224）</h1><h1 id="Web-Services-Metadata（JSR-181）"><a href="#Web-Services-Metadata（JSR-181）" class="headerlink" title="Web Services Metadata（JSR-181）"></a>Web Services Metadata（JSR-181）</h1><h1 id="WebService-与Spring-Boot整合"><a href="#WebService-与Spring-Boot整合" class="headerlink" title="WebService 与Spring Boot整合"></a>WebService 与Spring Boot整合</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Web-Service&quot;&gt;&lt;a href=&quot;#Web-Service&quot; class=&quot;headerlink&quot; title=&quot;Web Service&quot;&gt;&lt;/a&gt;Web Service&lt;/h1&gt;&lt;h1 id=&quot;JAX-RS（JSR-224）&quot;&gt;&lt;a href=&quot;#JA
      
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>spring boot之配置</title>
    <link href="https://grezhang.github.io/2018/08/20/spring-boot/17spring%20boot%E4%B9%8B%E9%85%8D%E7%BD%AE/"/>
    <id>https://grezhang.github.io/2018/08/20/spring-boot/17spring boot之配置/</id>
    <published>2018-08-20T05:12:56.000Z</published>
    <updated>2018-08-19T03:49:00.295Z</updated>
    
    <content type="html"><![CDATA[<h1 id="外部配置"><a href="#外部配置" class="headerlink" title="外部配置"></a>外部配置</h1><h1 id="Profile应用"><a href="#Profile应用" class="headerlink" title="Profile应用"></a>Profile应用</h1><h1 id="核心API"><a href="#核心API" class="headerlink" title="核心API"></a>核心API</h1><h1 id="装配原理"><a href="#装配原理" class="headerlink" title="装配原理"></a>装配原理</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;外部配置&quot;&gt;&lt;a href=&quot;#外部配置&quot; class=&quot;headerlink&quot; title=&quot;外部配置&quot;&gt;&lt;/a&gt;外部配置&lt;/h1&gt;&lt;h1 id=&quot;Profile应用&quot;&gt;&lt;a href=&quot;#Profile应用&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>spring boot之监管</title>
    <link href="https://grezhang.github.io/2018/08/19/spring-boot/16spring%20boot%E4%B9%8B%E7%9B%91%E7%AE%A1/"/>
    <id>https://grezhang.github.io/2018/08/19/spring-boot/16spring boot之监管/</id>
    <published>2018-08-19T10:13:56.000Z</published>
    <updated>2018-08-19T03:47:36.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JMX"><a href="#JMX" class="headerlink" title="JMX"></a>JMX</h1><h1 id="JMX-核心-API"><a href="#JMX-核心-API" class="headerlink" title="JMX 核心 API"></a>JMX 核心 API</h1><h1 id="JMX-客户端"><a href="#JMX-客户端" class="headerlink" title="JMX 客户端"></a>JMX 客户端</h1><h1 id="JMX-Spring-Boot整合"><a href="#JMX-Spring-Boot整合" class="headerlink" title="JMX Spring Boot整合"></a>JMX Spring Boot整合</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JMX&quot;&gt;&lt;a href=&quot;#JMX&quot; class=&quot;headerlink&quot; title=&quot;JMX&quot;&gt;&lt;/a&gt;JMX&lt;/h1&gt;&lt;h1 id=&quot;JMX-核心-API&quot;&gt;&lt;a href=&quot;#JMX-核心-API&quot; class=&quot;headerlink&quot; title=&quot;J
      
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>spring boot之日志</title>
    <link href="https://grezhang.github.io/2018/08/15/spring-boot/15spring%20boot%E4%B9%8B%E6%97%A5%E5%BF%97/"/>
    <id>https://grezhang.github.io/2018/08/15/spring-boot/15spring boot之日志/</id>
    <published>2018-08-15T11:12:56.000Z</published>
    <updated>2018-08-19T03:50:28.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h1><h1 id="统一日志-API"><a href="#统一日志-API" class="headerlink" title="统一日志 API"></a>统一日志 API</h1><h1 id="日志设计模式"><a href="#日志设计模式" class="headerlink" title="日志设计模式"></a>日志设计模式</h1><h1 id="日志与Spring-Boot整合"><a href="#日志与Spring-Boot整合" class="headerlink" title="日志与Spring Boot整合"></a>日志与Spring Boot整合</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;日志框架&quot;&gt;&lt;a href=&quot;#日志框架&quot; class=&quot;headerlink&quot; title=&quot;日志框架&quot;&gt;&lt;/a&gt;日志框架&lt;/h1&gt;&lt;h1 id=&quot;统一日志-API&quot;&gt;&lt;a href=&quot;#统一日志-API&quot; class=&quot;headerlink&quot; title=&quot;统
      
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>spring boot之websocket</title>
    <link href="https://grezhang.github.io/2018/08/12/spring-boot/13spring%20boot%E4%B9%8Bwebsocket/"/>
    <id>https://grezhang.github.io/2018/08/12/spring-boot/13spring boot之websocket/</id>
    <published>2018-08-12T11:18:36.000Z</published>
    <updated>2018-08-19T03:54:15.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WebSocket协议"><a href="#WebSocket协议" class="headerlink" title="WebSocket协议"></a>WebSocket协议</h1><h1 id="Java-WebSocket-API（JSR-356）"><a href="#Java-WebSocket-API（JSR-356）" class="headerlink" title="Java WebSocket API（JSR-356）"></a>Java WebSocket API（JSR-356）</h1><h1 id="Spring-WebSocket抽象"><a href="#Spring-WebSocket抽象" class="headerlink" title="Spring WebSocket抽象"></a>Spring WebSocket抽象</h1><h1 id="WebSocket-与Spring-Boot整合"><a href="#WebSocket-与Spring-Boot整合" class="headerlink" title="WebSocket 与Spring Boot整合"></a>WebSocket 与Spring Boot整合</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;WebSocket协议&quot;&gt;&lt;a href=&quot;#WebSocket协议&quot; class=&quot;headerlink&quot; title=&quot;WebSocket协议&quot;&gt;&lt;/a&gt;WebSocket协议&lt;/h1&gt;&lt;h1 id=&quot;Java-WebSocket-API（JSR-356）&quot;&gt;
      
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>spring boot之消息</title>
    <link href="https://grezhang.github.io/2018/08/09/spring-boot/12spring%20boot%E4%B9%8B%E6%B6%88%E6%81%AF/"/>
    <id>https://grezhang.github.io/2018/08/09/spring-boot/12spring boot之消息/</id>
    <published>2018-08-09T12:00:56.000Z</published>
    <updated>2018-08-19T03:55:58.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-Message-Service-JSR-914"><a href="#Java-Message-Service-JSR-914" class="headerlink" title="Java Message Service(JSR-914)"></a>Java Message Service(JSR-914)</h1><h1 id="高级消息队列协议-AMOP"><a href="#高级消息队列协议-AMOP" class="headerlink" title="高级消息队列协议(AMOP)"></a>高级消息队列协议(AMOP)</h1><h1 id="Apache-Kafka"><a href="#Apache-Kafka" class="headerlink" title="Apache Kafka"></a>Apache Kafka</h1><h1 id="Kafka与Spring-Boot整合"><a href="#Kafka与Spring-Boot整合" class="headerlink" title="Kafka与Spring Boot整合"></a>Kafka与Spring Boot整合</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-Message-Service-JSR-914&quot;&gt;&lt;a href=&quot;#Java-Message-Service-JSR-914&quot; class=&quot;headerlink&quot; title=&quot;Java Message Service(JSR-914)&quot;&gt;&lt;/a&gt;J
      
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>spring boot之缓存</title>
    <link href="https://grezhang.github.io/2018/08/06/spring-boot/11spring%20boot%E4%B9%8B%E7%BC%93%E5%AD%98/"/>
    <id>https://grezhang.github.io/2018/08/06/spring-boot/11spring boot之缓存/</id>
    <published>2018-08-06T09:12:56.000Z</published>
    <updated>2018-08-19T03:57:00.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-Cache-JSR-107"><a href="#Java-Cache-JSR-107" class="headerlink" title="Java Cache(JSR-107)"></a>Java Cache(JSR-107)</h1><h1 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h1><h1 id="Redis-Spring-Boot整合"><a href="#Redis-Spring-Boot整合" class="headerlink" title="Redis Spring Boot整合"></a>Redis Spring Boot整合</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-Cache-JSR-107&quot;&gt;&lt;a href=&quot;#Java-Cache-JSR-107&quot; class=&quot;headerlink&quot; title=&quot;Java Cache(JSR-107)&quot;&gt;&lt;/a&gt;Java Cache(JSR-107)&lt;/h1&gt;&lt;h1 id=
      
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>spring boot之NoSQL</title>
    <link href="https://grezhang.github.io/2018/08/04/spring-boot/10spring%20boot%E4%B9%8BNoSQL/"/>
    <id>https://grezhang.github.io/2018/08/04/spring-boot/10spring boot之NoSQL/</id>
    <published>2018-08-04T04:12:56.000Z</published>
    <updated>2018-08-19T03:57:42.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h1><h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><h1 id="ElasticSearch与Spring-Boot整合"><a href="#ElasticSearch与Spring-Boot整合" class="headerlink" title="ElasticSearch与Spring Boot整合"></a>ElasticSearch与Spring Boot整合</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;NoSQL&quot;&gt;&lt;a href=&quot;#NoSQL&quot; class=&quot;headerlink&quot; title=&quot;NoSQL&quot;&gt;&lt;/a&gt;NoSQL&lt;/h1&gt;&lt;h1 id=&quot;ElasticSearch&quot;&gt;&lt;a href=&quot;#ElasticSearch&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>spring boot之JPA</title>
    <link href="https://grezhang.github.io/2018/08/01/spring-boot/09spring%20boot%E4%B9%8BJPA/"/>
    <id>https://grezhang.github.io/2018/08/01/spring-boot/09spring boot之JPA/</id>
    <published>2018-08-01T04:12:56.000Z</published>
    <updated>2018-08-19T03:59:03.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-Persistence-API"><a href="#Java-Persistence-API" class="headerlink" title="Java Persistence API"></a>Java Persistence API</h1><h1 id="Spring-Data-JPA"><a href="#Spring-Data-JPA" class="headerlink" title="Spring Data JPA"></a>Spring Data JPA</h1><h1 id="JPA与Spring-Boot整合"><a href="#JPA与Spring-Boot整合" class="headerlink" title="JPA与Spring Boot整合"></a>JPA与Spring Boot整合</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-Persistence-API&quot;&gt;&lt;a href=&quot;#Java-Persistence-API&quot; class=&quot;headerlink&quot; title=&quot;Java Persistence API&quot;&gt;&lt;/a&gt;Java Persistence API&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>spring boot之Spring WebFlux</title>
    <link href="https://grezhang.github.io/2018/07/30/spring-boot/08spring%20boot%E4%B9%8BSpring%20WebFlux/"/>
    <id>https://grezhang.github.io/2018/07/30/spring-boot/08spring boot之Spring WebFlux/</id>
    <published>2018-07-30T04:12:56.000Z</published>
    <updated>2018-08-19T03:59:31.683Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>spring boot之bean-validation</title>
    <link href="https://grezhang.github.io/2018/07/27/spring-boot/07spring%20boot%E4%B9%8Bbean-validation/"/>
    <id>https://grezhang.github.io/2018/07/27/spring-boot/07spring boot之bean-validation/</id>
    <published>2018-07-27T11:03:42.000Z</published>
    <updated>2018-08-19T04:02:05.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Apache-commons-validator"><a href="#Apache-commons-validator" class="headerlink" title="Apache commons-validator"></a>Apache commons-validator</h1><h1 id="Spring-Validator"><a href="#Spring-Validator" class="headerlink" title="Spring Validator"></a>Spring Validator</h1><h1 id="Bean-Validator-1-0-JSR-303"><a href="#Bean-Validator-1-0-JSR-303" class="headerlink" title="Bean  Validator 1.0(JSR-303)"></a>Bean  Validator 1.0(JSR-303)</h1><h1 id="Validator-与Spring-Boot整合"><a href="#Validator-与Spring-Boot整合" class="headerlink" title="Validator 与Spring Boot整合"></a>Validator 与Spring Boot整合</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Apache-commons-validator&quot;&gt;&lt;a href=&quot;#Apache-commons-validator&quot; class=&quot;headerlink&quot; title=&quot;Apache commons-validator&quot;&gt;&lt;/a&gt;Apache commons
      
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>spring boot之自定义启动器</title>
    <link href="https://grezhang.github.io/2018/07/27/spring-boot/19spring%20boot%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%AF%E5%8A%A8%E5%99%A8/"/>
    <id>https://grezhang.github.io/2018/07/27/spring-boot/19spring boot之自定义启动器/</id>
    <published>2018-07-27T10:15:39.000Z</published>
    <updated>2018-08-19T03:43:39.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot-Starter"><a href="#Spring-Boot-Starter" class="headerlink" title="Spring Boot Starter"></a>Spring Boot Starter</h1><h1 id="Spring-Boot-总结"><a href="#Spring-Boot-总结" class="headerlink" title="Spring Boot 总结"></a>Spring Boot 总结</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Boot-Starter&quot;&gt;&lt;a href=&quot;#Spring-Boot-Starter&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot Starter&quot;&gt;&lt;/a&gt;Spring Boot Starter&lt;/h1&gt;&lt;h1 i
      
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>spring boot之Reactive</title>
    <link href="https://grezhang.github.io/2018/07/25/spring-boot/06spring%20boot%E4%B9%8BReactive/"/>
    <id>https://grezhang.github.io/2018/07/25/spring-boot/06spring boot之Reactive/</id>
    <published>2018-07-25T04:12:56.000Z</published>
    <updated>2018-08-19T04:10:57.322Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>spring boot之JDBC</title>
    <link href="https://grezhang.github.io/2018/07/20/spring-boot/05spring%20boot%E4%B9%8BJDBC/"/>
    <id>https://grezhang.github.io/2018/07/20/spring-boot/05spring boot之JDBC/</id>
    <published>2018-07-20T04:12:56.000Z</published>
    <updated>2018-08-19T15:02:49.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据源（DataSource）"><a href="#数据源（DataSource）" class="headerlink" title="数据源（DataSource）"></a>数据源（DataSource）</h1><p>数据源（DataSource）是数据库连接的来源，通过DataSource接口获取。</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ul><li>通用型数据源（javax.sql.DataSource）<ul><li>主要使用场景：通用型数据库，本地事务，一般通过Socket方式连接。</li></ul></li><li>分布式数据源（javax.sql.XADataSource）<ul><li>主要使用场景：通用型数据库，分布式事务，一般通过Socket方式连接。</li></ul></li><li>嵌入式数据源（org.springframework.jdbc.datasource.embedded.EmbeddedDatabase）<ul><li>主要使用场景：本地文件系统数据库，如：HSQL、H2、Derby等。</li><li>枚举：org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType</li></ul></li></ul><h1 id="事务（Transaction）"><a href="#事务（Transaction）" class="headerlink" title="事务（Transaction）"></a>事务（Transaction）</h1><p>事务用于提供数据完整性，并在并发访问下确保数据视图的一致性</p><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><ul><li>自动提交模式（Auto-commit mode）</li><li>事务隔离级别（Transaction isolation levels）</li><li>保护点（Savepoints）</li></ul><h3 id="自动提交模式（Auto-commit-mode）"><a href="#自动提交模式（Auto-commit-mode）" class="headerlink" title="自动提交模式（Auto-commit mode）"></a>自动提交模式（Auto-commit mode）</h3><p>默认情况下，当独立SQL语句执行后，当前事务将会自动提交。</p><ul><li>触发时机<ul><li>DML执行后</li><li>DDL执行后</li><li>SELECT 查询后结果集关闭后</li><li>存储过程执行后（如果执行返回结果集的话，待其关闭后）</li></ul></li></ul><h3 id="事务隔离级别（Transaction-isolation-levels）"><a href="#事务隔离级别（Transaction-isolation-levels）" class="headerlink" title="事务隔离级别（Transaction isolation levels）"></a>事务隔离级别（Transaction isolation levels）</h3><p>事务的隔离级别决定事务执行语句中的数据可见性。</p><p>MySql的隔离级别：</p><table><thead><tr><th>隔离级别</th><th>脏读（Dirty Read）</th><th>不可重复读（NonRepeatable Read）</th><th>幻读（Phantom Read）</th></tr></thead><tbody><tr><td>未提交读（Read uncommitted）</td><td>可能</td><td>可能</td><td>可能</td></tr><tr><td>已提交读（Read committed）</td><td>不可能</td><td>可能</td><td>可能</td></tr><tr><td>可重复读（Repeatable read）</td><td>不可能</td><td>不可能</td><td>可能</td></tr><tr><td>可串行化（Serializable ）</td><td>不可能</td><td>不可能</td><td>不可能</td></tr></tbody></table><p>从上到下，隔离级别越高，性能会越低。</p><p>在Spring中有5种隔离级别，对应的源码为：</p><p><code>Isolation</code>-&gt;<code>TransactionDefinition</code></p><ul><li>READ_UNCOMMITTED=java.sql.Connection#TRANSACTION_READ_UNCOMMITTED</li><li>READ_COMMITTED=java.sql.Connection#TRANSACTION_READ_COMMITTED</li><li>REPEATABLE_READ=java.sql.Connection#TRANSACTION_REPEATABLE_READ</li><li>SERIALIZABLE=java.sql.Connection#TRANSACTION_SERIALIZABLE</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Isolation &#123;</span><br><span class="line">    DEFAULT(-<span class="number">1</span>),</span><br><span class="line">    READ_UNCOMMITTED(<span class="number">1</span>),</span><br><span class="line">    READ_COMMITTED(<span class="number">2</span>),</span><br><span class="line">    REPEATABLE_READ(<span class="number">4</span>),</span><br><span class="line">    SERIALIZABLE(<span class="number">8</span>);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionDefinition</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> PROPAGATION_REQUIRED = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> PROPAGATION_SUPPORTS = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> PROPAGATION_MANDATORY = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> PROPAGATION_REQUIRES_NEW = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> PROPAGATION_NOT_SUPPORTED = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> PROPAGATION_NEVER = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> PROPAGATION_NESTED = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">int</span> ISOLATION_DEFAULT = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ISOLATION_READ_UNCOMMITTED = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ISOLATION_READ_COMMITTED = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> ISOLATION_REPEATABLE_READ = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> ISOLATION_SERIALIZABLE = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">int</span> TIMEOUT_DEFAULT = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPropagationBehavior</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getIsolationLevel</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getTimeout</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isReadOnly</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事务并发可能会影响：</p><ul><li>脏读（dirty reads）</li><li>不可重现读（nonrepeatable reads)</li><li>幻读（phantom reads）</li></ul><blockquote><p>参考博客 <a href="https://www.jianshu.com/p/d8bc0a843dd0" target="_blank" rel="noopener">MySQL的事务隔离级别理解</a></p></blockquote><h3 id="保护点（Savepoints）"><a href="#保护点（Savepoints）" class="headerlink" title="保护点（Savepoints）"></a>保护点（Savepoints）</h3><p>保护点是在事务中创建，提供细粒度事务控制。</p><p> 使用场景</p><ul><li>部分事务回滚 </li><li>选择性释放</li></ul><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><p>创建Model-&gt;User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DataSource dataSource;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserRepository</span><span class="params">(DataSource dataSource, JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSource = dataSource;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">jdbcSave</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line">        System.out.printf(<span class="string">"[Thread : %s ] save user :%s\n"</span>,</span><br><span class="line">                Thread.currentThread().getName(), user);</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = dataSource.getConnection();</span><br><span class="line">            <span class="comment">// 设置手动提交,默认是自动提交模式</span></span><br><span class="line">            connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            preparedStatement = connection.prepareStatement(<span class="string">"INSERT INTO user(name) VALUES (?) "</span>);</span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, user.getName());</span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line">            connection.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (preparedStatement != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    preparedStatement.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transactionalSave</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line">        success = jdbcTemplate.execute(<span class="string">"INSERT INTO user(name) VALUES (?) "</span>, <span class="keyword">new</span> PreparedStatementCallback&lt;Boolean&gt;() &#123;</span><br><span class="line">            <span class="meta">@Nullable</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">doInPreparedStatement</span><span class="params">(PreparedStatement preparedStatement)</span> <span class="keyword">throws</span> SQLException, DataAccessException </span>&#123;</span><br><span class="line">                preparedStatement.setString(<span class="number">1</span>, user.getName());</span><br><span class="line">                <span class="keyword">return</span> preparedStatement.executeUpdate()&gt;<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line">        success = jdbcTemplate.execute(<span class="string">"INSERT INTO user(name) VALUES (?)"</span>, <span class="keyword">new</span> PreparedStatementCallback&lt;Boolean&gt;() &#123;</span><br><span class="line">            <span class="meta">@Nullable</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">doInPreparedStatement</span><span class="params">(PreparedStatement preparedStatement)</span> <span class="keyword">throws</span> SQLException, DataAccessException </span>&#123;</span><br><span class="line">                preparedStatement.setString(<span class="number">1</span>, user.getName());</span><br><span class="line">                <span class="keyword">return</span> preparedStatement.executeUpdate() &gt; <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Collection&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; resultList = jdbcTemplate.queryForList(<span class="string">"SELECT id,name FROM user"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Object&gt; resultMap : resultList) &#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : resultMap.entrySet()) &#123;</span><br><span class="line">                String key = entry.getKey();</span><br><span class="line">                Object value = entry.getValue();</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"id"</span>.equals(key)) &#123;</span><br><span class="line">                    user.setId(Integer.valueOf(value.toString()));</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"name"</span>.equals(key)) &#123;</span><br><span class="line">                    user.setName(value.toString());</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            users.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"web/mvc/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserController</span><span class="params">(UserRepository userRepository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userRepository = userRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">save</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/jdbcSave"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">jdbcSave</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.jdbcSave(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/transactionalSave"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transactionalSave</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.transactionalSave(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源代码追踪"><a href="#源代码追踪" class="headerlink" title="源代码追踪"></a>源代码追踪</h3><ul><li><p>代理执行 - <code>TransactionInterceptor</code></p></li><li><p>可以控制 rollback 的异常粒度：rollbackFor() 以及 noRollbackFor()</p></li></ul><p>  可以执行 事务管理器：transactionManager()</p><p>UserController#transactionalSave</p><p>-&gt;CglibAopProxy.DynamicAdvisedInterceptor#intercept</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Object&gt; chain = <span class="keyword">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br></pre></td></tr></table></figure><p>这一行代码会得到两个对象:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 = &#123;TransactionInterceptor@6064&#125; </span><br><span class="line">1 = &#123;PersistenceExceptionTranslationInterceptor@6065&#125;</span><br></pre></td></tr></table></figure><p>-&gt;TransactionInterceptor#invoke</p><p>-&gt;ReflectiveMethodInvocation#proceed</p><p>-&gt;TransactionAspectSupport#invokeWithinTransaction</p><p>-&gt;TransactionAspectSupport#commitTransactionAfterReturning</p><p>-&gt;AbstractPlatformTransactionManager#commit</p><p>-&gt;AbstractPlatformTransactionManager#processCommit</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processCommit</span><span class="params">(DefaultTransactionStatus status)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> beforeCompletionInvoked = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> unexpectedRollback = <span class="keyword">false</span>;</span><br><span class="line">prepareForCommit(status);</span><br><span class="line">triggerBeforeCommit(status);</span><br><span class="line">triggerBeforeCompletion(status);</span><br><span class="line">beforeCompletionInvoked = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (status.hasSavepoint()) &#123;</span><br><span class="line"><span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Releasing transaction savepoint"</span>);</span><br><span class="line">&#125;</span><br><span class="line">unexpectedRollback = status.isGlobalRollbackOnly();</span><br><span class="line">status.releaseHeldSavepoint();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (status.isNewTransaction()) &#123;</span><br><span class="line"><span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Initiating transaction commit"</span>);</span><br><span class="line">&#125;</span><br><span class="line">unexpectedRollback = status.isGlobalRollbackOnly();</span><br><span class="line">                  <span class="comment">// 这个方法执行真正的提交</span></span><br><span class="line">doCommit(status);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class="line">unexpectedRollback = status.isGlobalRollbackOnly();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Throw UnexpectedRollbackException if we have a global rollback-only</span></span><br><span class="line"><span class="comment">// marker but still didn't get a corresponding exception from commit.</span></span><br><span class="line"><span class="keyword">if</span> (unexpectedRollback) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnexpectedRollbackException(</span><br><span class="line"><span class="string">"Transaction silently rolled back because it has been marked as rollback-only"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (UnexpectedRollbackException ex) &#123;</span><br><span class="line"><span class="comment">// can only be caused by doCommit</span></span><br><span class="line">triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (TransactionException ex) &#123;</span><br><span class="line"><span class="comment">// can only be caused by doCommit</span></span><br><span class="line"><span class="keyword">if</span> (isRollbackOnCommitFailure()) &#123;</span><br><span class="line">doRollbackOnCommitException(status, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (RuntimeException | Error ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (!beforeCompletionInvoked) &#123;</span><br><span class="line">triggerBeforeCompletion(status);</span><br><span class="line">&#125;</span><br><span class="line">doRollbackOnCommitException(status, ex);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Trigger afterCommit callbacks, with an exception thrown there</span></span><br><span class="line"><span class="comment">// propagated to callers but the transaction still considered as committed.</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">triggerAfterCommit(status);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">triggerAfterCompletion(status, TransactionSynchronization.STATUS_COMMITTED);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">cleanupAfterCompletion(status);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JDBC-4-0（JSR-221）"><a href="#JDBC-4-0（JSR-221）" class="headerlink" title="JDBC 4.0（JSR-221）"></a>JDBC 4.0（JSR-221）</h1><p>核心API</p><ul><li>驱动接口：<code>java.sql.Drvier</code></li><li>驱动管理：<code>java.sql.DriverManager</code></li><li>数据源：<code>javax.sql.DataSource</code></li><li>数据连接：<code>java.sql.Connection</code></li><li>执行语句：<code>java.sql.Statement</code></li><li>查询结果集：<code>java.sql.ResultSet</code></li><li>元数据接口：<code>java.sql.DatabaseMetaData</code>、<code>java.sql.ResultSetMetaData</code></li></ul><h1 id="与Spring-Boot整合"><a href="#与Spring-Boot整合" class="headerlink" title="与Spring Boot整合"></a>与Spring Boot整合</h1><h2 id="单数据源"><a href="#单数据源" class="headerlink" title="单数据源"></a>单数据源</h2><p>单数据源配置非常简单，只需要在application.properties配置即可。该配置对应的类为<code>DataSourceProperties</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProperties</span> <span class="keyword">implements</span> <span class="title">BeanClassLoaderAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ClassLoader classLoader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Name of the datasource. Default to "testdb" when using an embedded database.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Fully qualified name of the connection pool implementation to use. By default, it</span></span><br><span class="line"><span class="comment"> * is auto-detected from the classpath.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Class&lt;? extends DataSource&gt; type;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String driverClassName;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC URL of the database.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Login username of the database.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Login password of the database.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Schema (DDL) script resource references.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; schema;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/test</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br></pre></td></tr></table></figure><h2 id="多数据源"><a href="#多数据源" class="headerlink" title="多数据源"></a>多数据源</h2><p>而多数据源的配置在配置文件当中是做不到的，需要自己定制，代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//表示为Spring的一个配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultipleDataSourceConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span> <span class="comment">//主库，master数据源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">masterDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        spring.datasource.driverClassName=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment">//        spring.datasource.url=jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="comment">//        spring.datasource.username=root</span></span><br><span class="line"><span class="comment">//        spring.datasource.password=root</span></span><br><span class="line">        DataSource dataSource = DataSourceBuilder.create()</span><br><span class="line">                .driverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>)</span><br><span class="line">                .url(<span class="string">"jdbc:mysql://localhost:3306/test"</span>)</span><br><span class="line">                .username(<span class="string">"root"</span>)</span><br><span class="line">                .password(<span class="string">"root"</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span>  dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span><span class="comment">// slave数据源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">slaveDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DataSource dataSource = DataSourceBuilder.create()</span><br><span class="line">                .driverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>)</span><br><span class="line">                .url(<span class="string">"jdbc:mysql://localhost:3306/test"</span>)</span><br><span class="line">                .username(<span class="string">"root"</span>)</span><br><span class="line">                .password(<span class="string">"root"</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span>  dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码详见<a href="https://github.com/GreZhang/microservices/tree/master/spring-boot-jdbc" target="_blank" rel="noopener">Spring-Boot-JDBC</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据源（DataSource）&quot;&gt;&lt;a href=&quot;#数据源（DataSource）&quot; class=&quot;headerlink&quot; title=&quot;数据源（DataSource）&quot;&gt;&lt;/a&gt;数据源（DataSource）&lt;/h1&gt;&lt;p&gt;数据源（DataSource）是数据
      
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>spring boot之Spring MVC REST</title>
    <link href="https://grezhang.github.io/2018/07/16/spring-boot/04spring%20boot%E4%B9%8BSpring%20MVC%20REST/"/>
    <id>https://grezhang.github.io/2018/07/16/spring-boot/04spring boot之Spring MVC REST/</id>
    <published>2018-07-16T04:12:56.000Z</published>
    <updated>2018-08-19T04:32:46.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="REST理论基础"><a href="#REST理论基础" class="headerlink" title="REST理论基础"></a>REST理论基础</h1><p>RPC(Remote Producer Call)：是指远程过程调用</p><ul><li>语言相关 <ul><li>Java RMI</li><li>.net -COM+</li></ul></li><li>语言无关<ul><li>SOA<ul><li>WebService<ul><li>SOAP</li><li>HTTP、SMTP</li></ul></li></ul></li><li>微服务（MSA）<ul><li>REST<ul><li>HTML、JSON、XML等</li><li>HTTP协议<ul><li>Http1.1<ul><li>短连接</li><li>Keep-Live</li><li>连接池</li></ul></li><li>Http2.0<ul><li>长连接</li></ul></li></ul></li><li>技术<ul><li>Spring客户端：RestTemplate</li><li>Spring web MVC：@RestController==<code>@Controller</code>+<code>@ResponseBody</code>+<code>@RequestBody</code></li><li>Spring Cloud : <code>RestTemplate</code>扩展 + <code>@LoadBalanced</code></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="Cacheability（可缓存性）"><a href="#Cacheability（可缓存性）" class="headerlink" title="Cacheability（可缓存性）"></a>Cacheability（可缓存性）</h2><p>这个与rest没有必然的关系，我们在学习rest的时候不会将这个放置进去。</p><p><code>@ResponseBody</code> -&gt; 响应体（Response Body）</p><ul><li><p>响应（<code>Response</code>）</p><ul><li>响应头（<code>Headers</code>）</li><li>请求方法<ul><li>HEAD</li></ul></li><li>元信息（Meta-Data）<ul><li>Accept-Language -&gt; <code>Locale</code></li><li>Connection -&gt; Keep-Alive</li></ul></li><li>实现</li></ul></li></ul><p>  多值 Map MultiValueMap</p><p>  Key : Value = 1 : N</p><p>  Name : Value = 1 : N</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpHeaders</span> <span class="keyword">implements</span> <span class="title">MultiValueMap</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt;, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>响应体</p></li><li><p>业务信息（Business Data）</p></li><li><p>Body：HTTP 实体、REST</p><ul><li>@ResponseBody</li><li>HttpEntity.body 属性（泛型结构）</li></ul></li><li><p>Payload ： 消息 JMS、事件、SOAP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEntity</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> HttpHeaders headers;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Nullable</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> T body;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="HTTP状态码-org-springframework-http-HttpStatus"><a href="#HTTP状态码-org-springframework-http-HttpStatus" class="headerlink" title="HTTP状态码(org.springframework.http.HttpStatus)"></a>HTTP状态码(<code>org.springframework.http.HttpStatus</code>)</h2><ul><li>200<ul><li><code>org.springframework.http.HttpStatus#OK</code></li></ul></li><li>304<ul><li><code>org.springframework.http.HttpStatus#NOT_MODIFIED</code></li></ul></li><li>400<ul><li><code>org.springframework.http.HttpStatus#BAD_REQUEST</code></li></ul></li><li>404<ul><li><code>org.springframework.http.HttpStatus#NOT_FOUND</code></li></ul></li><li>500<ul><li><code>org.springframework.http.HttpStatus#INTERNAL_SERVER_ERROR</code></li></ul></li></ul><h2 id="Uniform-interface（统一接口）"><a href="#Uniform-interface（统一接口）" class="headerlink" title="Uniform interface（统一接口）"></a>Uniform interface（统一接口）</h2><h3 id="资源定位-URI"><a href="#资源定位-URI" class="headerlink" title="资源定位 - URI"></a>资源定位 - URI</h3><h3 id="资源操作-HTTP-动词"><a href="#资源操作-HTTP-动词" class="headerlink" title="资源操作 - HTTP 动词"></a>资源操作 - HTTP 动词</h3><p>GET</p><ul><li><p><code>@GetMapping</code></p><ul><li><p>注解属性别名和覆盖（<a href="https://github.com/spring-projects/spring-framework/wiki/Spring-Annotation-Programming-Model#attribute-aliases-and-overrides）" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework/wiki/Spring-Annotation-Programming-Model#attribute-aliases-and-overrides）</a></p></li><li><p>Spring Framework 4.2 引入</p><ul><li>Spring Boot 1.3 才可以使用</li></ul></li><li><p>Spring Boot 加以发展</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.POST) <span class="comment">// 注解“派生性”</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PostMapping &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = RequestMapping.class) <span class="comment">// 注解别名</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>@PostMapping</code> 是注解，<code>@RequestMapping</code> 是<code>@PostMapping</code>  的注解：</p><ul><li><code>@RequestMapping</code>  是  <code>@PostMapping</code>的元注解</li><li><code>@RequestMapping</code> 元标注了 <code>@PostMapping</code></li></ul><p><code>@AliasFor</code>只能标注在目标注解的属性，所annotation()的注解必须是元注解，该注解 attribute() 必须元注解的属性</p></li></ul><p>PUT</p><ul><li><code>@PutMapping</code></li></ul><p>POST</p><ul><li><code>@PostMapping</code></li></ul><p>PATCH</p><ul><li><code>@PatchMapping</code></li><li>限制<ul><li>Servlet API 没有规定 PATCH </li><li>Spring Web 对其做了扩展     </li></ul></li></ul><pre><code>public abstract class FrameworkServlet extends HttpServletBean implements ApplicationContextAware {    ...protected void service(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException {        HttpMethod httpMethod = HttpMethod.resolve(request.getMethod());        if (httpMethod == HttpMethod.PATCH || httpMethod == null) {            processRequest(request, response);        }        else {            super.service(request, response);        }    }    ...}</code></pre><p>DELETE</p><ul><li><code>@DeleteMapping</code></li></ul><h2 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h2><ul><li><p>幂等</p><ul><li>PUT </li></ul><p>初始状态：0</p><p>修改状态：1 * N</p><p>最终状态：1</p><ul><li>DELETE</li></ul><p>初始状态：1</p><p>修改状态：0 * N</p><p>最终状态：0</p></li><li><p>非幂等</p><ul><li>POST</li></ul><p>初始状态：1</p><p>修改状态：1 + 1 =2 </p><p>N次修改： 1+ N = N+1</p><p>最终状态：N+1</p></li></ul><p>幂等/非幂等 依赖于服务端实现，这种方式是一种契约</p><h2 id="自描述消息"><a href="#自描述消息" class="headerlink" title="自描述消息"></a>自描述消息</h2><blockquote><p>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,/;q=0.8</p></blockquote><p>第一优先顺序：text/html -&gt; application/xhtml+xml -&gt; application/xml</p><p>第二优先顺序：image/webp -&gt; image/apng</p><h3 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h3><p>定义一个Person对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建PersonRestController类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span> <span class="comment">// Spring4后加入的注解，原来在@Controller返回json需要@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"persons"</span>) <span class="comment">//配置URL映射</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonRestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Long,Person&gt; repos =  Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;Long,Person&gt;());<span class="comment">// 线程安全的map，用来存储Person对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonRestController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setId(<span class="number">1</span>);</span><br><span class="line">        person.setName(<span class="string">"小马哥"</span>);</span><br><span class="line">        Person person2 = <span class="keyword">new</span> Person();</span><br><span class="line">        person2.setId(<span class="number">2</span>);</span><br><span class="line">        person2.setName(<span class="string">"Gre"</span>);</span><br><span class="line">        repos.put(person.getId(),person);</span><br><span class="line">        repos.put(person2.getId(),person2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createPerson</span><span class="params">(@ModelAttribute Person person)</span></span>&#123;</span><br><span class="line">        repos.put(person.getId(),person);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>,method = RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deletePerson</span><span class="params">(@PathVariable <span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        repos.remove(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>,method = RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updatePerson</span><span class="params">(@PathVariable Long id,@ModelAttribute Person person)</span></span>&#123;</span><br><span class="line">        Person oldPerson = repos.get(id);</span><br><span class="line">        oldPerson.setName(person.getName());</span><br><span class="line">        repos.put(id,oldPerson);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">findPersonById</span><span class="params">(@PathVariable Long id)</span></span>&#123;</span><br><span class="line">        Person person = repos.get(id);</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">findPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Person&gt; persons = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Long, Person&gt; entry:repos.entrySet())&#123;</span><br><span class="line">            persons.add(entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> persons;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootRestApplication</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootRestApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过浏览器访问：<a href="http://localhost:8085/persons/1" target="_blank" rel="noopener">http://localhost:8085/persons/1</a> 得到结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"小马哥"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在pom.xml中引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重启，浏览器访问，结果如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Person</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>小马哥<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Person</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以改变这种返回格式吗？答案是肯定的。我们在请求头中指定Accept属性值即可：</p><p>比如我们想要返回JSON格式，指定属性值为：application/json</p><p>如果想要结果为想xml格式的，则可以指定为：application/xml</p><p>这里有两个问题需要解决：</p><ul><li>问题1：为什么第一次是JSON，后来怎加了 XML 依赖，又变成了 XML 内用输出</li><li>当 Accept 请求头未被制定时，为什么还是 JSON 来处理</li></ul><h3 id="源码学习路径"><a href="#源码学习路径" class="headerlink" title="源码学习路径"></a>源码学习路径</h3><h4 id="注解驱动"><a href="#注解驱动" class="headerlink" title="注解驱动"></a>注解驱动</h4><ul><li><code>@RequestBody</code></li></ul><p>  JSON -&gt; <code>MappingJackson2HttpMessageConverter</code></p><p>  TEXT -&gt; <code>StringHttpMessageConverter</code></p><ul><li><code>@ResponseBody</code></li></ul><p>  JSON -&gt; <code>MappingJackson2HttpMessageConverter</code></p><p>  TEXT -&gt; <code>StringHttpMessageConverter</code></p><p>  返回值处理类：<code>RequestResponseBodyMethodProcessor</code></p><h4 id="接口编程"><a href="#接口编程" class="headerlink" title="接口编程"></a>接口编程</h4><p><code>ResponseEntity</code>extends <code>HttpEntity</code></p><p><code>RequestEntity</code>extends <code>HttpEntity</code></p><p>返回值处理类：<code>HttpEntityMethodProcessor</code></p><h4 id="媒体类型（MediaType）"><a href="#媒体类型（MediaType）" class="headerlink" title="媒体类型（MediaType）"></a>媒体类型（<code>MediaType</code>）</h4><ul><li><code>org.springframework.http.MediaType#APPLICATION_JSON_UTF8_VALUE</code><ul><li>“application/json;charset=UTF-8”</li></ul></li></ul><p>HTTP 消息转换器（<code>HttpMessageConverter</code>）</p><ul><li>application/json<ul><li><code>MappingJackson2HttpMessageConverter</code></li></ul></li><li>text/html<ul><li><code>StringHttpMessageConverter</code></li></ul></li></ul><h4 id="代码导读"><a href="#代码导读" class="headerlink" title="代码导读"></a>代码导读</h4><ul><li><p><code>@EnableWebMvc</code></p><ul><li><p>导入 <code>DelegatingWebMvcConfiguration</code> （配置class）</p></li><li><p>注册   <code>WebMvcConfigurer</code></p></li><li><p>装配各种 Spring MVC 需要的Bean</p></li><li><p>注解驱动扩展点</p><ul><li><code>HandlerMethodArgumentResolver</code></li><li><code>HandlerMethodReturnValueHandler</code></li><li><code>@RequestBody</code> 和<code>@ResponseBody</code>实现类</li><li><code>RequestResponseBodyMethodProcessor</code></li><li><code>HttpEntityMethodProcessor</code></li></ul></li></ul></li></ul><pre><code>* `WebMvcConfigurationSupport#addDefaultHttpMessageConverters`</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds a set of default HttpMessageConverter instances to the given list.</span></span><br><span class="line"><span class="comment"> * Subclasses can call this method from &#123;<span class="doctag">@link</span> #configureMessageConverters(List)&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> messageConverters the list to add the default message converters to</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addDefaultHttpMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters)</span> </span>&#123;</span><br><span class="line">StringHttpMessageConverter stringHttpMessageConverter = <span class="keyword">new</span> StringHttpMessageConverter();</span><br><span class="line">stringHttpMessageConverter.setWriteAcceptCharset(<span class="keyword">false</span>);  <span class="comment">// see SPR-7316</span></span><br><span class="line"></span><br><span class="line">messageConverters.add(<span class="keyword">new</span> ByteArrayHttpMessageConverter());</span><br><span class="line">messageConverters.add(stringHttpMessageConverter);</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> ResourceHttpMessageConverter());</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> ResourceRegionHttpMessageConverter());</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> SourceHttpMessageConverter&lt;&gt;());</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> AllEncompassingFormHttpMessageConverter());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (romePresent) &#123;</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> AtomFeedHttpMessageConverter());</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> RssChannelHttpMessageConverter());</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">//如果jackson2Xml存在，则添加</span></span><br><span class="line"><span class="keyword">if</span> (jackson2XmlPresent) &#123;</span><br><span class="line">Jackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.xml();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.applicationContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">builder.applicationContext(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">&#125;</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> MappingJackson2XmlHttpMessageConverter(builder.build()));</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">//如果jaxb2Present存在，则添加</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (jaxb2Present) &#123;</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> Jaxb2RootElementHttpMessageConverter());</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">//如果jackson2Present存在，则添加</span></span><br><span class="line"><span class="keyword">if</span> (jackson2Present) &#123;</span><br><span class="line">Jackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.json();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.applicationContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">builder.applicationContext(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">&#125;</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> MappingJackson2HttpMessageConverter(builder.build()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (gsonPresent) &#123;</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> GsonHttpMessageConverter());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (jsonbPresent) &#123;</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> JsonbHttpMessageConverter());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (jackson2SmilePresent) &#123;</span><br><span class="line">Jackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.smile();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.applicationContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">builder.applicationContext(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">&#125;</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> MappingJackson2SmileHttpMessageConverter(builder.build()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (jackson2CborPresent) &#123;</span><br><span class="line">Jackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.cbor();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.applicationContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">builder.applicationContext(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">&#125;</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> MappingJackson2CborHttpMessageConverter(builder.build()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到参数<code>messageConverters</code>是一个List集合，List的特点是FIFO，先来先服务，它的添加是有顺序的。</p><p>同时，它所支持的<code>MediaType</code>也会设置进去，比如：xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MappingJackson2XmlHttpMessageConverter</span><span class="params">(ObjectMapper objectMapper)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(objectMapper, <span class="keyword">new</span> MediaType(<span class="string">"application"</span>, <span class="string">"xml"</span>),</span><br><span class="line"><span class="keyword">new</span> MediaType(<span class="string">"text"</span>, <span class="string">"xml"</span>),</span><br><span class="line"><span class="keyword">new</span> MediaType(<span class="string">"application"</span>, <span class="string">"*+xml"</span>));</span><br><span class="line">Assert.isInstanceOf(XmlMapper.class, objectMapper, <span class="string">"XmlMapper required"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MappingJackson2HttpMessageConverter</span><span class="params">(ObjectMapper objectMapper)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(objectMapper, MediaType.APPLICATION_JSON, <span class="keyword">new</span> MediaType(<span class="string">"application"</span>, <span class="string">"*+json"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看看<code>WebMvcConfigurationSupport#addDefaultHttpMessageConverters</code>方法在哪里被使用了，追踪代码，发现在方法<code>WebMvcConfigurationSupport#getMessageConverters</code>中使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; getMessageConverters() &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.messageConverters == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.messageConverters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">configureMessageConverters(<span class="keyword">this</span>.messageConverters);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.messageConverters.isEmpty()) &#123;</span><br><span class="line">addDefaultHttpMessageConverters(<span class="keyword">this</span>.messageConverters);</span><br><span class="line">&#125;</span><br><span class="line">extendMessageConverters(<span class="keyword">this</span>.messageConverters);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.messageConverters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而该方法又在<code>WebMvcConfigurationSupport#requestMappingHandlerAdapter</code>中被调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestMappingHandlerAdapter <span class="title">requestMappingHandlerAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RequestMappingHandlerAdapter adapter = createRequestMappingHandlerAdapter();</span><br><span class="line">        <span class="comment">// 这里涉及到内容调停</span></span><br><span class="line">adapter.setContentNegotiationManager(mvcContentNegotiationManager());</span><br><span class="line">adapter.setMessageConverters(getMessageConverters());</span><br><span class="line">adapter.setWebBindingInitializer(getConfigurableWebBindingInitializer());</span><br><span class="line">adapter.setCustomArgumentResolvers(getArgumentResolvers());</span><br><span class="line">adapter.setCustomReturnValueHandlers(getReturnValueHandlers());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (jackson2Present) &#123;</span><br><span class="line">adapter.setRequestBodyAdvice(Collections.singletonList(<span class="keyword">new</span> JsonViewRequestBodyAdvice()));</span><br><span class="line">adapter.setResponseBodyAdvice(Collections.singletonList(<span class="keyword">new</span> JsonViewResponseBodyAdvice()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AsyncSupportConfigurer configurer = <span class="keyword">new</span> AsyncSupportConfigurer();</span><br><span class="line">configureAsyncSupport(configurer);</span><br><span class="line"><span class="keyword">if</span> (configurer.getTaskExecutor() != <span class="keyword">null</span>) &#123;</span><br><span class="line">adapter.setTaskExecutor(configurer.getTaskExecutor());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (configurer.getTimeout() != <span class="keyword">null</span>) &#123;</span><br><span class="line">adapter.setAsyncRequestTimeout(configurer.getTimeout());</span><br><span class="line">&#125;</span><br><span class="line">adapter.setCallableInterceptors(configurer.getCallableInterceptors());</span><br><span class="line">adapter.setDeferredResultInterceptors(configurer.getDeferredResultInterceptors());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> adapter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内容调停主要是根据请求的参数和Spring Boot的规则去处理<code>MediaType</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ContentNegotiationManager <span class="title">mvcContentNegotiationManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.contentNegotiationManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">ContentNegotiationConfigurer configurer = <span class="keyword">new</span> ContentNegotiationConfigurer(<span class="keyword">this</span>.servletContext);</span><br><span class="line">          <span class="comment">// etDefaultMediaTypes()这个方法是获取MediaType的</span></span><br><span class="line">configurer.mediaTypes(getDefaultMediaTypes());</span><br><span class="line">configureContentNegotiation(configurer);</span><br><span class="line"><span class="keyword">this</span>.contentNegotiationManager = configurer.buildContentNegotiationManager();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.contentNegotiationManager;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 该方法的逻辑为：如果jaxb2Present || jackson2XmlPresent类存在，则MediaType为application/xml</span></span><br><span class="line"><span class="comment">* 如果jackson2Present || gsonPresent || jsonbPresent其中之一，则MediaType为application/json等</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Map&lt;String, MediaType&gt; <span class="title">getDefaultMediaTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, MediaType&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span> (romePresent) &#123;</span><br><span class="line">map.put(<span class="string">"atom"</span>, MediaType.APPLICATION_ATOM_XML);</span><br><span class="line">map.put(<span class="string">"rss"</span>, MediaType.APPLICATION_RSS_XML);</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">// </span></span><br><span class="line"><span class="keyword">if</span> (jaxb2Present || jackson2XmlPresent) &#123;</span><br><span class="line">map.put(<span class="string">"xml"</span>, MediaType.APPLICATION_XML);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (jackson2Present || gsonPresent || jsonbPresent) &#123;</span><br><span class="line">map.put(<span class="string">"json"</span>, MediaType.APPLICATION_JSON);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (jackson2SmilePresent) &#123;</span><br><span class="line">map.put(<span class="string">"smile"</span>, MediaType.valueOf(<span class="string">"application/x-jackson-smile"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (jackson2CborPresent) &#123;</span><br><span class="line">map.put(<span class="string">"cbor"</span>, MediaType.valueOf(<span class="string">"application/cbor"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：为什么第一次是JSON，后来怎加了 XML 依赖，又变成了 XML 内用输出</p><p>回答：Spring Boot 应用默认没有增加XML 处理器（<code>HttpMessageConverter</code>）实现，所以最后采用轮训的方式去逐一尝试是否可以<code>canWrite(POJO)</code>,如果返回 true，说明可以序列化该 POJO 对象，那么 Jackson 2 恰好能处理，那么Jackson 输出了。</p><p>问题：当 Accept 请求头未被制定时，为什么还是 JSON 来处理</p><p>回答：这个依赖于 <code>messageConverters</code>的插入顺序。</p><p>分析答案：</p><p><code>AbstractMessageConverterMethodProcessor#getProducibleMediaTypes(javax.servlet.http.HttpServletRequest, java.lang.Class&lt;?&gt;, java.lang.reflect.Type)</code>方法中，我们可以看到，如果可写，则会MediaType写入到List集合当中.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.allSupportedMediaTypes.isEmpty()) &#123;</span><br><span class="line">List&lt;MediaType&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (HttpMessageConverter&lt;?&gt; converter : <span class="keyword">this</span>.messageConverters) &#123;</span><br><span class="line"><span class="keyword">if</span> (converter <span class="keyword">instanceof</span> GenericHttpMessageConverter &amp;&amp; declaredType != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (((GenericHttpMessageConverter&lt;?&gt;) converter).canWrite(declaredType, valueClass, <span class="keyword">null</span>)) &#123;</span><br><span class="line">result.addAll(converter.getSupportedMediaTypes());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (converter.canWrite(valueClass, <span class="keyword">null</span>)) &#123;</span><br><span class="line">result.addAll(converter.getSupportedMediaTypes());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><p>这个messageConverters的内容依赖添加顺序，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0 = &#123;ByteArrayHttpMessageConverter@5575&#125; </span><br><span class="line">1 = &#123;StringHttpMessageConverter@4925&#125; </span><br><span class="line">2 = &#123;ResourceHttpMessageConverter@5620&#125; </span><br><span class="line">3 = &#123;ResourceRegionHttpMessageConverter@5629&#125; </span><br><span class="line">4 = &#123;SourceHttpMessageConverter@5638&#125; </span><br><span class="line">5 = &#123;AllEncompassingFormHttpMessageConverter@5647&#125; </span><br><span class="line">6 = &#123;MappingJackson2XmlHttpMessageConverter@5656&#125; </span><br><span class="line">7 = &#123;MappingJackson2HttpMessageConverter@5734&#125;</span><br></pre></td></tr></table></figure><p>由此我们可以看到，Jackson2Xml是优先于其他的。所以我们在加入了Jackson2Xml包依赖，并且不指定<code>Accept</code>内容时依然会得到xml格式的结果。如果没有加入该依赖，说明Jackson2Xml不能被序列化，那么就会在没有指定<code>Accept</code>时选择Jackson2进行序列化，得到的结果就是JSON格式。</p><p>问题：优先级是默认的是吧 可以修改吗</p><p>回答：是可以调整的，通过<code>extendMessageConverters</code>方法调整</p><h3 id="源码总结"><a href="#源码总结" class="headerlink" title="源码总结"></a>源码总结</h3><p>所有的 HTTP 自描述消息处理器均在 <code>messageConverters</code>（类型：<code>HttpMessageConverter</code>)，这个集合会传递到 <code>RequestMappingHandlerAdapter</code>，最终控制写出。</p><p><code>messageConverters</code>，其中包含很多自描述消息类型的处理，比如 JSON、XML、TEXT等等</p><p>以 application/json 为例，Spring Boot 中默认使用 Jackson2 序列化方式，其中媒体类型：application/json，它的处理类 <code>MappingJackson2HttpMessageConverter</code>，提供两类方法：</p><p>读read<em> ：通过 HTTP 请求内容转化成对应的 Bean<br>写write</em>： 通过 Bean 序列化成对应文本内容作为响应内容</p><ul><li><code>MappingJackson2HttpMessageConverter</code><ul><li><code>AbstractJackson2HttpMessageConverter</code><ul><li><code>AbstractGenericHttpMessageConverter</code><ul><li><code>AbstractHttpMessageConverter</code><ul><li><code>HttpMessageConverter</code></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="扩展自描述消息"><a href="#扩展自描述消息" class="headerlink" title="扩展自描述消息"></a>扩展自描述消息</h3><p>Properties 格式（application/properties+person)</p><p>（需要扩展）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person.id = 1</span><br><span class="line">person.name = 小马哥</span><br></pre></td></tr></table></figure><h4 id="如何调整顺序"><a href="#如何调整顺序" class="headerlink" title="如何调整顺序"></a>如何调整顺序</h4><p>我们先分析源码，找到切入点：从上面的分析我们知道 @EnableWebMvc注解，它会装配DelegatingWebMvcConfiguration类，在该类中有下面一个方法覆盖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line"><span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类WebMvcConfigurerComposite实现WebMvcConfigurer接口，真正实现的是这个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如WebMvcConfigurationSupport#extendMessageConverters()方法被getMessageConverters()方法调用，逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; getMessageConverters() &#123;</span><br><span class="line">  <span class="comment">// 如果messageConverters为空</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.messageConverters == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.messageConverters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">configureMessageConverters(<span class="keyword">this</span>.messageConverters);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.messageConverters.isEmpty()) &#123;</span><br><span class="line">addDefaultHttpMessageConverters(<span class="keyword">this</span>.messageConverters);</span><br><span class="line">&#125;</span><br><span class="line">          <span class="comment">// 扩展messageConverters，而这个方法真正是由</span></span><br><span class="line">          <span class="comment">//DelegatingWebMvcConfiguration#extendMessageConverters类实现</span></span><br><span class="line">extendMessageConverters(<span class="keyword">this</span>.messageConverters);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.messageConverters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，如果我们要改变这个顺序，我们只需要实现WebMvcConfigurer接口，实现其中的extendMessageConverters方法即可。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters)</span> </span>&#123;</span><br><span class="line">        messageConverters.set(<span class="number">0</span>,<span class="keyword">new</span> MappingJackson2HttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启，然后访问，不指定Accept内容，请求之后，结果变成JSON格式的了。</p><p>这里官网中的<a href="https://docs.spring.io/spring/docs/5.0.9.BUILD-SNAPSHOT/spring-framework-reference/web.html#spring-web" target="_blank" rel="noopener">Spring Web</a>  Message Converters地方有误，这里添加不生效，会被覆盖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        Jackson2ObjectMapperBuilder builder = <span class="keyword">new</span> Jackson2ObjectMapperBuilder()</span><br><span class="line">                .indentOutput(<span class="keyword">true</span>)</span><br><span class="line">                .dateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>))</span><br><span class="line">                .modulesToInstall(<span class="keyword">new</span> ParameterNamesModule());</span><br><span class="line">        converters.add(<span class="keyword">new</span> MappingJackson2HttpMessageConverter(builder.build()));</span><br><span class="line">        converters.add(<span class="keyword">new</span> MappingJackson2XmlHttpMessageConverter(builder.createXmlMapper(<span class="keyword">true</span>).build()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><p>实现 <code>AbstractHttpMessageConverter</code>抽象类</p><p>supports 方法：是否支持当前POJO类型<br>readInternal 方法：读取 HTTP 请求中的内容，并且转化成相应的POJO对象（通过 Properties 内容转化成 JSON）<br>writeInternal 方法：将 POJO 的内容序列化成文本内容（Properties格式），最终输出到 HTTP 响应中（通过 JSON 内容转化成 Properties ）</p><p><code>@RequestMappng</code> 中的 consumes 对应 请求头 “Content-Type”<br><code>@RequestMappng</code> 中的 produces   对应 请求头 “Accept”</p><p><code>HttpMessageConverter</code>执行逻辑：</p><p>读操作：尝试是否能读取，canRead 方法去尝试，如果返回 true 下一步执行 read</p><p>写操作：尝试是否能写入，canWrite 方法去尝试，如果返回 true 下一步执行 write</p><h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><p>创建PropertiesPersonHttpMessageConverter类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesPersonHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">AbstractHttpMessageConverter</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PropertiesPersonHttpMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(MediaType.valueOf(<span class="string">"application/properties+person"</span>));</span><br><span class="line">        setDefaultCharset(Charset.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clazz.isAssignableFrom(Person.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 讲请求内容中 Properties 内容转化成 Person 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputMessage</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> HttpMessageNotReadableException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Person <span class="title">readInternal</span><span class="params">(Class&lt;? extends Person&gt; clazz, HttpInputMessage inputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * person.id = 1</span></span><br><span class="line"><span class="comment">         * person.name = 小马哥</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        InputStream inputStream = inputMessage.getBody();</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 将请求中的内容转化成Properties</span></span><br><span class="line">        properties.load(<span class="keyword">new</span> InputStreamReader(inputStream,getDefaultCharset()));</span><br><span class="line">        <span class="comment">// 将properties 内容转化到 Person 对象字段中</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setId(Long.valueOf(properties.getProperty(<span class="string">"person.id"</span>)));</span><br><span class="line">        person.setName(properties.getProperty(<span class="string">"person.name"</span>));</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeInternal</span><span class="params">(Person person, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line">        OutputStream outputStream = outputMessage.getBody();</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(<span class="string">"person.id"</span>,String.valueOf(person.getId()));</span><br><span class="line">        properties.put(<span class="string">"person.name"</span>,person.getName());</span><br><span class="line">        properties.store(<span class="keyword">new</span> OutputStreamWriter(outputStream,getDefaultCharset()),<span class="string">"Written by web server"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建WebMvcConfig类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//messageConverters.set(0,new MappingJackson2HttpMessageConverter());</span></span><br><span class="line">        messageConverters.add(<span class="keyword">new</span> PropertiesPersonHttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在RestPersonController中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/json/to/properties"</span>,produces = <span class="string">"application/properties+person"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Person <span class="title">personJsonToProperties</span><span class="params">(@RequestBody Person person)</span></span>&#123;</span><br><span class="line">       <span class="comment">// @RequestBody 的内容是 JSON</span></span><br><span class="line">       <span class="comment">// 响应的内容是 Properties</span></span><br><span class="line">       <span class="keyword">return</span> person;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@PostMapping</span>(value = <span class="string">"/properties/to/json"</span>,</span><br><span class="line">           consumes = <span class="string">"application/properties+person"</span>, <span class="comment">// 请求类型 // Content-Type</span></span><br><span class="line">           produces =  MediaType.APPLICATION_JSON_UTF8_VALUE<span class="comment">// 响应类型 // Accept</span></span><br><span class="line">   )</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Person <span class="title">personPropertiesToJson</span><span class="params">(@RequestBody Person person)</span></span>&#123;</span><br><span class="line">       <span class="comment">// @RequestBody 的内容是 Properties</span></span><br><span class="line">       <span class="comment">// 响应的内容是 JSON</span></span><br><span class="line">       <span class="keyword">return</span> person;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>重启，然后测试</p><p>REST相关学习资料：</p><blockquote><p><a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">维基百科</a></p><p>fielding_dissertation博士论文第五章（Roy Thomas Fielding博士论文REST(中文版)）</p></blockquote><h1 id="REST服务端实战"><a href="#REST服务端实战" class="headerlink" title="REST服务端实战"></a>REST服务端实战</h1><h1 id="REST客户端实战"><a href="#REST客户端实战" class="headerlink" title="REST客户端实战"></a>REST客户端实战</h1><p>本篇文章演示代码 <a href="https://github.com/GreZhang/microservices/tree/master/spring-mvc-rest" target="_blank" rel="noopener">Spring-boot-rest</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;REST理论基础&quot;&gt;&lt;a href=&quot;#REST理论基础&quot; class=&quot;headerlink&quot; title=&quot;REST理论基础&quot;&gt;&lt;/a&gt;REST理论基础&lt;/h1&gt;&lt;p&gt;RPC(Remote Producer Call)：是指远程过程调用&lt;/p&gt;
&lt;ul&gt;
&lt;l
      
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot之Spring MVC视图技术</title>
    <link href="https://grezhang.github.io/2018/07/14/spring-boot/03spring%20boot%E4%B9%8BSpring%20MVC%E8%A7%86%E5%9B%BE%E6%8A%80%E6%9C%AF/"/>
    <id>https://grezhang.github.io/2018/07/14/spring-boot/03spring boot之Spring MVC视图技术/</id>
    <published>2018-07-14T04:12:56.000Z</published>
    <updated>2018-08-14T14:16:28.885Z</updated>
    
    <content type="html"><![CDATA[<p>IOC/DI我们说得很多，其实我们最应该关注的本质是生命周期。</p><h1 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h1><p>实例化 -&gt; Bean Class -&gt; Bean Object</p><p>初始化前 -&gt; Bean before/pre init()</p><ul><li><code>org.springframework.beans.factory.config.BeanPostProcessor#postProcessBeforeInitialization</code></li></ul><p>初始化 -&gt; init()</p><ul><li><code>org.springframework.beans.factory.InitializingBean#afterPropertiesSet()</code></li></ul><p>初始化后</p><ul><li><code>org.springframework.beans.factory.config.BeanPostProcessor#postProcessAfterInitialization()</code></li></ul><p>销毁</p><ul><li><code>org.springframework.beans.factory.DisposableBean#destroy()</code></li></ul><h1 id="Velocity视图技术"><a href="#Velocity视图技术" class="headerlink" title="Velocity视图技术"></a>Velocity视图技术</h1><p>常用的视图技术有</p><ul><li>JSP</li><li>Velocity</li><li>Thymeleaf</li><li>Freemark</li></ul><p>这些技术都会有</p><ul><li>逻辑处理 if else</li><li>迭代处理 for each</li><li>赋值  &lt;c:set / &lt;div th:with=”${}”   # set($var =”abc”)</li></ul><h2 id="Velocity与JSP对比"><a href="#Velocity与JSP对比" class="headerlink" title="Velocity与JSP对比"></a>Velocity与JSP对比</h2><p>与JSP相比较，Velocity完全避免了在页面中写java代码，从而破坏整个项目的分层结构。</p><ol><li>JSP视图解析器：</li></ol><ul><li><code>InternalResourceViewResolver</code><ul><li><code>UrlBasedViewResolver</code><ul><li><code>AbstractCachingViewResolver</code><ul><li><code>ViewResolver</code></li></ul></li></ul></li></ul></li></ul><p>JSP的类图如下：</p><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/spring-boot/JSP%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8%E7%B1%BB%E5%9B%BE.jpg" alt="JSP视图解析器类图"></p><p>JSP视图处理流程：</p><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/spring-boot/JSP%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.jpg" alt="JSP渲染流程"></p><ol start="2"><li>Velocity视图解析器：</li></ol><ul><li><p><code>VelocityViewResolver</code></p><ul><li><code>AbstractTemplateViewResolver</code><ul><li><code>UrlBasedViewResolver</code><ul><li><code>AbstractCachingViewResolver</code><ul><li><code>ViewResolver</code></li></ul></li></ul></li></ul></li></ul><p>视图解析器类图如下：</p></li></ul><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/spring-boot/Velocity%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8%E7%B1%BB%E5%9B%BE.jpg" alt="Velocity视图解析器类图"></p><h2 id="Velocity"><a href="#Velocity" class="headerlink" title="Velocity"></a>Velocity</h2><p>Velocity可以和Web应用、非Web应用集成</p><ul><li>Web</li><li>Non Web</li><li>Template（.mv）-&gt;Writer-&gt;Content(String)</li></ul><p>从Spring Boot1.5开始将会删除Velocity，1.7 2010年就没有更新，直到2017年才更新一版2.0。</p><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>详见：<a href="">github</a></p><h1 id="Thymeleaf视图技术"><a href="#Thymeleaf视图技术" class="headerlink" title="Thymeleaf视图技术"></a>Thymeleaf视图技术</h1><p>Spring Boot实施推广过程当中，除了使用Annotation方式重构之外，在前端渲染引擎方面，也推出了Thymeleaf、Velocity、FreeMark等。Thymeleaf的一些优缺点个人理解如下：</p><ul><li><p>该模板引擎是Spring Boot官方推荐使用的，优点如下：</p><ul><li><p>HTML结构化、UI友好、表达式功能强大</p><p>Thymeleaf设计的初衷就是针对UI友好，让开发人员在编写模板页面时，遵循标准的HTML语法。</p></li><li><p>表达功能强大</p><p>不但兼容标准OGNL表达式，而且也支持Spring表达。</p></li></ul></li><li><p>缺点：</p><ul><li>编写略微繁琐，扩展复杂</li><li>性能一般</li></ul></li></ul><h2 id="渲染上下文模型-Model"><a href="#渲染上下文模型-Model" class="headerlink" title="渲染上下文模型 Model"></a>渲染上下文模型 Model</h2><ul><li>Spring web MVC<ul><li>接口类型</li><li>Model</li><li>ModelMap</li><li>ModelAndView<ul><li>Model-&gt;ModelMap</li><li>View </li></ul></li></ul></li><li>注解类型<ul><li><code>@ModelAttribute</code></li></ul></li></ul><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><ul><li>字符值</li><li>多种数据类型<ul><li>数字：0,12,35..</li><li>Boolean: true,false</li><li>空：null</li><li>文字标记：one, sometext, main,…</li></ul></li><li>逻辑表达式<ul><li>if else</li></ul></li><li>迭代表达式<ul><li>for each / while</li></ul></li><li>反射<ul><li>Java Reflection</li><li>CGLib</li></ul></li></ul><h2 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h2><p>这里只告诉怎么去学习这个配置文件，不会详细的介绍每一个属性的含义，具体请参考<a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#howto-reload-thymeleaf-content" target="_blank" rel="noopener">官网</a></p><p>像这种模板引擎的相关配置，我们怎么去学习？</p><ul><li><p>第一步：搜索 <code>ThymeleafProperties</code>类，找到<code>@ConfigurationProperties</code>确认前缀</p></li><li><p>第二不：是否是字段和属性名一一对应，一般都是前缀spring.thymeleaf+属性名</p><p>官网：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring.thymeleaf.cache=true</span><br><span class="line">spring.thymeleaf.check-template=true</span><br><span class="line">spring.thymeleaf.encoding=UTF-8</span><br><span class="line">spring.thymeleaf.check-template-location=true</span><br><span class="line">spring.thymeleaf.enabled=true</span><br><span class="line">spring.thymeleaf.mode=HTML</span><br><span class="line">spring.thymeleaf.prefix=classpath:/templates/</span><br><span class="line">spring.thymeleaf.suffix=.html</span><br><span class="line">spring.thymeleaf.view-names=</span><br></pre></td></tr></table></figure><p>ThymeleafProperties类部分属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.thymeleaf"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = StandardCharsets.UTF_8;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>; </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplate = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplateLocation = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">private</span> String prefix = DEFAULT_PREFIX;</span><br><span class="line">  <span class="keyword">private</span> String suffix = DEFAULT_SUFFIX;</span><br><span class="line">  <span class="keyword">private</span> String mode = <span class="string">"HTML"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> cache = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">private</span> String[] viewNames;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="模板寻址"><a href="#模板寻址" class="headerlink" title="模板寻址"></a>模板寻址</h2><p>prefix + “viewName” + suffix</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">classpath:/templates/thymeleaf/index.dota2</span><br><span class="line">view.setUrl(getPrefix() + viewName + getSuffix())</span><br></pre></td></tr></table></figure><h2 id="模板缓存"><a href="#模板缓存" class="headerlink" title="模板缓存"></a>模板缓存</h2><p>默认 Cache = true </p><p>Cache = false -&gt; 设置缓存时间</p><h1 id="Spring-MVC模板渲染逻辑"><a href="#Spring-MVC模板渲染逻辑" class="headerlink" title="Spring MVC模板渲染逻辑"></a>Spring MVC模板渲染逻辑</h1><p>Spring MVC 核心总控制器 <code>DispatcherServlet</code></p><ul><li><p>C:</p><ul><li><code>DispatcherServlet</code></li></ul></li><li><p>M:</p><ul><li><p>Spring MVC 部分</p></li><li><p>Model/ModelMap/ModelAndView(Model部分)</p></li><li><p><code>@ModelAttribute</code></p></li><li><p>模板引擎（通常）</p></li><li><p>通用的方式</p><ul><li>模板上下文</li><li>內建/内嵌自己的工具变量</li></ul></li><li><p>JSP 内置（ built-in ）九大变量</p><ul><li>Servlet Scope 上下文（Spring<code>@Scope</code>）</li><li>PageContext（page 变量）<ul><li>关注当前页面</li><li>A forward B</li><li>A 变量只能 A 页面使用，不能共享给 B</li><li>A t 和 B t 可以采用同名变量，同时使用</li></ul></li><li>Servlet Request（请求上下文） -<code>WebApplicationContext#SCOPE_REQUEST</code><ul><li>关注当前请求</li><li>A forward B<ul><li>A 请求变量可以用于 B 页面</li></ul></li></ul></li></ul><p>​</p><ul><li>Servlet Session（会话上下文） - <code>WebApplicationContext#SCOPE_SESSION</code><ul><li>关注当前会话</li><li>A forward / redirect B<ul><li>A 请求变量可以用于 B 页面</li></ul></li></ul></li></ul><p>​</p><ul><li>Servlet ServletContext（应用上下文） - <code>WebApplicationContext#SCOPE_APPLICATION</code><ul><li>关注当前应用</li><li>用户 A 和 用户 B 会话可以共享</li></ul></li><li>JSP 内置变量( JSP = Servlet )</li><li>out（Writer = ServletResponse#getWriter()）</li><li>exception ( Throwable)</li><li>config( ServletConfig )</li><li>page ( Jsp Servlet 对象)</li><li>response（ServletResponse)</li></ul></li><li><p>thymeleaf变量</p><p><code>StandardExpressionObjectFactory</code> -&gt; 构建 <code>IExpressionContext</code></p></li></ul></li><li><p>V: </p><ul><li><p>视图对象</p></li><li><p>Servlet</p><ul><li><code>RequestDispatcher#forward</code></li><li><code>RequestDispatcher#include</code></li><li><code>HttpServletResponse#sendRedirect</code></li></ul></li><li><p>Spring MVC </p><ul><li><code>View</code></li><li>forward:<ul><li><code>InternalResourceView</code></li></ul></li><li>redirect:<ul><li><code>RedirectView</code></li></ul></li></ul></li><li><p>Struts </p><ul><li><code>Action</code></li><li><code>ForwardAction</code></li><li><code>RedirectAction</code></li></ul></li><li><p>视图处理对象</p></li><li><p>Spring MVC</p><ul><li><p>*.do-&gt; <code>DispatcherServlet</code>-&gt;<code>Controller</code>-&gt;View-&gt;<code>ViewResolver</code>-&gt;<code>View#render</code>-&gt;<code>HTML</code>-&gt;<code>HttpServletResponse</code></p></li><li><p>Thymeleaf </p><ul><li><p><code>ViewResolver</code>-&gt; <code>ThymeleafViewResolver</code></p></li><li><p><code>View</code>-&gt; <code>ThymeleafView</code></p></li><li><p>通过模板名称解析模板资源（<code>ClassPathResource</code>）</p><ul><li><code>TemplateResolution</code></li></ul></li><li><p>读取资源，并且渲染内容 HTML</p><ul><li><code>IEngineContext</code></li><li><code>ProcessorTemplateHandler</code></li></ul></li><li><p>HTML 内容输出到 Response</p></li><li><p>源码路径</p><p><code>org.thymeleaf.TemplateEngine#process(org.thymeleaf.TemplateSpec, org.thymeleaf.context.IContext, java.io.Writer)</code><br><code>org.thymeleaf.engine.TemplateManager#parseAndProc</code></p></li></ul></li><li><p>JSP</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>ViewResolver -&gt;InternalResourceViewResolver</p></li><li><p>View -&gt; JstlView</p><ul><li>Foward -&gt; RequestDispatcher</li></ul></li></ul></li><li><p>Struts</p><p>*.do -&gt; <code>ActionServlet</code>-&gt; <code>Action</code> -&gt; <code>ForwardAction</code>-&gt; <code>RequestDispatcher</code>-&gt; JSP（<code>Servlet</code>） -&gt; HTML -&gt; <code>HttpServletResponse</code></p></li></ul></li></ul><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/spring-boot/%E8%A7%86%E5%9B%BE%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.jpg" alt="视图渲染流程"></p><h1 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h1><h1 id="模板引擎核心组件"><a href="#模板引擎核心组件" class="headerlink" title="模板引擎核心组件"></a>模板引擎核心组件</h1><p>资源管理</p><p>模板封装</p><p>模板解析</p><p>国际化</p><p>渲染上下文</p><p>表达式引擎</p><p>渲染引擎</p><p>这些组件可以查阅相关资料，这里不再累述。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IOC/DI我们说得很多，其实我们最应该关注的本质是生命周期。&lt;/p&gt;
&lt;h1 id=&quot;Bean的生命周期&quot;&gt;&lt;a href=&quot;#Bean的生命周期&quot; class=&quot;headerlink&quot; title=&quot;Bean的生命周期&quot;&gt;&lt;/a&gt;Bean的生命周期&lt;/h1&gt;&lt;p&gt;实例化
      
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot之Application</title>
    <link href="https://grezhang.github.io/2018/07/08/spring-boot/02spring%20boot%E4%B9%8BApplication/"/>
    <id>https://grezhang.github.io/2018/07/08/spring-boot/02spring boot之Application/</id>
    <published>2018-07-08T04:12:56.000Z</published>
    <updated>2018-08-09T12:38:32.191Z</updated>
    
    <content type="html"><![CDATA[<p>本章主要学习自定义 SpringApplication、Spring注解编程模型、Spring Boot事件。</p><h1 id="一、自定义-SpringApplication"><a href="#一、自定义-SpringApplication" class="headerlink" title="一、自定义 SpringApplication"></a>一、自定义 SpringApplication</h1><h2 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a><code>SpringApplication</code></h2><p><code>SpringApplication</code>是Spring Boot驱动Spring应用上下文的引导类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@ComponentScan</code>它是哪个版本开始时引入的？是 Spring Framework3.1,在Spring中扫描<code>basePackages</code> 指定的包或者 XML中 <a href="context:component-scan" target="_blank" rel="noopener">context:component-scan</a>元素</p><p><code>@EnableAutoConfiguration</code>: 激活自动装配 <code>@Enable</code> -&gt; <code>@Enable</code> 开头的</p><ul><li><code>@EnableWebMvc</code></li><li><code>@EnableTransactionManagement</code></li><li><code>@EnableAspectJAutoProxy</code></li><li><code>@EnableAsync</code></li></ul><p><code>@SpringBootConfiguration</code>等价于<code>@Configuration</code> -&gt; <code>Configuration Class</code> 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Component-注解的派生性"><a href="#Component-注解的派生性" class="headerlink" title="@Component 注解的派生性"></a><code>@Component</code> 注解的派生性</h2><p>在Java中，由于注解没有继承性，所以这里通过元注解标注出来的我们把它叫做派生性。</p><p>一般来说这类注解通常成对出现，比如：</p><p><code>@Component</code>-&gt;<code>@ComponentScan</code></p><p>为什么被<code>@Component</code>及其派生类就能够被扫描到IOC容器当中呢？</p><p>处理类 -&gt; <code>ConfigurationClassParser</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;BeanDefinitionHolder&gt; <span class="title">parse</span><span class="params">(AnnotationAttributes componentScan, <span class="keyword">final</span> String declaringClass)</span> </span>&#123;</span><br><span class="line">ClassPathBeanDefinitionScanner scanner = <span class="keyword">new</span> ClassPathBeanDefinitionScanner(<span class="keyword">this</span>.registry,</span><br><span class="line">componentScan.getBoolean(<span class="string">"useDefaultFilters"</span>), <span class="keyword">this</span>.environment, <span class="keyword">this</span>.resourceLoader);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扫描类<code>ClassPathBeanDefinitionScanner</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassPathBeanDefinitionScanner</span> <span class="keyword">extends</span> <span class="title">ClassPathScanningCandidateComponentProvider</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它有一个父类<code>ClassPathScanningCandidateComponentProvider</code>,看构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a ClassPathScanningCandidateComponentProvider with the given &#123;<span class="doctag">@link</span> Environment&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> useDefaultFilters whether to register the default filters for the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;, &#123;<span class="doctag">@link</span> Repository <span class="doctag">@Repository</span>&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Service <span class="doctag">@Service</span>&#125;, and &#123;<span class="doctag">@link</span> Controller <span class="doctag">@Controller</span>&#125;</span></span><br><span class="line"><span class="comment"> * stereotype annotations</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> environment the Environment to use</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #registerDefaultFilters()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathScanningCandidateComponentProvider</span><span class="params">(<span class="keyword">boolean</span> useDefaultFilters, Environment environment)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (useDefaultFilters) &#123;</span><br><span class="line">registerDefaultFilters();</span><br><span class="line">&#125;</span><br><span class="line">setEnvironment(environment);</span><br><span class="line">setResourceLoader(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register the default filter for &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This will implicitly register all annotations that have the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125; meta-annotation including the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Repository <span class="doctag">@Repository</span>&#125;, &#123;<span class="doctag">@link</span> Service <span class="doctag">@Service</span>&#125;, and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Controller <span class="doctag">@Controller</span>&#125; stereotype annotations.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Also supports Java EE 6's &#123;<span class="doctag">@link</span> javax.annotation.ManagedBean&#125; and</span></span><br><span class="line"><span class="comment"> * JSR-330's &#123;<span class="doctag">@link</span> javax.inject.Named&#125; annotations, if available.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerDefaultFilters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 关键之处，这就是为什么只扫描Component</span></span><br><span class="line"><span class="keyword">this</span>.includeFilters.add(<span class="keyword">new</span> AnnotationTypeFilter(Component.class));</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这里可以知道，如果使用useDefaultFilters，这个类会将<code>@Component</code> 注解及其派生类<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code>、<code>@Configuration</code> 等扫描解析到Spring IOC。其大致流程如下：</p><p><code>@ComponentScan</code> -&gt; <code>@Confiugration</code> Class -&gt;  basePackages -&gt; <code>@Component Beans</code> -&gt;</p><p><code>BeanDefinition</code>-&gt;<code>BeanDefinitionRegistry</code> -&gt;<code>Beans</code> -&gt; <code>BeanFactory</code> -&gt; <code>getBean</code> or <code>@Autowired</code></p><p>IoC/DI -&gt;</p><ul><li><p><code>@Component</code> </p><ul><li><p><code>@Service</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@Repository</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Repository &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@Controller</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@Configuration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Configuration &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>我们可以看到<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code>、<code>@Configuration</code> 都是有<code>@Component</code> 注解标注，可以这样理解，这些注解都是由<code>@Component</code>派生来，具体请查看Spring注解编程模型。</p><p>那么按照这个理解：</p><ul><li><code>@SpringBootApplication</code> 标注当前一些功能</li><li><ul><li><code>@SpringBootApplication</code></li><li><ul><li><code>@SpringBootConfiguration</code></li><li><ul><li><code>@Configuration</code></li><li><ul><li><code>@Component</code></li></ul></li></ul></li></ul></li></ul></li></ul><p>验证：</p><h2 id="Spring-Boot-引导示例"><a href="#Spring-Boot-引导示例" class="headerlink" title="Spring Boot 引导示例"></a>Spring Boot 引导示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroservicesProjectApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 启动Spring boot方式一</span></span><br><span class="line">        <span class="comment">//SpringApplication.run(MicroservicesProjectApplication.class,args);</span></span><br><span class="line">        SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(MicroservicesProjectApplication.class);</span><br><span class="line">        Map&lt;String, Object&gt; properties = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        properties.put(<span class="string">"server.port"</span>,<span class="number">0</span>);</span><br><span class="line">        springApplication.setDefaultProperties(properties);</span><br><span class="line">        ConfigurableApplicationContext context = springApplication.run(args);</span><br><span class="line">        <span class="comment">// 这里可以正常输出，不会报异常</span></span><br><span class="line">        System.out.println(context.getBean(MicroservicesProjectApplication.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调整示例为非web程序"><a href="#调整示例为非web程序" class="headerlink" title="调整示例为非web程序"></a>调整示例为非web程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroservicesProjectApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 启动Spring boot方式一</span></span><br><span class="line">        <span class="comment">//SpringApplication.run(MicroservicesProjectApplication.class,args);</span></span><br><span class="line">        SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(MicroservicesProjectApplication.class);</span><br><span class="line">        Map&lt;String, Object&gt; properties = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        properties.put(<span class="string">"server.port"</span>,<span class="number">0</span>);</span><br><span class="line">        springApplication.setDefaultProperties(properties);</span><br><span class="line">        <span class="comment">// 设置为非web应用</span></span><br><span class="line">        springApplication.setWebApplicationType(WebApplicationType.NONE);</span><br><span class="line">        ConfigurableApplicationContext context = springApplication.run(args);</span><br><span class="line">        System.out.println(context.getBean(MicroservicesProjectApplication.class));</span><br><span class="line">        <span class="comment">// 输出当前spring boot 应用的ApplicationContext的类名</span></span><br><span class="line">        System.err.println(<span class="string">"当前Spring应用上下文:"</span>+context.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：我们可以看到当调整为非Web程序时，它的ApplicationContext为注解驱动上下文，Tomcat也没有启动了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前Spring应用上下文:org.springframework.context.annotation.AnnotationConfigApplicationContext</span><br></pre></td></tr></table></figure><p>我们再来看下一个例子：</p><h2 id="Spring注解驱动示例"><a href="#Spring注解驱动示例" class="headerlink" title="Spring注解驱动示例"></a>Spring注解驱动示例</h2><p>注解驱动上下文，<code>AnnotationConfigApplicationContext</code> Spring Framework 3.0开始引入的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringAnnotationDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//   XML 配置文件驱动       ClassPathXmlApplicationContext</span></span><br><span class="line">        <span class="comment">// Annotation 驱动</span></span><br><span class="line">        <span class="comment">// 找 BeanDefinition</span></span><br><span class="line">        <span class="comment">// @Bean @Configuration</span></span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">        <span class="comment">// 注册一个 @configuration class = SpringAnnotationDemo</span></span><br><span class="line">        context.register(SpringAnnotationDemo.class);</span><br><span class="line">        <span class="comment">// 上下文启动</span></span><br><span class="line">        context.refresh();</span><br><span class="line">        System.out.println(context.getBean(SpringAnnotationDemo.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringApplication类型推断"><a href="#SpringApplication类型推断" class="headerlink" title="SpringApplication类型推断"></a>SpringApplication类型推断</h2><p>通过上面的例子，看看SpringApplication的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">        <span class="comment">// 类型设置</span></span><br><span class="line"><span class="keyword">this</span>.webApplicationType = deduceWebApplicationType();</span><br><span class="line">setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">ApplicationContextInitializer.class));</span><br><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line"><span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> WebApplicationType <span class="title">deduceWebApplicationType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ClassUtils.isPresent(REACTIVE_WEB_ENVIRONMENT_CLASS, <span class="keyword">null</span>)</span><br><span class="line">&amp;&amp; !ClassUtils.isPresent(MVC_WEB_ENVIRONMENT_CLASS, <span class="keyword">null</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> WebApplicationType.REACTIVE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (String className : WEB_ENVIRONMENT_CLASSES) &#123;</span><br><span class="line"><span class="keyword">if</span> (!ClassUtils.isPresent(className, <span class="keyword">null</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> WebApplicationType.NONE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> WebApplicationType.SERVLET;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在这个方法中使用</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableApplicationContext <span class="title">createApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt; contextClass = <span class="keyword">this</span>.applicationContextClass;</span><br><span class="line"><span class="keyword">if</span> (contextClass == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="keyword">this</span>.webApplicationType) &#123;</span><br><span class="line"><span class="keyword">case</span> SERVLET:</span><br><span class="line">                    <span class="comment">//org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext</span></span><br><span class="line">contextClass = Class.forName(DEFAULT_WEB_CONTEXT_CLASS);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> REACTIVE:</span><br><span class="line">                    <span class="comment">//org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext</span></span><br><span class="line">contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">                    <span class="comment">// org.springframework.context.annotation.AnnotationConfigApplicationContext</span></span><br><span class="line">contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="string">"Unable create a default ApplicationContext, "</span></span><br><span class="line">+ <span class="string">"please specify an ApplicationContextClass"</span>,</span><br><span class="line">ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当不加以设置 Web 类型，那么它采用推断：</p><p>-&gt;<code>SpringAppliation()</code> -&gt; <code>deduceWebApplicationType()</code> 第一次推断为 <code>WebApplicationType.SERVLET</code></p><ul><li><code>WebApplicationType.NONE</code> : 非 Web 类型 <ul><li><code>Servlet</code>不存在</li><li><code>Spring Web</code> 应用上下文 <code>ConfigurableWebApplicationContext</code>  不存在</li><li><code>spring-boot-starter-web</code> 不存在</li><li><code>spring-boot-starter-webflux</code> 不存在</li></ul></li><li><ul><li><code>WebApplicationType.REACTIVE</code>: <code>Spring WebFlux</code></li><li><code>DispatcherHandler</code></li><li><code>spring-boot-starter-webflux</code>存在</li><li><code>Servlet</code> 不存在</li><li><code>spring-boot-starter-web</code> 不存在</li></ul></li><li><code>WebApplicationType.SERVLET</code> : <code>Spring MVC</code><ul><li><code>spring-boot-starter-web</code> 存在</li></ul></li></ul><h2 id="人工干预web类型"><a href="#人工干预web类型" class="headerlink" title="人工干预web类型"></a>人工干预web类型</h2><p>设置 <code>webApplicationType</code> 属性 为<code>WebApplicationType.NONE</code></p><h1 id="二、Spring注解编程模型"><a href="#二、Spring注解编程模型" class="headerlink" title="二、Spring注解编程模型"></a>二、Spring注解编程模型</h1><p>资料在<a href="https://github.com/spring-projects/spring-framework/wiki/Spring-Annotation-Programming-Model" target="_blank" rel="noopener">Spring注解编程模型</a>中，请自行阅读。目前这一块理解得不够透彻，暂时不写了，后续会继续完善。</p><h1 id="三、Spring-Boot事件"><a href="#三、Spring-Boot事件" class="headerlink" title="三、Spring Boot事件"></a>三、Spring Boot事件</h1><h2 id="Spring事件"><a href="#Spring事件" class="headerlink" title="Spring事件"></a>Spring事件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringEventListenerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GenericApplicationContext context = <span class="keyword">new</span> GenericApplicationContext();</span><br><span class="line">        context.addApplicationListener(<span class="keyword">new</span> ApplicationListener&lt;ApplicationEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">                System.err.println(<span class="string">"监听:"</span>+event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 启动Spring上下文</span></span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="comment">// 一个ContextRefreshedEvent</span></span><br><span class="line">        <span class="comment">// 一个PayloadApplicationEvent</span></span><br><span class="line">        <span class="comment">// Spring 应用上下文发布事件</span></span><br><span class="line">        context.publishEvent(<span class="string">"Hello,World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">监听:ContextRefreshedEvent[source=org.springframework.context.support.GenericApplicationContext@5f71c76a: </span><br><span class="line">...</span><br><span class="line">监听:org.springframework.context.PayloadApplicationEvent[source=org.springframework.context.support.GenericApplicationContext@5f71c76a:</span><br></pre></td></tr></table></figure><p>自定义一个事件示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringEventListenerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GenericApplicationContext context = <span class="keyword">new</span> GenericApplicationContext();</span><br><span class="line">        context.addApplicationListener(<span class="keyword">new</span> ApplicationListener&lt;ApplicationEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">                System.err.println(<span class="string">"监听:"</span>+event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 启动Spring上下文</span></span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="comment">// 一个ContextRefreshedEvent</span></span><br><span class="line">        <span class="comment">// 一个PayloadApplicationEvent</span></span><br><span class="line">        <span class="comment">// Spring 应用上下文发布事件</span></span><br><span class="line">        context.publishEvent(<span class="string">"Hello,World!"</span>);</span><br><span class="line">        <span class="comment">// 发布自定义事件</span></span><br><span class="line">        context.publishEvent(<span class="keyword">new</span> MyEvent(<span class="string">"HelloWorld2018"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义事件类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">监听:org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.context.support.GenericApplicationContext@5f71c76a: startup date [Wed Aug 08 21:54:51 CST 2018]; root of context hierarchy]</span><br><span class="line">Disconnected from the target VM, address: &apos;127.0.0.1:57170&apos;, transport: &apos;socket&apos;</span><br><span class="line">监听:org.springframework.context.PayloadApplicationEvent[source=org.springframework.context.support.GenericApplicationContext@5f71c76a: startup date [Wed Aug 08 21:54:51 CST 2018]; root of context hierarchy]</span><br><span class="line">监听:com.gre.world.spring.SpringEventListenerDemo$MyEvent[source=HelloWorld2018]</span><br></pre></td></tr></table></figure><p>添加Spring上下文关闭事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringEventListenerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GenericApplicationContext context = <span class="keyword">new</span> GenericApplicationContext();</span><br><span class="line">        context.addApplicationListener(<span class="keyword">new</span> ApplicationListener&lt;ApplicationEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">                System.err.println(<span class="string">"监听:"</span>+event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 启动Spring上下文</span></span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="comment">// 一个ContextRefreshedEvent</span></span><br><span class="line">        <span class="comment">// 一个PayloadApplicationEvent</span></span><br><span class="line">        <span class="comment">// Spring 应用上下文发布事件</span></span><br><span class="line">        context.publishEvent(<span class="string">"Hello,World!"</span>);</span><br><span class="line">        <span class="comment">// 发布自定义事件</span></span><br><span class="line">        context.publishEvent(<span class="keyword">new</span> MyEvent(<span class="string">"HelloWorld2018"</span>));</span><br><span class="line">        <span class="comment">// 关闭应用上下文</span></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义事件类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后会有四个事件</p><p>通过上面这些例子，我们可以看到，Spring会监听你自定义的事件、发布的事件以及Spring本身的上下文动作处理事件。那么如果我们只想监听Spring上下文关闭事件怎么做?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringEventListenerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GenericApplicationContext context = <span class="keyword">new</span> GenericApplicationContext();</span><br><span class="line">        <span class="comment">// 添加自定义监听器</span></span><br><span class="line">        context.addApplicationListener(<span class="keyword">new</span> ClosedListener());</span><br><span class="line">        context.addApplicationListener(<span class="keyword">new</span> RefreshedListener());</span><br><span class="line">        <span class="comment">// 启动Spring上下文</span></span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="comment">// 一个ContextRefreshedEvent</span></span><br><span class="line">        <span class="comment">// 一个PayloadApplicationEvent</span></span><br><span class="line">        <span class="comment">// Spring 应用上下文发布事件</span></span><br><span class="line">        context.publishEvent(<span class="string">"Hello,World!"</span>);</span><br><span class="line">        <span class="comment">// 发布自定义事件</span></span><br><span class="line">        context.publishEvent(<span class="keyword">new</span> MyEvent(<span class="string">"HelloWorld2018"</span>));</span><br><span class="line">        <span class="comment">// 关闭应用上下文</span></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RefreshedListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ContextRefreshedEvent</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"上下文启动："</span> + event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ClosedListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ContextClosedEvent</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextClosedEvent event)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"关闭上下文："</span> + event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义事件类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后，我们发现只监听到两个事件，一个ClosedListener和一个RefreshedListener。</p><p>也就是说，当我们不指定某种类型的监听事件的时候，它是会监听到所有的事件，当指定类型时，它只会监听指定的事件类型。</p><h3 id="Spring-内部发送事件"><a href="#Spring-内部发送事件" class="headerlink" title="Spring 内部发送事件"></a>Spring 内部发送事件</h3><ul><li><code>ContextRefreshedEvent</code> <ul><li><code>ApplicationContextEvent</code><ul><li><code>ApplicationEvent</code></li></ul></li></ul></li></ul><p><code>refresh()</code>-&gt;<code>finishRefresh()</code>-&gt;  <code>publishEvent(new ContextRefreshedEvent(this))</code></p><ul><li><code>ContextClosedEvent</code><ul><li><code>ApplicationContextEvent</code><ul><li><code>ApplicationEvent</code></li></ul></li></ul></li></ul><p><code>close()</code> -&gt; <code>doClose()</code>-&gt;<code>publishEvent(new ContextClosedEvent(this))</code>;</p><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p><code>PayloadApplicationEvent</code></p><p>Spring 事件 都是<code>ApplicationEvent</code> 类型</p><p>发送 Spring 事件通过  <code>ApplicationEventMulticaster#multicastEvent(ApplicationEvent, ResolvableType)</code></p><p>Spring 事件的类型<code>ApplicationEvent</code></p><p>Spring 事件监听器 <code>ApplicationListener</code></p><p>Spring 事件广播器 <code>ApplicationEventMulticaster</code></p><p>实现类：<code>SimpleApplicationEventMulticaster</code></p><p>Spring 事件理解为消息</p><p><code>ApplicationEvent</code> 相当于消息内容</p><p><code>ApplicationListener</code> 相当于消息消费者、订阅者</p><p><code>ApplicationEventMulticaster</code> 相当于消息生产者、发布者</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationEventMulticasterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationEventMulticaster multicaster = <span class="keyword">new</span> SimpleApplicationEventMulticaster();</span><br><span class="line">        <span class="comment">// 添加监听器</span></span><br><span class="line">        multicaster.addApplicationListener(event -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (event <span class="keyword">instanceof</span> PayloadApplicationEvent) &#123;</span><br><span class="line">                System.out.println(<span class="string">"接受到 PayloadApplicationEvent :"</span></span><br><span class="line">                        + PayloadApplicationEvent.class.cast(event).getPayload());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"接收到事件："</span> + event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 发布/广播事件</span></span><br><span class="line">        multicaster.multicastEvent(<span class="keyword">new</span> MyEvent(<span class="string">"Hello,World"</span>));</span><br><span class="line">        multicaster.multicastEvent(<span class="keyword">new</span> PayloadApplicationEvent&lt;Object&gt;(<span class="string">"2"</span>, <span class="string">"Hello,World"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Boot事件"><a href="#Spring-Boot事件" class="headerlink" title="Spring Boot事件"></a>Spring Boot事件</h3><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootEventDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(SpringBootEventDemo.class)</span><br><span class="line">                .listeners(event -&gt; &#123;<span class="comment">// 增加监听器</span></span><br><span class="line">                    System.out.println(<span class="string">"监听到事件:"</span>+event.getClass().getSimpleName());</span><br><span class="line">                &#125;)</span><br><span class="line">                .run(args) <span class="comment">// 运行</span></span><br><span class="line">                .close(); <span class="comment">// 关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>ApplicationStartingEvent</code>（1）</li><li><code>ApplicationEnvironmentPreparedEvent</code>（2）</li><li><code>ApplicationPreparedEvent</code>（3）</li><li><code>ContextRefreshedEvent</code></li><li><code>ServletWebServerInitializedEvent</code></li><li><code>ApplicationStartedEvent</code>（4）</li><li><code>ApplicationReadyEvent</code>（5）</li><li><code>ContextClosedEvent</code></li><li><code>ApplicationFailedEvent</code> (特殊情况)（6）</li></ol><h3 id="Spring-Boot-事件监听器"><a href="#Spring-Boot-事件监听器" class="headerlink" title="Spring Boot 事件监听器"></a>Spring Boot 事件监听器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">org.springframework.boot.ClearCachesApplicationListener,\</span><br><span class="line">org.springframework.boot.builder.ParentContextCloserApplicationListener,\</span><br><span class="line">org.springframework.boot.context.FileEncodingApplicationListener,\</span><br><span class="line">org.springframework.boot.context.config.AnsiOutputApplicationListener,\</span><br><span class="line">org.springframework.boot.context.config.ConfigFileApplicationListener,\</span><br><span class="line">org.springframework.boot.context.config.DelegatingApplicationListener,\</span><br><span class="line">org.springframework.boot.context.logging.ClasspathLoggingApplicationListener,\</span><br><span class="line">org.springframework.boot.context.logging.LoggingApplicationListener,\</span><br><span class="line">org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener</span><br></pre></td></tr></table></figure><p><code>ConfigFileApplicationListener</code>监听 <code>ApplicationEnvironmentPreparedEvent</code>事件</p><p>从而加载 application.properties 或者 application.yml 文件</p><p>Spring Boot 很多组件依赖于 Spring Boot 事件监听器实现，本质是<code>Spring Framework</code>事件/监听机制</p><p><code>SpringApplication</code>利用</p><ul><li>Spring 应用上下文（<code>ApplicationContext</code>）生命周期控制 注解驱动 Bean </li><li>Spring 事件/监听（<code>ApplicationEventMulticaster</code>）机制加载或者初始化组件</li></ul><p>q1：<code>webApplicationType</code>分为三种都有什么实用地方</p><p>q2：框架底层的事件是单线程么？业务实现是否可以使用事件去实现？如果使用事件实现会不会是不是会有性能问题？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleApplicationEventMulticaster</span> <span class="keyword">extends</span> <span class="title">AbstractApplicationEventMulticaster</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> Executor taskExecutor;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本章主要学习自定义 SpringApplication、Spring注解编程模型、Spring Boot事件。&lt;/p&gt;
&lt;h1 id=&quot;一、自定义-SpringApplication&quot;&gt;&lt;a href=&quot;#一、自定义-SpringApplication&quot; class=&quot;he
      
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch源码分析之Threadpool模块</title>
    <link href="https://grezhang.github.io/2018/07/07/ElasticSearch/elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8BThreadPool%E6%A8%A1%E5%9D%97/"/>
    <id>https://grezhang.github.io/2018/07/07/ElasticSearch/elasticsearch源码分析之ThreadPool模块/</id>
    <published>2018-07-07T03:10:57.000Z</published>
    <updated>2018-07-02T02:04:10.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Elasticsearch源码分析专题" scheme="https://grezhang.github.io/categories/Elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="elasticsearch" scheme="https://grezhang.github.io/tags/elasticsearch/"/>
    
      <category term="源码分析" scheme="https://grezhang.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot初体验</title>
    <link href="https://grezhang.github.io/2018/07/05/spring-boot/01spring%20boot%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://grezhang.github.io/2018/07/05/spring-boot/01spring boot初体验/</id>
    <published>2018-07-05T04:12:56.000Z</published>
    <updated>2018-08-06T14:21:27.250Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
</feed>
