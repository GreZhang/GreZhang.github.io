<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gre的博客</title>
  
  <subtitle>风骚的程序员</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://grezhang.github.io/"/>
  <updated>2018-08-16T15:42:52.303Z</updated>
  <id>https://grezhang.github.io/</id>
  
  <author>
    <name>Gre World</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring boot之Spring MVC视图技术</title>
    <link href="https://grezhang.github.io/2018/07/20/spring-boot/04spring%20boot%E4%B9%8BSpring%20MVC%20REST/"/>
    <id>https://grezhang.github.io/2018/07/20/spring-boot/04spring boot之Spring MVC REST/</id>
    <published>2018-07-20T04:12:56.000Z</published>
    <updated>2018-08-16T15:42:52.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="REST理论基础"><a href="#REST理论基础" class="headerlink" title="REST理论基础"></a>REST理论基础</h1><p>RPC(Remote Producer Call)：是指远程过程调用</p><ul><li>语言相关 <ul><li>Java RMI</li><li>.net -COM+</li></ul></li><li>语言无关<ul><li>SOA<ul><li>WebService<ul><li>SOAP</li><li>HTTP、SMTP</li></ul></li></ul></li><li>微服务（MSA）<ul><li>REST<ul><li>HTML、JSON、XML等</li><li>HTTP协议<ul><li>Http1.1<ul><li>短连接</li><li>Keep-Live</li><li>连接池</li></ul></li><li>Http2.0<ul><li>长连接</li></ul></li></ul></li><li>技术<ul><li>Spring客户端：RestTemplate</li><li>Spring web MVC：@RestController==<code>@Controller</code>+<code>@ResponseBody</code>+<code>@RequestBody</code></li><li>Spring Cloud : <code>RestTemplate</code>扩展 + <code>@LoadBalanced</code></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="Cacheability（可缓存性）"><a href="#Cacheability（可缓存性）" class="headerlink" title="Cacheability（可缓存性）"></a>Cacheability（可缓存性）</h2><p>这个与rest没有必然的关系，我们在学习rest的时候不会将这个放置进去。</p><p><code>@ResponseBody</code> -&gt; 响应体（Response Body）</p><ul><li><p>响应（<code>Response</code>）</p><ul><li>响应头（<code>Headers</code>）</li><li>请求方法<ul><li>HEAD</li></ul></li><li>元信息（Meta-Data）<ul><li>Accept-Language -&gt; <code>Locale</code></li><li>Connection -&gt; Keep-Alive</li></ul></li><li>实现</li></ul></li></ul><p>  多值 Map MultiValueMap</p><p>  Key : Value = 1 : N</p><p>  Name : Value = 1 : N</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpHeaders</span> <span class="keyword">implements</span> <span class="title">MultiValueMap</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt;, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>响应体</p></li><li><p>业务信息（Business Data）</p></li><li><p>Body：HTTP 实体、REST</p><ul><li>@ResponseBody</li><li>HttpEntity.body 属性（泛型结构）</li></ul></li><li><p>Payload ： 消息 JMS、事件、SOAP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEntity</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> HttpHeaders headers;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Nullable</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> T body;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="HTTP状态码-org-springframework-http-HttpStatus"><a href="#HTTP状态码-org-springframework-http-HttpStatus" class="headerlink" title="HTTP状态码(org.springframework.http.HttpStatus)"></a>HTTP状态码(<code>org.springframework.http.HttpStatus</code>)</h2><ul><li>200<ul><li><code>org.springframework.http.HttpStatus#OK</code></li></ul></li><li>304<ul><li><code>org.springframework.http.HttpStatus#NOT_MODIFIED</code></li></ul></li><li>400<ul><li><code>org.springframework.http.HttpStatus#BAD_REQUEST</code></li></ul></li><li>404<ul><li><code>org.springframework.http.HttpStatus#NOT_FOUND</code></li></ul></li><li>500<ul><li><code>org.springframework.http.HttpStatus#INTERNAL_SERVER_ERROR</code></li></ul></li></ul><h2 id="Uniform-interface（统一接口）"><a href="#Uniform-interface（统一接口）" class="headerlink" title="Uniform interface（统一接口）"></a>Uniform interface（统一接口）</h2><h2 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h2><ul><li><p>幂等</p><ul><li>PUT </li></ul><p>初始状态：0</p><p>修改状态：1 * N</p><p>最终状态：1</p><ul><li>DELETE</li></ul><p>初始状态：1</p><p>修改状态：0 * N</p><p>最终状态：0</p></li><li><p>非幂等</p><ul><li>POST</li></ul><p>初始状态：1</p><p>修改状态：1 + 1 =2 </p><p>N次修改： 1+ N = N+1</p><p>最终状态：N+1</p></li></ul><p>幂等/非幂等 依赖于服务端实现，这种方式是一种契约</p><h2 id="自描述消息"><a href="#自描述消息" class="headerlink" title="自描述消息"></a>自描述消息</h2><blockquote><p>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,/;q=0.8</p></blockquote><p>第一优先顺序：text/html -&gt; application/xhtml+xml -&gt; application/xml</p><p>第二优先顺序：image/webp -&gt; image/apng</p><h3 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h3><p>定义一个Person对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建PersonRestController类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span> <span class="comment">// Spring4后加入的注解，原来在@Controller返回json需要@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"persons"</span>) <span class="comment">//配置URL映射</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonRestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Long,Person&gt; repos =  Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;Long,Person&gt;());<span class="comment">// 线程安全的map，用来存储Person对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonRestController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setId(<span class="number">1</span>);</span><br><span class="line">        person.setName(<span class="string">"小马哥"</span>);</span><br><span class="line">        Person person2 = <span class="keyword">new</span> Person();</span><br><span class="line">        person2.setId(<span class="number">2</span>);</span><br><span class="line">        person2.setName(<span class="string">"Gre"</span>);</span><br><span class="line">        repos.put(person.getId(),person);</span><br><span class="line">        repos.put(person2.getId(),person2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createPerson</span><span class="params">(@ModelAttribute Person person)</span></span>&#123;</span><br><span class="line">        repos.put(person.getId(),person);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>,method = RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deletePerson</span><span class="params">(@PathVariable <span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        repos.remove(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>,method = RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updatePerson</span><span class="params">(@PathVariable Long id,@ModelAttribute Person person)</span></span>&#123;</span><br><span class="line">        Person oldPerson = repos.get(id);</span><br><span class="line">        oldPerson.setName(person.getName());</span><br><span class="line">        repos.put(id,oldPerson);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">findPersonById</span><span class="params">(@PathVariable Long id)</span></span>&#123;</span><br><span class="line">        Person person = repos.get(id);</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">findPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Person&gt; persons = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Long, Person&gt; entry:repos.entrySet())&#123;</span><br><span class="line">            persons.add(entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> persons;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootRestApplication</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootRestApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过浏览器访问：<a href="http://localhost:8085/persons/1" target="_blank" rel="noopener">http://localhost:8085/persons/1</a> 得到结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"小马哥"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在pom.xml中引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重启，浏览器访问，结果如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Person</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>小马哥<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Person</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以改变这种返回格式吗？答案是肯定的。我们在请求头中指定Accept属性值即可：</p><p>比如我们想要返回JSON格式，指定属性值为：application/json</p><p>如果想要结果为想xml格式的，则可以指定为：application/xml</p><p>这里有两个问题需要解决：</p><ul><li>问题1：为什么第一次是JSON，后来怎加了 XML 依赖，又变成了 XML 内用输出</li><li>当 Accept 请求头未被制定时，为什么还是 JSON 来处理</li></ul><h3 id="源码学习路径"><a href="#源码学习路径" class="headerlink" title="源码学习路径"></a>源码学习路径</h3><ul><li><code>@EnableWebMvc</code><ul><li><code>DelegatingWebMvcConfiguration</code><ul><li><code>WebMvcConfigurationSupport#addDefaultHttpMessageConverters</code></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds a set of default HttpMessageConverter instances to the given list.</span></span><br><span class="line"><span class="comment"> * Subclasses can call this method from &#123;<span class="doctag">@link</span> #configureMessageConverters(List)&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> messageConverters the list to add the default message converters to</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addDefaultHttpMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters)</span> </span>&#123;</span><br><span class="line">StringHttpMessageConverter stringHttpMessageConverter = <span class="keyword">new</span> StringHttpMessageConverter();</span><br><span class="line">stringHttpMessageConverter.setWriteAcceptCharset(<span class="keyword">false</span>);  <span class="comment">// see SPR-7316</span></span><br><span class="line"></span><br><span class="line">messageConverters.add(<span class="keyword">new</span> ByteArrayHttpMessageConverter());</span><br><span class="line">messageConverters.add(stringHttpMessageConverter);</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> ResourceHttpMessageConverter());</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> ResourceRegionHttpMessageConverter());</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> SourceHttpMessageConverter&lt;&gt;());</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> AllEncompassingFormHttpMessageConverter());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (romePresent) &#123;</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> AtomFeedHttpMessageConverter());</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> RssChannelHttpMessageConverter());</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">//如果jackson2Xml存在，则添加</span></span><br><span class="line"><span class="keyword">if</span> (jackson2XmlPresent) &#123;</span><br><span class="line">Jackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.xml();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.applicationContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">builder.applicationContext(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">&#125;</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> MappingJackson2XmlHttpMessageConverter(builder.build()));</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">//如果jaxb2Present存在，则添加</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (jaxb2Present) &#123;</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> Jaxb2RootElementHttpMessageConverter());</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">//如果jackson2Present存在，则添加</span></span><br><span class="line"><span class="keyword">if</span> (jackson2Present) &#123;</span><br><span class="line">Jackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.json();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.applicationContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">builder.applicationContext(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">&#125;</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> MappingJackson2HttpMessageConverter(builder.build()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (gsonPresent) &#123;</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> GsonHttpMessageConverter());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (jsonbPresent) &#123;</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> JsonbHttpMessageConverter());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (jackson2SmilePresent) &#123;</span><br><span class="line">Jackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.smile();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.applicationContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">builder.applicationContext(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">&#125;</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> MappingJackson2SmileHttpMessageConverter(builder.build()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (jackson2CborPresent) &#123;</span><br><span class="line">Jackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.cbor();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.applicationContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">builder.applicationContext(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">&#125;</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> MappingJackson2CborHttpMessageConverter(builder.build()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到参数<code>messageConverters</code>是一个List集合，List的特点是FIFO，先来先服务，它的添加是有顺序的。</p><p>同时，它所支持的<code>MediaType</code>也会设置进去，比如：xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MappingJackson2XmlHttpMessageConverter</span><span class="params">(ObjectMapper objectMapper)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(objectMapper, <span class="keyword">new</span> MediaType(<span class="string">"application"</span>, <span class="string">"xml"</span>),</span><br><span class="line"><span class="keyword">new</span> MediaType(<span class="string">"text"</span>, <span class="string">"xml"</span>),</span><br><span class="line"><span class="keyword">new</span> MediaType(<span class="string">"application"</span>, <span class="string">"*+xml"</span>));</span><br><span class="line">Assert.isInstanceOf(XmlMapper.class, objectMapper, <span class="string">"XmlMapper required"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MappingJackson2HttpMessageConverter</span><span class="params">(ObjectMapper objectMapper)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(objectMapper, MediaType.APPLICATION_JSON, <span class="keyword">new</span> MediaType(<span class="string">"application"</span>, <span class="string">"*+json"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看看<code>WebMvcConfigurationSupport#addDefaultHttpMessageConverters</code>方法在哪里被使用了，追踪代码，发现在方法<code>WebMvcConfigurationSupport#getMessageConverters</code>中使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; getMessageConverters() &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.messageConverters == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.messageConverters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">configureMessageConverters(<span class="keyword">this</span>.messageConverters);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.messageConverters.isEmpty()) &#123;</span><br><span class="line">addDefaultHttpMessageConverters(<span class="keyword">this</span>.messageConverters);</span><br><span class="line">&#125;</span><br><span class="line">extendMessageConverters(<span class="keyword">this</span>.messageConverters);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.messageConverters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而该方法又在<code>WebMvcConfigurationSupport#requestMappingHandlerAdapter</code>中被调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestMappingHandlerAdapter <span class="title">requestMappingHandlerAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RequestMappingHandlerAdapter adapter = createRequestMappingHandlerAdapter();</span><br><span class="line">        <span class="comment">// 这里涉及到内容调停</span></span><br><span class="line">adapter.setContentNegotiationManager(mvcContentNegotiationManager());</span><br><span class="line">adapter.setMessageConverters(getMessageConverters());</span><br><span class="line">adapter.setWebBindingInitializer(getConfigurableWebBindingInitializer());</span><br><span class="line">adapter.setCustomArgumentResolvers(getArgumentResolvers());</span><br><span class="line">adapter.setCustomReturnValueHandlers(getReturnValueHandlers());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (jackson2Present) &#123;</span><br><span class="line">adapter.setRequestBodyAdvice(Collections.singletonList(<span class="keyword">new</span> JsonViewRequestBodyAdvice()));</span><br><span class="line">adapter.setResponseBodyAdvice(Collections.singletonList(<span class="keyword">new</span> JsonViewResponseBodyAdvice()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AsyncSupportConfigurer configurer = <span class="keyword">new</span> AsyncSupportConfigurer();</span><br><span class="line">configureAsyncSupport(configurer);</span><br><span class="line"><span class="keyword">if</span> (configurer.getTaskExecutor() != <span class="keyword">null</span>) &#123;</span><br><span class="line">adapter.setTaskExecutor(configurer.getTaskExecutor());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (configurer.getTimeout() != <span class="keyword">null</span>) &#123;</span><br><span class="line">adapter.setAsyncRequestTimeout(configurer.getTimeout());</span><br><span class="line">&#125;</span><br><span class="line">adapter.setCallableInterceptors(configurer.getCallableInterceptors());</span><br><span class="line">adapter.setDeferredResultInterceptors(configurer.getDeferredResultInterceptors());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> adapter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内容调停主要是根据请求的参数和Spring Boot的规则去处理<code>MediaType</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ContentNegotiationManager <span class="title">mvcContentNegotiationManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.contentNegotiationManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">ContentNegotiationConfigurer configurer = <span class="keyword">new</span> ContentNegotiationConfigurer(<span class="keyword">this</span>.servletContext);</span><br><span class="line">          <span class="comment">// etDefaultMediaTypes()这个方法是获取MediaType的</span></span><br><span class="line">configurer.mediaTypes(getDefaultMediaTypes());</span><br><span class="line">configureContentNegotiation(configurer);</span><br><span class="line"><span class="keyword">this</span>.contentNegotiationManager = configurer.buildContentNegotiationManager();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.contentNegotiationManager;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 该方法的逻辑为：如果jaxb2Present || jackson2XmlPresent类存在，则MediaType为application/xml</span></span><br><span class="line"><span class="comment">* 如果jackson2Present || gsonPresent || jsonbPresent其中之一，则MediaType为application/json等</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Map&lt;String, MediaType&gt; <span class="title">getDefaultMediaTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, MediaType&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span> (romePresent) &#123;</span><br><span class="line">map.put(<span class="string">"atom"</span>, MediaType.APPLICATION_ATOM_XML);</span><br><span class="line">map.put(<span class="string">"rss"</span>, MediaType.APPLICATION_RSS_XML);</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">// </span></span><br><span class="line"><span class="keyword">if</span> (jaxb2Present || jackson2XmlPresent) &#123;</span><br><span class="line">map.put(<span class="string">"xml"</span>, MediaType.APPLICATION_XML);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (jackson2Present || gsonPresent || jsonbPresent) &#123;</span><br><span class="line">map.put(<span class="string">"json"</span>, MediaType.APPLICATION_JSON);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (jackson2SmilePresent) &#123;</span><br><span class="line">map.put(<span class="string">"smile"</span>, MediaType.valueOf(<span class="string">"application/x-jackson-smile"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (jackson2CborPresent) &#123;</span><br><span class="line">map.put(<span class="string">"cbor"</span>, MediaType.valueOf(<span class="string">"application/cbor"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：为什么第一次是JSON，后来怎加了 XML 依赖，又变成了 XML 内用输出</p><p>回答：Spring Boot 应用默认没有增加XML 处理器（<code>HttpMessageConverter</code>）实现，所以最后采用轮训的方式去逐一尝试是否可以<code>canWrite(POJO)</code>,如果返回 true，说明可以序列化该 POJO 对象，那么 Jackson 2 恰好能处理，那么Jackson 输出了。</p><p>问题：当 Accept 请求头未被制定时，为什么还是 JSON 来处理</p><p>回答：这个依赖于 <code>messageConverters</code>的插入顺序。</p><p>问题：优先级是默认的是吧 可以修改吗</p><p>回答：是可以调整的，通过<code>extendMessageConverters</code>方法调整</p><h3 id="源码总结"><a href="#源码总结" class="headerlink" title="源码总结"></a>源码总结</h3><p>所有的 HTTP 自描述消息处理器均在 <code>messageConverters</code>（类型：<code>HttpMessageConverter</code>)，这个集合会传递到 <code>RequestMappingHandlerAdapter</code>，最终控制写出。</p><p><code>messageConverters</code>，其中包含很多自描述消息类型的处理，比如 JSON、XML、TEXT等等</p><p>以 application/json 为例，Spring Boot 中默认使用 Jackson2 序列化方式，其中媒体类型：application/json，它的处理类 <code>MappingJackson2HttpMessageConverter</code>，提供两类方法：</p><p>读read<em> ：通过 HTTP 请求内容转化成对应的 Bean<br>写write</em>： 通过 Bean 序列化成对应文本内容作为响应内容</p><ul><li><code>MappingJackson2HttpMessageConverter</code><ul><li><code>AbstractJackson2HttpMessageConverter</code><ul><li><code>AbstractGenericHttpMessageConverter</code><ul><li><code>AbstractHttpMessageConverter</code><ul><li><code>HttpMessageConverter</code></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="扩展自描述消息"><a href="#扩展自描述消息" class="headerlink" title="扩展自描述消息"></a>扩展自描述消息</h3><p>Properties 格式（application/properties+person)</p><p>（需要扩展）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person.id = 1</span><br><span class="line">person.name = 小马哥</span><br></pre></td></tr></table></figure><p>实现 <code>AbstractHttpMessageConverter</code>抽象类</p><p>supports 方法：是否支持当前POJO类型<br>readInternal 方法：读取 HTTP 请求中的内容，并且转化成相应的POJO对象（通过 Properties 内容转化成 JSON）<br>writeInternal 方法：将 POJO 的内容序列化成文本内容（Properties格式），最终输出到 HTTP 响应中（通过 JSON 内容转化成 Properties ）</p><p><code>@RequestMappng</code> 中的 consumes 对应 请求头 “Content-Type”<br><code>@RequestMappng</code> 中的 produces   对应 请求头 “Accept”</p><p><code>HttpMessageConverter</code>执行逻辑：</p><p>读操作：尝试是否能读取，canRead 方法去尝试，如果返回 true 下一步执行 read</p><p>写操作：尝试是否能写入，canWrite 方法去尝试，如果返回 true 下一步执行 write</p><p>REST相关学习资料：</p><blockquote><p><a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">维基百科</a></p><p>fielding_dissertation博士论文第五章（Roy Thomas Fielding博士论文REST(中文版)）</p></blockquote><h1 id="REST服务端实战"><a href="#REST服务端实战" class="headerlink" title="REST服务端实战"></a>REST服务端实战</h1><h1 id="REST客户端实战"><a href="#REST客户端实战" class="headerlink" title="REST客户端实战"></a>REST客户端实战</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;REST理论基础&quot;&gt;&lt;a href=&quot;#REST理论基础&quot; class=&quot;headerlink&quot; title=&quot;REST理论基础&quot;&gt;&lt;/a&gt;REST理论基础&lt;/h1&gt;&lt;p&gt;RPC(Remote Producer Call)：是指远程过程调用&lt;/p&gt;
&lt;ul&gt;
&lt;l
      
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>spring boot之JDBC</title>
    <link href="https://grezhang.github.io/2018/07/20/spring-boot/05spring%20boot%E4%B9%8BJDBC/"/>
    <id>https://grezhang.github.io/2018/07/20/spring-boot/05spring boot之JDBC/</id>
    <published>2018-07-20T04:12:56.000Z</published>
    <updated>2018-08-16T13:13:49.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="REST理论基础"><a href="#REST理论基础" class="headerlink" title="REST理论基础"></a>REST理论基础</h1><p>RPC(Remote Producer Call)：是指远程过程调用</p><ul><li>语言相关 <ul><li>Java RMI</li><li>.net -COM+</li></ul></li><li>语言无关<ul><li>SOA<ul><li>WebService<ul><li>SOAP</li><li>HTTP、SMTP</li></ul></li></ul></li><li>微服务（MSA）<ul><li>REST<ul><li>HTML、JSON、XML等</li><li>HTTP协议<ul><li>Http1.1<ul><li>短连接</li><li>Keep-Live</li><li>连接池</li></ul></li><li>Http2.0<ul><li>长连接</li></ul></li></ul></li><li>技术<ul><li>Spring客户端：RestTemplate</li><li>Spring web MVC：@RestController==<code>@Controller</code>+<code>@ResponseBody</code>+<code>@RequestBody</code></li><li>Spring Cloud : <code>RestTemplate</code>扩展 + <code>@LoadBalanced</code></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="Cacheability（可缓存性）"><a href="#Cacheability（可缓存性）" class="headerlink" title="Cacheability（可缓存性）"></a>Cacheability（可缓存性）</h2><p>这个与rest没有必然的关系，我们在学习rest的时候不会将这个放置进去。</p><h2 id="HTTP状态码-org-springframework-http-HttpStatus"><a href="#HTTP状态码-org-springframework-http-HttpStatus" class="headerlink" title="HTTP状态码(org.springframework.http.HttpStatus)"></a>HTTP状态码(<code>org.springframework.http.HttpStatus</code>)</h2><ul><li>200<ul><li><code>org.springframework.http.HttpStatus#OK</code></li></ul></li><li>304<ul><li><code>org.springframework.http.HttpStatus#NOT_MODIFIED</code></li></ul></li><li>400<ul><li><code>org.springframework.http.HttpStatus#BAD_REQUEST</code></li></ul></li><li>404<ul><li><code>org.springframework.http.HttpStatus#NOT_FOUND</code></li></ul></li><li>500<ul><li>org.springframework.http.HttpStatus#INTERNAL_SERVER_ERROR</li></ul></li></ul><h2 id="Uniform-interface（统一接口）"><a href="#Uniform-interface（统一接口）" class="headerlink" title="Uniform interface（统一接口）"></a>Uniform interface（统一接口）</h2><h2 id="自描述消息"><a href="#自描述消息" class="headerlink" title="自描述消息"></a>自描述消息</h2><p>REST相关学习资料：</p><p><a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">维基百科</a></p><p>fielding_dissertation博士论文第五章（Roy Thomas Fielding博士论文REST(中文版)）</p><h1 id="REST服务端实战"><a href="#REST服务端实战" class="headerlink" title="REST服务端实战"></a>REST服务端实战</h1><h1 id="REST客户端实战"><a href="#REST客户端实战" class="headerlink" title="REST客户端实战"></a>REST客户端实战</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;REST理论基础&quot;&gt;&lt;a href=&quot;#REST理论基础&quot; class=&quot;headerlink&quot; title=&quot;REST理论基础&quot;&gt;&lt;/a&gt;REST理论基础&lt;/h1&gt;&lt;p&gt;RPC(Remote Producer Call)：是指远程过程调用&lt;/p&gt;
&lt;ul&gt;
&lt;l
      
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot之Spring MVC视图技术</title>
    <link href="https://grezhang.github.io/2018/07/14/spring-boot/03spring%20boot%E4%B9%8BSpring%20MVC%E8%A7%86%E5%9B%BE%E6%8A%80%E6%9C%AF/"/>
    <id>https://grezhang.github.io/2018/07/14/spring-boot/03spring boot之Spring MVC视图技术/</id>
    <published>2018-07-14T04:12:56.000Z</published>
    <updated>2018-08-14T14:16:28.885Z</updated>
    
    <content type="html"><![CDATA[<p>IOC/DI我们说得很多，其实我们最应该关注的本质是生命周期。</p><h1 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h1><p>实例化 -&gt; Bean Class -&gt; Bean Object</p><p>初始化前 -&gt; Bean before/pre init()</p><ul><li><code>org.springframework.beans.factory.config.BeanPostProcessor#postProcessBeforeInitialization</code></li></ul><p>初始化 -&gt; init()</p><ul><li><code>org.springframework.beans.factory.InitializingBean#afterPropertiesSet()</code></li></ul><p>初始化后</p><ul><li><code>org.springframework.beans.factory.config.BeanPostProcessor#postProcessAfterInitialization()</code></li></ul><p>销毁</p><ul><li><code>org.springframework.beans.factory.DisposableBean#destroy()</code></li></ul><h1 id="Velocity视图技术"><a href="#Velocity视图技术" class="headerlink" title="Velocity视图技术"></a>Velocity视图技术</h1><p>常用的视图技术有</p><ul><li>JSP</li><li>Velocity</li><li>Thymeleaf</li><li>Freemark</li></ul><p>这些技术都会有</p><ul><li>逻辑处理 if else</li><li>迭代处理 for each</li><li>赋值  &lt;c:set / &lt;div th:with=”${}”   # set($var =”abc”)</li></ul><h2 id="Velocity与JSP对比"><a href="#Velocity与JSP对比" class="headerlink" title="Velocity与JSP对比"></a>Velocity与JSP对比</h2><p>与JSP相比较，Velocity完全避免了在页面中写java代码，从而破坏整个项目的分层结构。</p><ol><li>JSP视图解析器：</li></ol><ul><li><code>InternalResourceViewResolver</code><ul><li><code>UrlBasedViewResolver</code><ul><li><code>AbstractCachingViewResolver</code><ul><li><code>ViewResolver</code></li></ul></li></ul></li></ul></li></ul><p>JSP的类图如下：</p><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/spring-boot/JSP%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8%E7%B1%BB%E5%9B%BE.jpg" alt="JSP视图解析器类图"></p><p>JSP视图处理流程：</p><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/spring-boot/JSP%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.jpg" alt="JSP渲染流程"></p><ol start="2"><li>Velocity视图解析器：</li></ol><ul><li><p><code>VelocityViewResolver</code></p><ul><li><code>AbstractTemplateViewResolver</code><ul><li><code>UrlBasedViewResolver</code><ul><li><code>AbstractCachingViewResolver</code><ul><li><code>ViewResolver</code></li></ul></li></ul></li></ul></li></ul><p>视图解析器类图如下：</p></li></ul><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/spring-boot/Velocity%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8%E7%B1%BB%E5%9B%BE.jpg" alt="Velocity视图解析器类图"></p><h2 id="Velocity"><a href="#Velocity" class="headerlink" title="Velocity"></a>Velocity</h2><p>Velocity可以和Web应用、非Web应用集成</p><ul><li>Web</li><li>Non Web</li><li>Template（.mv）-&gt;Writer-&gt;Content(String)</li></ul><p>从Spring Boot1.5开始将会删除Velocity，1.7 2010年就没有更新，直到2017年才更新一版2.0。</p><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>详见：<a href="">github</a></p><h1 id="Thymeleaf视图技术"><a href="#Thymeleaf视图技术" class="headerlink" title="Thymeleaf视图技术"></a>Thymeleaf视图技术</h1><p>Spring Boot实施推广过程当中，除了使用Annotation方式重构之外，在前端渲染引擎方面，也推出了Thymeleaf、Velocity、FreeMark等。Thymeleaf的一些优缺点个人理解如下：</p><ul><li><p>该模板引擎是Spring Boot官方推荐使用的，优点如下：</p><ul><li><p>HTML结构化、UI友好、表达式功能强大</p><p>Thymeleaf设计的初衷就是针对UI友好，让开发人员在编写模板页面时，遵循标准的HTML语法。</p></li><li><p>表达功能强大</p><p>不但兼容标准OGNL表达式，而且也支持Spring表达。</p></li></ul></li><li><p>缺点：</p><ul><li>编写略微繁琐，扩展复杂</li><li>性能一般</li></ul></li></ul><h2 id="渲染上下文模型-Model"><a href="#渲染上下文模型-Model" class="headerlink" title="渲染上下文模型 Model"></a>渲染上下文模型 Model</h2><ul><li>Spring web MVC<ul><li>接口类型</li><li>Model</li><li>ModelMap</li><li>ModelAndView<ul><li>Model-&gt;ModelMap</li><li>View </li></ul></li></ul></li><li>注解类型<ul><li><code>@ModelAttribute</code></li></ul></li></ul><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><ul><li>字符值</li><li>多种数据类型<ul><li>数字：0,12,35..</li><li>Boolean: true,false</li><li>空：null</li><li>文字标记：one, sometext, main,…</li></ul></li><li>逻辑表达式<ul><li>if else</li></ul></li><li>迭代表达式<ul><li>for each / while</li></ul></li><li>反射<ul><li>Java Reflection</li><li>CGLib</li></ul></li></ul><h2 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h2><p>这里只告诉怎么去学习这个配置文件，不会详细的介绍每一个属性的含义，具体请参考<a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#howto-reload-thymeleaf-content" target="_blank" rel="noopener">官网</a></p><p>像这种模板引擎的相关配置，我们怎么去学习？</p><ul><li><p>第一步：搜索 <code>ThymeleafProperties</code>类，找到<code>@ConfigurationProperties</code>确认前缀</p></li><li><p>第二不：是否是字段和属性名一一对应，一般都是前缀spring.thymeleaf+属性名</p><p>官网：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring.thymeleaf.cache=true</span><br><span class="line">spring.thymeleaf.check-template=true</span><br><span class="line">spring.thymeleaf.encoding=UTF-8</span><br><span class="line">spring.thymeleaf.check-template-location=true</span><br><span class="line">spring.thymeleaf.enabled=true</span><br><span class="line">spring.thymeleaf.mode=HTML</span><br><span class="line">spring.thymeleaf.prefix=classpath:/templates/</span><br><span class="line">spring.thymeleaf.suffix=.html</span><br><span class="line">spring.thymeleaf.view-names=</span><br></pre></td></tr></table></figure><p>ThymeleafProperties类部分属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.thymeleaf"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = StandardCharsets.UTF_8;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>; </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplate = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplateLocation = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">private</span> String prefix = DEFAULT_PREFIX;</span><br><span class="line">  <span class="keyword">private</span> String suffix = DEFAULT_SUFFIX;</span><br><span class="line">  <span class="keyword">private</span> String mode = <span class="string">"HTML"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> cache = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">private</span> String[] viewNames;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="模板寻址"><a href="#模板寻址" class="headerlink" title="模板寻址"></a>模板寻址</h2><p>prefix + “viewName” + suffix</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">classpath:/templates/thymeleaf/index.dota2</span><br><span class="line">view.setUrl(getPrefix() + viewName + getSuffix())</span><br></pre></td></tr></table></figure><h2 id="模板缓存"><a href="#模板缓存" class="headerlink" title="模板缓存"></a>模板缓存</h2><p>默认 Cache = true </p><p>Cache = false -&gt; 设置缓存时间</p><h1 id="Spring-MVC模板渲染逻辑"><a href="#Spring-MVC模板渲染逻辑" class="headerlink" title="Spring MVC模板渲染逻辑"></a>Spring MVC模板渲染逻辑</h1><p>Spring MVC 核心总控制器 <code>DispatcherServlet</code></p><ul><li><p>C:</p><ul><li><code>DispatcherServlet</code></li></ul></li><li><p>M:</p><ul><li><p>Spring MVC 部分</p></li><li><p>Model/ModelMap/ModelAndView(Model部分)</p></li><li><p><code>@ModelAttribute</code></p></li><li><p>模板引擎（通常）</p></li><li><p>通用的方式</p><ul><li>模板上下文</li><li>內建/内嵌自己的工具变量</li></ul></li><li><p>JSP 内置（ built-in ）九大变量</p><ul><li>Servlet Scope 上下文（Spring<code>@Scope</code>）</li><li>PageContext（page 变量）<ul><li>关注当前页面</li><li>A forward B</li><li>A 变量只能 A 页面使用，不能共享给 B</li><li>A t 和 B t 可以采用同名变量，同时使用</li></ul></li><li>Servlet Request（请求上下文） -<code>WebApplicationContext#SCOPE_REQUEST</code><ul><li>关注当前请求</li><li>A forward B<ul><li>A 请求变量可以用于 B 页面</li></ul></li></ul></li></ul><p>​</p><ul><li>Servlet Session（会话上下文） - <code>WebApplicationContext#SCOPE_SESSION</code><ul><li>关注当前会话</li><li>A forward / redirect B<ul><li>A 请求变量可以用于 B 页面</li></ul></li></ul></li></ul><p>​</p><ul><li>Servlet ServletContext（应用上下文） - <code>WebApplicationContext#SCOPE_APPLICATION</code><ul><li>关注当前应用</li><li>用户 A 和 用户 B 会话可以共享</li></ul></li><li>JSP 内置变量( JSP = Servlet )</li><li>out（Writer = ServletResponse#getWriter()）</li><li>exception ( Throwable)</li><li>config( ServletConfig )</li><li>page ( Jsp Servlet 对象)</li><li>response（ServletResponse)</li></ul></li><li><p>thymeleaf变量</p><p><code>StandardExpressionObjectFactory</code> -&gt; 构建 <code>IExpressionContext</code></p></li></ul></li><li><p>V: </p><ul><li><p>视图对象</p></li><li><p>Servlet</p><ul><li><code>RequestDispatcher#forward</code></li><li><code>RequestDispatcher#include</code></li><li><code>HttpServletResponse#sendRedirect</code></li></ul></li><li><p>Spring MVC </p><ul><li><code>View</code></li><li>forward:<ul><li><code>InternalResourceView</code></li></ul></li><li>redirect:<ul><li><code>RedirectView</code></li></ul></li></ul></li><li><p>Struts </p><ul><li><code>Action</code></li><li><code>ForwardAction</code></li><li><code>RedirectAction</code></li></ul></li><li><p>视图处理对象</p></li><li><p>Spring MVC</p><ul><li><p>*.do-&gt; <code>DispatcherServlet</code>-&gt;<code>Controller</code>-&gt;View-&gt;<code>ViewResolver</code>-&gt;<code>View#render</code>-&gt;<code>HTML</code>-&gt;<code>HttpServletResponse</code></p></li><li><p>Thymeleaf </p><ul><li><p><code>ViewResolver</code>-&gt; <code>ThymeleafViewResolver</code></p></li><li><p><code>View</code>-&gt; <code>ThymeleafView</code></p></li><li><p>通过模板名称解析模板资源（<code>ClassPathResource</code>）</p><ul><li><code>TemplateResolution</code></li></ul></li><li><p>读取资源，并且渲染内容 HTML</p><ul><li><code>IEngineContext</code></li><li><code>ProcessorTemplateHandler</code></li></ul></li><li><p>HTML 内容输出到 Response</p></li><li><p>源码路径</p><p><code>org.thymeleaf.TemplateEngine#process(org.thymeleaf.TemplateSpec, org.thymeleaf.context.IContext, java.io.Writer)</code><br><code>org.thymeleaf.engine.TemplateManager#parseAndProc</code></p></li></ul></li><li><p>JSP</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>ViewResolver -&gt;InternalResourceViewResolver</p></li><li><p>View -&gt; JstlView</p><ul><li>Foward -&gt; RequestDispatcher</li></ul></li></ul></li><li><p>Struts</p><p>*.do -&gt; <code>ActionServlet</code>-&gt; <code>Action</code> -&gt; <code>ForwardAction</code>-&gt; <code>RequestDispatcher</code>-&gt; JSP（<code>Servlet</code>） -&gt; HTML -&gt; <code>HttpServletResponse</code></p></li></ul></li></ul><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/spring-boot/%E8%A7%86%E5%9B%BE%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.jpg" alt="视图渲染流程"></p><h1 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h1><h1 id="模板引擎核心组件"><a href="#模板引擎核心组件" class="headerlink" title="模板引擎核心组件"></a>模板引擎核心组件</h1><p>资源管理</p><p>模板封装</p><p>模板解析</p><p>国际化</p><p>渲染上下文</p><p>表达式引擎</p><p>渲染引擎</p><p>这些组件可以查阅相关资料，这里不再累述。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IOC/DI我们说得很多，其实我们最应该关注的本质是生命周期。&lt;/p&gt;
&lt;h1 id=&quot;Bean的生命周期&quot;&gt;&lt;a href=&quot;#Bean的生命周期&quot; class=&quot;headerlink&quot; title=&quot;Bean的生命周期&quot;&gt;&lt;/a&gt;Bean的生命周期&lt;/h1&gt;&lt;p&gt;实例化
      
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot之Application</title>
    <link href="https://grezhang.github.io/2018/07/08/spring-boot/02spring%20boot%E4%B9%8BApplication/"/>
    <id>https://grezhang.github.io/2018/07/08/spring-boot/02spring boot之Application/</id>
    <published>2018-07-08T04:12:56.000Z</published>
    <updated>2018-08-09T12:38:32.191Z</updated>
    
    <content type="html"><![CDATA[<p>本章主要学习自定义 SpringApplication、Spring注解编程模型、Spring Boot事件。</p><h1 id="一、自定义-SpringApplication"><a href="#一、自定义-SpringApplication" class="headerlink" title="一、自定义 SpringApplication"></a>一、自定义 SpringApplication</h1><h2 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a><code>SpringApplication</code></h2><p><code>SpringApplication</code>是Spring Boot驱动Spring应用上下文的引导类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@ComponentScan</code>它是哪个版本开始时引入的？是 Spring Framework3.1,在Spring中扫描<code>basePackages</code> 指定的包或者 XML中 <a href="context:component-scan" target="_blank" rel="noopener">context:component-scan</a>元素</p><p><code>@EnableAutoConfiguration</code>: 激活自动装配 <code>@Enable</code> -&gt; <code>@Enable</code> 开头的</p><ul><li><code>@EnableWebMvc</code></li><li><code>@EnableTransactionManagement</code></li><li><code>@EnableAspectJAutoProxy</code></li><li><code>@EnableAsync</code></li></ul><p><code>@SpringBootConfiguration</code>等价于<code>@Configuration</code> -&gt; <code>Configuration Class</code> 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Component-注解的派生性"><a href="#Component-注解的派生性" class="headerlink" title="@Component 注解的派生性"></a><code>@Component</code> 注解的派生性</h2><p>在Java中，由于注解没有继承性，所以这里通过元注解标注出来的我们把它叫做派生性。</p><p>一般来说这类注解通常成对出现，比如：</p><p><code>@Component</code>-&gt;<code>@ComponentScan</code></p><p>为什么被<code>@Component</code>及其派生类就能够被扫描到IOC容器当中呢？</p><p>处理类 -&gt; <code>ConfigurationClassParser</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;BeanDefinitionHolder&gt; <span class="title">parse</span><span class="params">(AnnotationAttributes componentScan, <span class="keyword">final</span> String declaringClass)</span> </span>&#123;</span><br><span class="line">ClassPathBeanDefinitionScanner scanner = <span class="keyword">new</span> ClassPathBeanDefinitionScanner(<span class="keyword">this</span>.registry,</span><br><span class="line">componentScan.getBoolean(<span class="string">"useDefaultFilters"</span>), <span class="keyword">this</span>.environment, <span class="keyword">this</span>.resourceLoader);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扫描类<code>ClassPathBeanDefinitionScanner</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassPathBeanDefinitionScanner</span> <span class="keyword">extends</span> <span class="title">ClassPathScanningCandidateComponentProvider</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它有一个父类<code>ClassPathScanningCandidateComponentProvider</code>,看构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a ClassPathScanningCandidateComponentProvider with the given &#123;<span class="doctag">@link</span> Environment&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> useDefaultFilters whether to register the default filters for the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;, &#123;<span class="doctag">@link</span> Repository <span class="doctag">@Repository</span>&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Service <span class="doctag">@Service</span>&#125;, and &#123;<span class="doctag">@link</span> Controller <span class="doctag">@Controller</span>&#125;</span></span><br><span class="line"><span class="comment"> * stereotype annotations</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> environment the Environment to use</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #registerDefaultFilters()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathScanningCandidateComponentProvider</span><span class="params">(<span class="keyword">boolean</span> useDefaultFilters, Environment environment)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (useDefaultFilters) &#123;</span><br><span class="line">registerDefaultFilters();</span><br><span class="line">&#125;</span><br><span class="line">setEnvironment(environment);</span><br><span class="line">setResourceLoader(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register the default filter for &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This will implicitly register all annotations that have the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125; meta-annotation including the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Repository <span class="doctag">@Repository</span>&#125;, &#123;<span class="doctag">@link</span> Service <span class="doctag">@Service</span>&#125;, and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> Controller <span class="doctag">@Controller</span>&#125; stereotype annotations.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Also supports Java EE 6's &#123;<span class="doctag">@link</span> javax.annotation.ManagedBean&#125; and</span></span><br><span class="line"><span class="comment"> * JSR-330's &#123;<span class="doctag">@link</span> javax.inject.Named&#125; annotations, if available.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerDefaultFilters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 关键之处，这就是为什么只扫描Component</span></span><br><span class="line"><span class="keyword">this</span>.includeFilters.add(<span class="keyword">new</span> AnnotationTypeFilter(Component.class));</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这里可以知道，如果使用useDefaultFilters，这个类会将<code>@Component</code> 注解及其派生类<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code>、<code>@Configuration</code> 等扫描解析到Spring IOC。其大致流程如下：</p><p><code>@ComponentScan</code> -&gt; <code>@Confiugration</code> Class -&gt;  basePackages -&gt; <code>@Component Beans</code> -&gt;</p><p><code>BeanDefinition</code>-&gt;<code>BeanDefinitionRegistry</code> -&gt;<code>Beans</code> -&gt; <code>BeanFactory</code> -&gt; <code>getBean</code> or <code>@Autowired</code></p><p>IoC/DI -&gt;</p><ul><li><p><code>@Component</code> </p><ul><li><p><code>@Service</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@Repository</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Repository &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@Controller</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@Configuration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Configuration &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>我们可以看到<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code>、<code>@Configuration</code> 都是有<code>@Component</code> 注解标注，可以这样理解，这些注解都是由<code>@Component</code>派生来，具体请查看Spring注解编程模型。</p><p>那么按照这个理解：</p><ul><li><code>@SpringBootApplication</code> 标注当前一些功能</li><li><ul><li><code>@SpringBootApplication</code></li><li><ul><li><code>@SpringBootConfiguration</code></li><li><ul><li><code>@Configuration</code></li><li><ul><li><code>@Component</code></li></ul></li></ul></li></ul></li></ul></li></ul><p>验证：</p><h2 id="Spring-Boot-引导示例"><a href="#Spring-Boot-引导示例" class="headerlink" title="Spring Boot 引导示例"></a>Spring Boot 引导示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroservicesProjectApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 启动Spring boot方式一</span></span><br><span class="line">        <span class="comment">//SpringApplication.run(MicroservicesProjectApplication.class,args);</span></span><br><span class="line">        SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(MicroservicesProjectApplication.class);</span><br><span class="line">        Map&lt;String, Object&gt; properties = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        properties.put(<span class="string">"server.port"</span>,<span class="number">0</span>);</span><br><span class="line">        springApplication.setDefaultProperties(properties);</span><br><span class="line">        ConfigurableApplicationContext context = springApplication.run(args);</span><br><span class="line">        <span class="comment">// 这里可以正常输出，不会报异常</span></span><br><span class="line">        System.out.println(context.getBean(MicroservicesProjectApplication.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调整示例为非web程序"><a href="#调整示例为非web程序" class="headerlink" title="调整示例为非web程序"></a>调整示例为非web程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroservicesProjectApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 启动Spring boot方式一</span></span><br><span class="line">        <span class="comment">//SpringApplication.run(MicroservicesProjectApplication.class,args);</span></span><br><span class="line">        SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(MicroservicesProjectApplication.class);</span><br><span class="line">        Map&lt;String, Object&gt; properties = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        properties.put(<span class="string">"server.port"</span>,<span class="number">0</span>);</span><br><span class="line">        springApplication.setDefaultProperties(properties);</span><br><span class="line">        <span class="comment">// 设置为非web应用</span></span><br><span class="line">        springApplication.setWebApplicationType(WebApplicationType.NONE);</span><br><span class="line">        ConfigurableApplicationContext context = springApplication.run(args);</span><br><span class="line">        System.out.println(context.getBean(MicroservicesProjectApplication.class));</span><br><span class="line">        <span class="comment">// 输出当前spring boot 应用的ApplicationContext的类名</span></span><br><span class="line">        System.err.println(<span class="string">"当前Spring应用上下文:"</span>+context.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：我们可以看到当调整为非Web程序时，它的ApplicationContext为注解驱动上下文，Tomcat也没有启动了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前Spring应用上下文:org.springframework.context.annotation.AnnotationConfigApplicationContext</span><br></pre></td></tr></table></figure><p>我们再来看下一个例子：</p><h2 id="Spring注解驱动示例"><a href="#Spring注解驱动示例" class="headerlink" title="Spring注解驱动示例"></a>Spring注解驱动示例</h2><p>注解驱动上下文，<code>AnnotationConfigApplicationContext</code> Spring Framework 3.0开始引入的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringAnnotationDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//   XML 配置文件驱动       ClassPathXmlApplicationContext</span></span><br><span class="line">        <span class="comment">// Annotation 驱动</span></span><br><span class="line">        <span class="comment">// 找 BeanDefinition</span></span><br><span class="line">        <span class="comment">// @Bean @Configuration</span></span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">        <span class="comment">// 注册一个 @configuration class = SpringAnnotationDemo</span></span><br><span class="line">        context.register(SpringAnnotationDemo.class);</span><br><span class="line">        <span class="comment">// 上下文启动</span></span><br><span class="line">        context.refresh();</span><br><span class="line">        System.out.println(context.getBean(SpringAnnotationDemo.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringApplication类型推断"><a href="#SpringApplication类型推断" class="headerlink" title="SpringApplication类型推断"></a>SpringApplication类型推断</h2><p>通过上面的例子，看看SpringApplication的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">        <span class="comment">// 类型设置</span></span><br><span class="line"><span class="keyword">this</span>.webApplicationType = deduceWebApplicationType();</span><br><span class="line">setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">ApplicationContextInitializer.class));</span><br><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line"><span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> WebApplicationType <span class="title">deduceWebApplicationType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ClassUtils.isPresent(REACTIVE_WEB_ENVIRONMENT_CLASS, <span class="keyword">null</span>)</span><br><span class="line">&amp;&amp; !ClassUtils.isPresent(MVC_WEB_ENVIRONMENT_CLASS, <span class="keyword">null</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> WebApplicationType.REACTIVE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (String className : WEB_ENVIRONMENT_CLASSES) &#123;</span><br><span class="line"><span class="keyword">if</span> (!ClassUtils.isPresent(className, <span class="keyword">null</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> WebApplicationType.NONE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> WebApplicationType.SERVLET;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在这个方法中使用</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableApplicationContext <span class="title">createApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt; contextClass = <span class="keyword">this</span>.applicationContextClass;</span><br><span class="line"><span class="keyword">if</span> (contextClass == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="keyword">this</span>.webApplicationType) &#123;</span><br><span class="line"><span class="keyword">case</span> SERVLET:</span><br><span class="line">                    <span class="comment">//org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext</span></span><br><span class="line">contextClass = Class.forName(DEFAULT_WEB_CONTEXT_CLASS);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> REACTIVE:</span><br><span class="line">                    <span class="comment">//org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext</span></span><br><span class="line">contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">                    <span class="comment">// org.springframework.context.annotation.AnnotationConfigApplicationContext</span></span><br><span class="line">contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="string">"Unable create a default ApplicationContext, "</span></span><br><span class="line">+ <span class="string">"please specify an ApplicationContextClass"</span>,</span><br><span class="line">ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当不加以设置 Web 类型，那么它采用推断：</p><p>-&gt;<code>SpringAppliation()</code> -&gt; <code>deduceWebApplicationType()</code> 第一次推断为 <code>WebApplicationType.SERVLET</code></p><ul><li><code>WebApplicationType.NONE</code> : 非 Web 类型 <ul><li><code>Servlet</code>不存在</li><li><code>Spring Web</code> 应用上下文 <code>ConfigurableWebApplicationContext</code>  不存在</li><li><code>spring-boot-starter-web</code> 不存在</li><li><code>spring-boot-starter-webflux</code> 不存在</li></ul></li><li><ul><li><code>WebApplicationType.REACTIVE</code>: <code>Spring WebFlux</code></li><li><code>DispatcherHandler</code></li><li><code>spring-boot-starter-webflux</code>存在</li><li><code>Servlet</code> 不存在</li><li><code>spring-boot-starter-web</code> 不存在</li></ul></li><li><code>WebApplicationType.SERVLET</code> : <code>Spring MVC</code><ul><li><code>spring-boot-starter-web</code> 存在</li></ul></li></ul><h2 id="人工干预web类型"><a href="#人工干预web类型" class="headerlink" title="人工干预web类型"></a>人工干预web类型</h2><p>设置 <code>webApplicationType</code> 属性 为<code>WebApplicationType.NONE</code></p><h1 id="二、Spring注解编程模型"><a href="#二、Spring注解编程模型" class="headerlink" title="二、Spring注解编程模型"></a>二、Spring注解编程模型</h1><p>资料在<a href="https://github.com/spring-projects/spring-framework/wiki/Spring-Annotation-Programming-Model" target="_blank" rel="noopener">Spring注解编程模型</a>中，请自行阅读。目前这一块理解得不够透彻，暂时不写了，后续会继续完善。</p><h1 id="三、Spring-Boot事件"><a href="#三、Spring-Boot事件" class="headerlink" title="三、Spring Boot事件"></a>三、Spring Boot事件</h1><h2 id="Spring事件"><a href="#Spring事件" class="headerlink" title="Spring事件"></a>Spring事件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringEventListenerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GenericApplicationContext context = <span class="keyword">new</span> GenericApplicationContext();</span><br><span class="line">        context.addApplicationListener(<span class="keyword">new</span> ApplicationListener&lt;ApplicationEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">                System.err.println(<span class="string">"监听:"</span>+event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 启动Spring上下文</span></span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="comment">// 一个ContextRefreshedEvent</span></span><br><span class="line">        <span class="comment">// 一个PayloadApplicationEvent</span></span><br><span class="line">        <span class="comment">// Spring 应用上下文发布事件</span></span><br><span class="line">        context.publishEvent(<span class="string">"Hello,World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">监听:ContextRefreshedEvent[source=org.springframework.context.support.GenericApplicationContext@5f71c76a: </span><br><span class="line">...</span><br><span class="line">监听:org.springframework.context.PayloadApplicationEvent[source=org.springframework.context.support.GenericApplicationContext@5f71c76a:</span><br></pre></td></tr></table></figure><p>自定义一个事件示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringEventListenerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GenericApplicationContext context = <span class="keyword">new</span> GenericApplicationContext();</span><br><span class="line">        context.addApplicationListener(<span class="keyword">new</span> ApplicationListener&lt;ApplicationEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">                System.err.println(<span class="string">"监听:"</span>+event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 启动Spring上下文</span></span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="comment">// 一个ContextRefreshedEvent</span></span><br><span class="line">        <span class="comment">// 一个PayloadApplicationEvent</span></span><br><span class="line">        <span class="comment">// Spring 应用上下文发布事件</span></span><br><span class="line">        context.publishEvent(<span class="string">"Hello,World!"</span>);</span><br><span class="line">        <span class="comment">// 发布自定义事件</span></span><br><span class="line">        context.publishEvent(<span class="keyword">new</span> MyEvent(<span class="string">"HelloWorld2018"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义事件类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">监听:org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.context.support.GenericApplicationContext@5f71c76a: startup date [Wed Aug 08 21:54:51 CST 2018]; root of context hierarchy]</span><br><span class="line">Disconnected from the target VM, address: &apos;127.0.0.1:57170&apos;, transport: &apos;socket&apos;</span><br><span class="line">监听:org.springframework.context.PayloadApplicationEvent[source=org.springframework.context.support.GenericApplicationContext@5f71c76a: startup date [Wed Aug 08 21:54:51 CST 2018]; root of context hierarchy]</span><br><span class="line">监听:com.gre.world.spring.SpringEventListenerDemo$MyEvent[source=HelloWorld2018]</span><br></pre></td></tr></table></figure><p>添加Spring上下文关闭事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringEventListenerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GenericApplicationContext context = <span class="keyword">new</span> GenericApplicationContext();</span><br><span class="line">        context.addApplicationListener(<span class="keyword">new</span> ApplicationListener&lt;ApplicationEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">                System.err.println(<span class="string">"监听:"</span>+event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 启动Spring上下文</span></span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="comment">// 一个ContextRefreshedEvent</span></span><br><span class="line">        <span class="comment">// 一个PayloadApplicationEvent</span></span><br><span class="line">        <span class="comment">// Spring 应用上下文发布事件</span></span><br><span class="line">        context.publishEvent(<span class="string">"Hello,World!"</span>);</span><br><span class="line">        <span class="comment">// 发布自定义事件</span></span><br><span class="line">        context.publishEvent(<span class="keyword">new</span> MyEvent(<span class="string">"HelloWorld2018"</span>));</span><br><span class="line">        <span class="comment">// 关闭应用上下文</span></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义事件类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后会有四个事件</p><p>通过上面这些例子，我们可以看到，Spring会监听你自定义的事件、发布的事件以及Spring本身的上下文动作处理事件。那么如果我们只想监听Spring上下文关闭事件怎么做?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringEventListenerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GenericApplicationContext context = <span class="keyword">new</span> GenericApplicationContext();</span><br><span class="line">        <span class="comment">// 添加自定义监听器</span></span><br><span class="line">        context.addApplicationListener(<span class="keyword">new</span> ClosedListener());</span><br><span class="line">        context.addApplicationListener(<span class="keyword">new</span> RefreshedListener());</span><br><span class="line">        <span class="comment">// 启动Spring上下文</span></span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="comment">// 一个ContextRefreshedEvent</span></span><br><span class="line">        <span class="comment">// 一个PayloadApplicationEvent</span></span><br><span class="line">        <span class="comment">// Spring 应用上下文发布事件</span></span><br><span class="line">        context.publishEvent(<span class="string">"Hello,World!"</span>);</span><br><span class="line">        <span class="comment">// 发布自定义事件</span></span><br><span class="line">        context.publishEvent(<span class="keyword">new</span> MyEvent(<span class="string">"HelloWorld2018"</span>));</span><br><span class="line">        <span class="comment">// 关闭应用上下文</span></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RefreshedListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ContextRefreshedEvent</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"上下文启动："</span> + event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ClosedListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ContextClosedEvent</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextClosedEvent event)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"关闭上下文："</span> + event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义事件类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后，我们发现只监听到两个事件，一个ClosedListener和一个RefreshedListener。</p><p>也就是说，当我们不指定某种类型的监听事件的时候，它是会监听到所有的事件，当指定类型时，它只会监听指定的事件类型。</p><h3 id="Spring-内部发送事件"><a href="#Spring-内部发送事件" class="headerlink" title="Spring 内部发送事件"></a>Spring 内部发送事件</h3><ul><li><code>ContextRefreshedEvent</code> <ul><li><code>ApplicationContextEvent</code><ul><li><code>ApplicationEvent</code></li></ul></li></ul></li></ul><p><code>refresh()</code>-&gt;<code>finishRefresh()</code>-&gt;  <code>publishEvent(new ContextRefreshedEvent(this))</code></p><ul><li><code>ContextClosedEvent</code><ul><li><code>ApplicationContextEvent</code><ul><li><code>ApplicationEvent</code></li></ul></li></ul></li></ul><p><code>close()</code> -&gt; <code>doClose()</code>-&gt;<code>publishEvent(new ContextClosedEvent(this))</code>;</p><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p><code>PayloadApplicationEvent</code></p><p>Spring 事件 都是<code>ApplicationEvent</code> 类型</p><p>发送 Spring 事件通过  <code>ApplicationEventMulticaster#multicastEvent(ApplicationEvent, ResolvableType)</code></p><p>Spring 事件的类型<code>ApplicationEvent</code></p><p>Spring 事件监听器 <code>ApplicationListener</code></p><p>Spring 事件广播器 <code>ApplicationEventMulticaster</code></p><p>实现类：<code>SimpleApplicationEventMulticaster</code></p><p>Spring 事件理解为消息</p><p><code>ApplicationEvent</code> 相当于消息内容</p><p><code>ApplicationListener</code> 相当于消息消费者、订阅者</p><p><code>ApplicationEventMulticaster</code> 相当于消息生产者、发布者</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationEventMulticasterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationEventMulticaster multicaster = <span class="keyword">new</span> SimpleApplicationEventMulticaster();</span><br><span class="line">        <span class="comment">// 添加监听器</span></span><br><span class="line">        multicaster.addApplicationListener(event -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (event <span class="keyword">instanceof</span> PayloadApplicationEvent) &#123;</span><br><span class="line">                System.out.println(<span class="string">"接受到 PayloadApplicationEvent :"</span></span><br><span class="line">                        + PayloadApplicationEvent.class.cast(event).getPayload());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"接收到事件："</span> + event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 发布/广播事件</span></span><br><span class="line">        multicaster.multicastEvent(<span class="keyword">new</span> MyEvent(<span class="string">"Hello,World"</span>));</span><br><span class="line">        multicaster.multicastEvent(<span class="keyword">new</span> PayloadApplicationEvent&lt;Object&gt;(<span class="string">"2"</span>, <span class="string">"Hello,World"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Boot事件"><a href="#Spring-Boot事件" class="headerlink" title="Spring Boot事件"></a>Spring Boot事件</h3><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootEventDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(SpringBootEventDemo.class)</span><br><span class="line">                .listeners(event -&gt; &#123;<span class="comment">// 增加监听器</span></span><br><span class="line">                    System.out.println(<span class="string">"监听到事件:"</span>+event.getClass().getSimpleName());</span><br><span class="line">                &#125;)</span><br><span class="line">                .run(args) <span class="comment">// 运行</span></span><br><span class="line">                .close(); <span class="comment">// 关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>ApplicationStartingEvent</code>（1）</li><li><code>ApplicationEnvironmentPreparedEvent</code>（2）</li><li><code>ApplicationPreparedEvent</code>（3）</li><li><code>ContextRefreshedEvent</code></li><li><code>ServletWebServerInitializedEvent</code></li><li><code>ApplicationStartedEvent</code>（4）</li><li><code>ApplicationReadyEvent</code>（5）</li><li><code>ContextClosedEvent</code></li><li><code>ApplicationFailedEvent</code> (特殊情况)（6）</li></ol><h3 id="Spring-Boot-事件监听器"><a href="#Spring-Boot-事件监听器" class="headerlink" title="Spring Boot 事件监听器"></a>Spring Boot 事件监听器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">org.springframework.boot.ClearCachesApplicationListener,\</span><br><span class="line">org.springframework.boot.builder.ParentContextCloserApplicationListener,\</span><br><span class="line">org.springframework.boot.context.FileEncodingApplicationListener,\</span><br><span class="line">org.springframework.boot.context.config.AnsiOutputApplicationListener,\</span><br><span class="line">org.springframework.boot.context.config.ConfigFileApplicationListener,\</span><br><span class="line">org.springframework.boot.context.config.DelegatingApplicationListener,\</span><br><span class="line">org.springframework.boot.context.logging.ClasspathLoggingApplicationListener,\</span><br><span class="line">org.springframework.boot.context.logging.LoggingApplicationListener,\</span><br><span class="line">org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener</span><br></pre></td></tr></table></figure><p><code>ConfigFileApplicationListener</code>监听 <code>ApplicationEnvironmentPreparedEvent</code>事件</p><p>从而加载 application.properties 或者 application.yml 文件</p><p>Spring Boot 很多组件依赖于 Spring Boot 事件监听器实现，本质是<code>Spring Framework</code>事件/监听机制</p><p><code>SpringApplication</code>利用</p><ul><li>Spring 应用上下文（<code>ApplicationContext</code>）生命周期控制 注解驱动 Bean </li><li>Spring 事件/监听（<code>ApplicationEventMulticaster</code>）机制加载或者初始化组件</li></ul><p>q1：<code>webApplicationType</code>分为三种都有什么实用地方</p><p>q2：框架底层的事件是单线程么？业务实现是否可以使用事件去实现？如果使用事件实现会不会是不是会有性能问题？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleApplicationEventMulticaster</span> <span class="keyword">extends</span> <span class="title">AbstractApplicationEventMulticaster</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> Executor taskExecutor;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本章主要学习自定义 SpringApplication、Spring注解编程模型、Spring Boot事件。&lt;/p&gt;
&lt;h1 id=&quot;一、自定义-SpringApplication&quot;&gt;&lt;a href=&quot;#一、自定义-SpringApplication&quot; class=&quot;he
      
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch源码分析之Threadpool模块</title>
    <link href="https://grezhang.github.io/2018/07/07/ElasticSearch/elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8BThreadPool%E6%A8%A1%E5%9D%97/"/>
    <id>https://grezhang.github.io/2018/07/07/ElasticSearch/elasticsearch源码分析之ThreadPool模块/</id>
    <published>2018-07-07T03:10:57.000Z</published>
    <updated>2018-07-02T02:04:10.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Elasticsearch源码分析专题" scheme="https://grezhang.github.io/categories/Elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="elasticsearch" scheme="https://grezhang.github.io/tags/elasticsearch/"/>
    
      <category term="源码分析" scheme="https://grezhang.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot初体验</title>
    <link href="https://grezhang.github.io/2018/07/05/spring-boot/01spring%20boot%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://grezhang.github.io/2018/07/05/spring-boot/01spring boot初体验/</id>
    <published>2018-07-05T04:12:56.000Z</published>
    <updated>2018-08-06T14:21:27.250Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Spring Boot基础" scheme="https://grezhang.github.io/categories/Spring-Boot%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring Boot" scheme="https://grezhang.github.io/tags/Spring-Boot/"/>
    
      <category term="微服务" scheme="https://grezhang.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch源码分析之Gateway模块</title>
    <link href="https://grezhang.github.io/2018/07/05/ElasticSearch/elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8BGateway%E6%A8%A1%E5%9D%97/"/>
    <id>https://grezhang.github.io/2018/07/05/ElasticSearch/elasticsearch源码分析之Gateway模块/</id>
    <published>2018-07-05T02:10:57.000Z</published>
    <updated>2018-07-02T02:03:40.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Elasticsearch源码分析专题" scheme="https://grezhang.github.io/categories/Elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="elasticsearch" scheme="https://grezhang.github.io/tags/elasticsearch/"/>
    
      <category term="源码分析" scheme="https://grezhang.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch启动JVM权限相关</title>
    <link href="https://grezhang.github.io/2018/07/02/ElasticSearch/problem/elasticsearch%E5%90%AF%E5%8A%A8JMV%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/"/>
    <id>https://grezhang.github.io/2018/07/02/ElasticSearch/problem/elasticsearch启动JMV权限问题/</id>
    <published>2018-07-02T06:44:31.000Z</published>
    <updated>2018-07-02T06:57:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1 问题描述"></a>1 问题描述</h3><p>IK分词下载之后，我需要修改IK源码，将词库维护放到Redis中去管理，引入了Redis相关的包，以及序列化工具fastjson，打包，然后放入到{ES_HOME}/plugins/IK下运行报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">java.security.AccessControlException: access denied ("java.lang.RuntimePermission" "getClassLoader")</span><br><span class="line">        at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)</span><br><span class="line">        at java.security.AccessController.checkPermission(AccessController.java:884)</span><br><span class="line">        at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)</span><br><span class="line">        at java.lang.ClassLoader.checkClassLoaderPermission(ClassLoader.java:1528)</span><br><span class="line">        at java.lang.Thread.getContextClassLoader(Thread.java:1443)</span><br><span class="line">        at com.alibaba.fastjson.parser.ParserConfig.getDeserializer(ParserConfig.java:423)</span><br><span class="line">        at com.alibaba.fastjson.parser.ParserConfig.getDeserializer(ParserConfig.java:312)</span><br><span class="line">        at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:611)</span><br><span class="line">        at com.alibaba.fastjson.JSON.parseObject(JSON.java:339)</span><br><span class="line">        at com.alibaba.fastjson.JSON.parseObject(JSON.java:243)</span><br><span class="line">        at com.alibaba.fastjson.JSON.parseObject(JSON.java:456)</span><br><span class="line">        at org.wltea.analyzer.db.JedisUtil.getStopWordList(JedisUtil.java:132)</span><br><span class="line">        at org.elasticsearch.index.analysis.IKCustormTokenizerTask.run(IKCustormTokenizerTask.java:49)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure><h3 id="2-问题解决"><a href="#2-问题解决" class="headerlink" title="2 问题解决"></a>2 问题解决</h3><p>注意看到这一句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.security.AccessControlException: access denied (&quot;java.lang.RuntimePermission&quot; &quot;getClassLoader&quot;)</span><br></pre></td></tr></table></figure><p>这是由于ES启动时java的安全管理机制限制了程序的的运行，类似的错误还有很多，根据具体报错来处理吧。</p><p>找到问题根源之后，我们就知道了处理的方式：</p><p>在{ES_HOME}/config下创建：plugin-security.policy文件，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">grant &#123;</span><br><span class="line">permission java.lang.RuntimePermission "getClassLoader";</span><br><span class="line">permission java.lang.RuntimePermission "accessDeclaredMembers";</span><br><span class="line">permission javax.management.MBeanTrustPermission "register";</span><br><span class="line">permission javax.management.MBeanServerPermission "createMBeanServer";</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后在该目录的jvm.options文件最后添加如下内容：可以使用相对或者绝对路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Djava.security.policy=plugin-security.policy</span><br></pre></td></tr></table></figure><p>然后再启动，没有报错，问题得到解决！</p><p>参考地址：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.2/modules-scripting-security.html" target="_blank" rel="noopener">ES官网</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-问题描述&quot;&gt;&lt;a href=&quot;#1-问题描述&quot; class=&quot;headerlink&quot; title=&quot;1 问题描述&quot;&gt;&lt;/a&gt;1 问题描述&lt;/h3&gt;&lt;p&gt;IK分词下载之后，我需要修改IK源码，将词库维护放到Redis中去管理，引入了Redis相关的包，以及序列化
      
    
    </summary>
    
      <category term="Elasticsearch问题" scheme="https://grezhang.github.io/categories/Elasticsearch%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="elasticsearch源码分析" scheme="https://grezhang.github.io/tags/elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="elasticsearch" scheme="https://grezhang.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch源码分析(五)--数据写入</title>
    <link href="https://grezhang.github.io/2018/06/03/ElasticSearch/elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E4%BA%94)--%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5/"/>
    <id>https://grezhang.github.io/2018/06/03/ElasticSearch/elasticsearch源码分析(五)--数据写入/</id>
    <published>2018-06-03T02:12:57.000Z</published>
    <updated>2018-07-02T02:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过前面几篇的分析，我们知道ES启动时会注册一下模块，Discovery的工作原理、以及各个节点间通信原理，我们接着分析ES的数据写入。</p><p>在分析ES写入源码之前，需要去了解一些理论基础，<a href="https://zhuanlan.zhihu.com/p/34669354" target="_blank" rel="noopener">Elasticsearch内核解析之数据写入</a> 写得非常不错，可以仔细研读，然后再去看看<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/create-doc.html" target="_blank" rel="noopener">ES权威指南</a></p><p>本篇不分析数据查询，留到下一篇来分析，我们先提出几个问题：</p><ul><li>如何向ES中添加新文档？</li><li>ES中出现版本冲突怎么解决？</li><li>Http协议方式添加和调用TransportClient添加数据的流程？</li><li>如何找到添加数据的入口在哪儿？</li><li>增删改流程是怎么样</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/create-doc.html" target="_blank" rel="noopener">ES权威指南之索引创建</a></p><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/delete-doc.html" target="_blank" rel="noopener">ES权威指南之索引删除</a></p><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/version-control.html" target="_blank" rel="noopener">ES权威指南之索引处理冲突</a></p><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/optimistic-concurrency-control.html" target="_blank" rel="noopener">ES权威指南之索引乐观控制</a></p><p><a href="https://zhuanlan.zhihu.com/p/34669354" target="_blank" rel="noopener">Elasticsearch内核解析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过前面几篇的分析，我们知道ES启动时会注册一下模块，Discovery的工作原理、以及各个节点间通信原理，我们接着分析ES的数据写入。&lt;/p&gt;
&lt;p&gt;在分析ES写入源码之前，需要去了解一些理论基础，&lt;a href=&quot;https://zhuanlan.zhihu.com/p
      
    
    </summary>
    
      <category term="Elasticsearch源码分析专题" scheme="https://grezhang.github.io/categories/Elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="elasticsearch" scheme="https://grezhang.github.io/tags/elasticsearch/"/>
    
      <category term="源码分析" scheme="https://grezhang.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch源码分析(四)--transport模块</title>
    <link href="https://grezhang.github.io/2018/05/30/ElasticSearch/elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E5%9B%9B)--transport%E6%A8%A1%E5%9D%97/"/>
    <id>https://grezhang.github.io/2018/05/30/ElasticSearch/elasticsearch源码分析(四)--transport模块/</id>
    <published>2018-05-30T02:12:57.000Z</published>
    <updated>2018-07-02T02:01:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过上一篇对Elasticsearch Discovery的分析，我们知道了ES Discovery的主要是用来做发现协议的，它包含了master选举、集群状态更新等功能，而在这一过程当中也依赖了Transport模块，但是我们一直没有谈论，本篇着重来分析Transport模块是做什么的，我们先来提出几个问题？</p><ul><li>Transport模块是用来干什么的？</li><li>ES有哪两种Client？</li><li>Client如何初始化？</li><li>ES有哪两种Client是如何与Nodes通信工作的？</li><li>Transport的工作原理？</li></ul><h3 id="一、Transport模块介绍"><a href="#一、Transport模块介绍" class="headerlink" title="一、Transport模块介绍"></a>一、Transport模块介绍</h3><p>transport模块是es通信的基础模块，在elasticsearch中用的很广泛，比如集群node之间的通信、数据的传输、transport client方式的数据发送等等,只要数和通信、数据传输相关的都离不开transport模块的作用。</p><p>先来看官网初始化Client例子：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/5.5/transport-client.html" target="_blank" rel="noopener">TransportClient</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">TransportClient client = <span class="keyword">new</span> PreBuiltTransportClient(Settings.EMPTY)</span><br><span class="line">        .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">"host1"</span>), <span class="number">9300</span>))</span><br><span class="line">        .addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">"host2"</span>), <span class="number">9300</span>));</span><br><span class="line"></span><br><span class="line">Settings settings = Settings.builder()</span><br><span class="line">        .put(<span class="string">"cluster.name"</span>, <span class="string">"myClusterName"</span>).build();</span><br><span class="line">TransportClient client = <span class="keyword">new</span> PreBuiltTransportClient(settings);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Settings settings = Settings.builder()</span><br><span class="line">        .put(<span class="string">"client.transport.sniff"</span>, <span class="keyword">true</span>).build();</span><br><span class="line">TransportClient client = <span class="keyword">new</span> PreBuiltTransportClient(settings);</span><br></pre></td></tr></table></figure><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/5.5/_initialization.html" target="_blank" rel="noopener">RestClient</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RestClient restClient = RestClient.builder(</span><br><span class="line">        <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9200</span>, <span class="string">"http"</span>),</span><br><span class="line">        <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9201</span>, <span class="string">"http"</span>)).build();</span><br></pre></td></tr></table></figure><p>从官网上的相关资料可以看出，ES的Client有两种，TransportClient和RestClient。</p><p>创建一个Client需要以下参数：</p><ul><li>需要连接到集群的IP地址（最好多填写几个，如果填写一个，同时启用了嗅探，但是填写的这个IP主机挂了，还是不能启动成功）</li><li>连接的端口</li><li>是否启用嗅探（自动发现集群中的机器）</li></ul><h3 id="二、源码分析"><a href="#二、源码分析" class="headerlink" title="二、源码分析"></a>二、源码分析</h3><p>上面就是源码的入口：我们先来分析TransportClient类的初始化：</p><p>####2.1 TransportClient类的初始化</p><h5 id="2-1-1-PreBuiltTransportClient类图关系"><a href="#2-1-1-PreBuiltTransportClient类图关系" class="headerlink" title="2.1.1 PreBuiltTransportClient类图关系"></a>2.1.1 PreBuiltTransportClient类图关系</h5><p><img src="F:\hexo\source\images\es\PreBuiltTransportClient类图.png" alt=":\hexo\source\images\es\PreBuiltTransportClient类图.pn"></p><h5 id="2-1-2-PreBuiltTransportClient源码分析"><a href="#2-1-2-PreBuiltTransportClient源码分析" class="headerlink" title="2.1.2 PreBuiltTransportClient源码分析"></a>2.1.2 PreBuiltTransportClient源码分析</h5><p>通过从上面的类图看出，PreBuiltTransportClient类继承了TransportClient类，我们先来看看它最终调用的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PreBuiltTransportClient</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Settings settings,</span></span></span><br><span class="line"><span class="function"><span class="params">        Collection&lt;Class&lt;? extends Plugin&gt;&gt; plugins,</span></span></span><br><span class="line"><span class="function"><span class="params">        HostFailureListener hostFailureListener)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类的构造方法：TransportClient</span></span><br><span class="line">        <span class="keyword">super</span>(settings, Settings.EMPTY, addPlugins(plugins, PRE_INSTALLED_PLUGINS), hostFailureListener);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="F:\hexo\source\images\es\PreBuiltTransportClient类信息.png" alt=":\hexo\source\images\es\PreBuiltTransportClient类信息.pn"></p><p>同时可以看到，这个类除了构造方法和close()方法外，没有对外提供额外的其他方法，调用时，都是去调用父类的构造方法，为什么要多用这么一个类呢？猜猜是为了扩展。</p><p>我们来看TransportClient的构造方法做了什么？</p><h5 id="2-1-3-TransportClient类分析："><a href="#2-1-3-TransportClient类分析：" class="headerlink" title="2.1.3 TransportClient类分析："></a>2.1.3 TransportClient类分析：</h5><h6 id="2-1-3-1-参数"><a href="#2-1-3-1-参数" class="headerlink" title="2.1.3.1 参数"></a>2.1.3.1 参数</h6><p>先来看这个类的几个参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Setting&lt;TimeValue&gt; CLIENT_TRANSPORT_NODES_SAMPLER_INTERVAL =</span><br><span class="line">    Setting.positiveTimeSetting(<span class="string">"client.transport.nodes_sampler_interval"</span>, timeValueSeconds(<span class="number">5</span>), Setting.Property.NodeScope);</span><br><span class="line"><span class="comment">// ping超时时间，默认5秒</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Setting&lt;TimeValue&gt; CLIENT_TRANSPORT_PING_TIMEOUT =</span><br><span class="line">    Setting.positiveTimeSetting(<span class="string">"client.transport.ping_timeout"</span>, timeValueSeconds(<span class="number">5</span>), Setting.Property.NodeScope);</span><br><span class="line"><span class="comment">// 是否忽略集群名称，默认不忽略</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Setting&lt;Boolean&gt; CLIENT_TRANSPORT_IGNORE_CLUSTER_NAME =</span><br><span class="line">    Setting.boolSetting(<span class="string">"client.transport.ignore_cluster_name"</span>, <span class="keyword">false</span>, Setting.Property.NodeScope);</span><br><span class="line"><span class="comment">// 是否启用嗅探，默认不启用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Setting&lt;Boolean&gt; CLIENT_TRANSPORT_SNIFF =</span><br><span class="line">    Setting.boolSetting(<span class="string">"client.transport.sniff"</span>, <span class="keyword">false</span>, Setting.Property.NodeScope);</span><br></pre></td></tr></table></figure><h6 id="2-1-3-2-构造方法"><a href="#2-1-3-2-构造方法" class="headerlink" title="2.1.3.2 构造方法"></a>2.1.3.2 构造方法</h6><p>PreBuiltTransportClient调用TransportClient的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">TransportClient</span><span class="params">(Settings settings, Settings defaultSettings, Collection&lt;Class&lt;? extends Plugin&gt;&gt; plugins,HostFailureListener hostFailureListener)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 先调用buildTemplate方法创建ClientTemplate模块实例，然后再调用TransportClient构造方法实例化对象</span></span><br><span class="line">       <span class="keyword">this</span>(buildTemplate(settings, defaultSettings, plugins, hostFailureListener));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">TransportClient</span><span class="params">(ClientTemplate template)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 初始化父类信息</span></span><br><span class="line">       <span class="keyword">super</span>(template.getSettings(), template.getThreadPool());</span><br><span class="line">       <span class="keyword">this</span>.injector = template.injector;</span><br><span class="line">       <span class="keyword">this</span>.pluginLifecycleComponents = Collections.unmodifiableList(template.pluginLifecycleComponents);</span><br><span class="line">       <span class="keyword">this</span>.nodesService = template.nodesService;</span><br><span class="line">       <span class="keyword">this</span>.proxy = template.proxy;</span><br><span class="line">       <span class="keyword">this</span>.namedWriteableRegistry = template.namedWriteableRegistry;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，在TransportClient的构造方法里，先调用buildTemplate方法创建ClientTemplate模块实例，然后再调用TransportClient构造方法实例化对象，那么TransportClient初始化核心逻辑就应该在buildTemplate()方法里面：</p><p>我们先来看看buildTemplate()方法干了什么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ClientTemplate <span class="title">buildTemplate</span><span class="params">(Settings providedSettings, Settings defaultSettings,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                Collection&lt;Class&lt;? extends Plugin&gt;&gt; plugins, HostFailureListener failureListner)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// node.name:没有配置，则配置"_client_"</span></span><br><span class="line">        <span class="keyword">if</span> (Node.NODE_NAME_SETTING.exists(providedSettings) == <span class="keyword">false</span>) &#123;</span><br><span class="line">            providedSettings = Settings.builder().put(providedSettings).put(Node.NODE_NAME_SETTING.getKey(), <span class="string">"_client_"</span>).build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化插件</span></span><br><span class="line">        <span class="keyword">final</span> PluginsService pluginsService = newPluginService(providedSettings, plugins);</span><br><span class="line">        <span class="keyword">final</span> Settings settings = Settings.builder().put(defaultSettings).put(pluginsService.updatedSettings()).build();</span><br><span class="line">        <span class="keyword">final</span> List&lt;Closeable&gt; resourcesToClose = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 创建线程池：核心</span></span><br><span class="line">        <span class="keyword">final</span> ThreadPool threadPool = <span class="keyword">new</span> ThreadPool(settings);</span><br><span class="line">        resourcesToClose.add(() -&gt; ThreadPool.terminate(threadPool, <span class="number">10</span>, TimeUnit.SECONDS));</span><br><span class="line">        <span class="comment">// 初始化网络设置</span></span><br><span class="line">        <span class="keyword">final</span> NetworkService networkService = <span class="keyword">new</span> NetworkService(settings, Collections.emptyList());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> List&lt;Setting&lt;?&gt;&gt; additionalSettings = <span class="keyword">new</span> ArrayList&lt;&gt;(pluginsService.getPluginSettings());</span><br><span class="line">            <span class="keyword">final</span> List&lt;String&gt; additionalSettingsFilter = <span class="keyword">new</span> ArrayList&lt;&gt;(pluginsService.getPluginSettingsFilter());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">final</span> ExecutorBuilder&lt;?&gt; builder : threadPool.builders()) &#123;</span><br><span class="line">                additionalSettings.addAll(builder.getRegisteredSettings());</span><br><span class="line">            &#125;</span><br><span class="line">            SettingsModule settingsModule = <span class="keyword">new</span> SettingsModule(settings, additionalSettings, additionalSettingsFilter);</span><br><span class="line"></span><br><span class="line">            SearchModule searchModule = <span class="keyword">new</span> SearchModule(settings, <span class="keyword">true</span>, pluginsService.filterPlugins(SearchPlugin.class));</span><br><span class="line">            List&lt;NamedWriteableRegistry.Entry&gt; entries = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            entries.addAll(NetworkModule.getNamedWriteables());</span><br><span class="line">            entries.addAll(searchModule.getNamedWriteables());</span><br><span class="line">            entries.addAll(ClusterModule.getNamedWriteables());</span><br><span class="line">            entries.addAll(pluginsService.filterPlugins(Plugin.class).stream()</span><br><span class="line">                                         .flatMap(p -&gt; p.getNamedWriteables().stream())</span><br><span class="line">                                         .collect(Collectors.toList()));</span><br><span class="line">            NamedWriteableRegistry namedWriteableRegistry = <span class="keyword">new</span> NamedWriteableRegistry(entries);</span><br><span class="line">            NamedXContentRegistry xContentRegistry = <span class="keyword">new</span> NamedXContentRegistry(Stream.of(</span><br><span class="line">                    searchModule.getNamedXContents().stream(),</span><br><span class="line">                    pluginsService.filterPlugins(Plugin.class).stream()</span><br><span class="line">                            .flatMap(p -&gt; p.getNamedXContent().stream())</span><br><span class="line">                    ).flatMap(Function.identity()).collect(toList()));</span><br><span class="line">            <span class="comment">// 模块构建</span></span><br><span class="line">            ModulesBuilder modules = <span class="keyword">new</span> ModulesBuilder();</span><br><span class="line">            <span class="comment">// plugin modules must be added here, before others or we can get crazy injection errors...</span></span><br><span class="line">            <span class="keyword">for</span> (Module pluginModule : pluginsService.createGuiceModules()) &#123;</span><br><span class="line">                modules.add(pluginModule);</span><br><span class="line">            &#125;</span><br><span class="line">            modules.add(b -&gt; b.bind(ThreadPool.class).toInstance(threadPool));</span><br><span class="line">            ActionModule actionModule = <span class="keyword">new</span> ActionModule(<span class="keyword">true</span>, settings, <span class="keyword">null</span>, settingsModule.getIndexScopedSettings(),</span><br><span class="line">                    settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(), threadPool,</span><br><span class="line">                    pluginsService.filterPlugins(ActionPlugin.class), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            modules.add(actionModule);</span><br><span class="line"></span><br><span class="line">            CircuitBreakerService circuitBreakerService = Node.createCircuitBreakerService(settingsModule.getSettings(),</span><br><span class="line">                settingsModule.getClusterSettings());</span><br><span class="line">            resourcesToClose.add(circuitBreakerService);</span><br><span class="line">            BigArrays bigArrays = <span class="keyword">new</span> BigArrays(settings, circuitBreakerService);</span><br><span class="line">            resourcesToClose.add(bigArrays);</span><br><span class="line">            modules.add(settingsModule);</span><br><span class="line">            <span class="comment">// 初始化网络模块</span></span><br><span class="line">            NetworkModule networkModule = <span class="keyword">new</span> NetworkModule(settings, <span class="keyword">true</span>, pluginsService.filterPlugins(NetworkPlugin.class), threadPool,</span><br><span class="line">                bigArrays, circuitBreakerService, namedWriteableRegistry, xContentRegistry, networkService, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">final</span> Transport transport = networkModule.getTransportSupplier().get();</span><br><span class="line">            <span class="keyword">final</span> TransportAddress address;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                address = transport.addressesFromString(<span class="string">"0.0.0.0:0"</span>, <span class="number">1</span>)[<span class="number">0</span>]; <span class="comment">// this is just a dummy transport address</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 初始化TransportService</span></span><br><span class="line">            <span class="keyword">final</span> TransportService transportService = <span class="keyword">new</span> TransportService(settings, transport, threadPool,</span><br><span class="line">                networkModule.getTransportInterceptor(),</span><br><span class="line">                boundTransportAddress -&gt; DiscoveryNode.createLocal(settings, address, UUIDs.randomBase64UUID()), <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 使用GUICE注入到 ModuleBuild</span></span><br><span class="line">            modules.add((b -&gt; &#123;</span><br><span class="line">                b.bind(BigArrays.class).toInstance(bigArrays);</span><br><span class="line">                b.bind(PluginsService.class).toInstance(pluginsService);</span><br><span class="line">                b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService);</span><br><span class="line">                b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry);</span><br><span class="line">                b.bind(Transport.class).toInstance(transport);</span><br><span class="line">                b.bind(TransportService.class).toInstance(transportService);</span><br><span class="line">                b.bind(NetworkService.class).toInstance(networkService);</span><br><span class="line">            &#125;));</span><br><span class="line">            Injector injector = modules.createInjector();</span><br><span class="line">            <span class="keyword">final</span> TransportClientNodesService nodesService =</span><br><span class="line">                <span class="keyword">new</span> TransportClientNodesService(settings, transportService, threadPool, failureListner == <span class="keyword">null</span></span><br><span class="line">                    ? (t, e) -&gt; &#123;&#125; : failureListner);</span><br><span class="line">            <span class="keyword">final</span> TransportProxyClient proxy = <span class="keyword">new</span> TransportProxyClient(settings, transportService, nodesService,</span><br><span class="line">                actionModule.getActions().values().stream().map(x -&gt; x.getAction()).collect(Collectors.toList()));</span><br><span class="line"></span><br><span class="line">            List&lt;LifecycleComponent&gt; pluginLifecycleComponents = <span class="keyword">new</span> ArrayList&lt;&gt;(pluginsService.getGuiceServiceClasses().stream()</span><br><span class="line">                .map(injector::getInstance).collect(Collectors.toList()));</span><br><span class="line">            resourcesToClose.addAll(pluginLifecycleComponents);</span><br><span class="line">            <span class="comment">// 开始</span></span><br><span class="line">            transportService.start();</span><br><span class="line">            transportService.acceptIncomingRequests();</span><br><span class="line">            <span class="comment">// 创建ClientTemplate实例</span></span><br><span class="line">            ClientTemplate transportClient = <span class="keyword">new</span> ClientTemplate(injector, pluginLifecycleComponents, nodesService, proxy, namedWriteableRegistry);</span><br><span class="line">            resourcesToClose.clear();</span><br><span class="line">            <span class="comment">// 返回ClientTemplate实例</span></span><br><span class="line">            <span class="keyword">return</span> transportClient;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IOUtils.closeWhileHandlingException(resourcesToClose);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过上面的源码可以知道，构造函数的初始化和Node的初始化过程是非常相似的，Client的初始化只是不会初始化那么多模块信息，但是常规的ThreadPool、PluginsService、NetworkService、NetworkModule、transportService等，最终会创建一个ClientTemplate对象，然后返回，我们不会分析每一个模块的初始化过程，这里只会分析ThreadPool和transportService的过程，在后面会介绍。</p><h6 id="2-1-3-3-ClientTemplate-类分析"><a href="#2-1-3-3-ClientTemplate-类分析" class="headerlink" title="2.1.3.3 ClientTemplate 类分析"></a>2.1.3.3 ClientTemplate 类分析</h6><p>我们来看看ClientTemplate 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTemplate</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 依赖注入的对象,负责管理各种注入的Bean</span></span><br><span class="line">        <span class="keyword">final</span> Injector injector;</span><br><span class="line">        <span class="comment">// 插件管理：启动、停止等</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;LifecycleComponent&gt; pluginLifecycleComponents;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> TransportClientNodesService nodesService;</span><br><span class="line">        <span class="comment">// Transport代理</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> TransportProxyClient proxy;</span><br><span class="line">        <span class="comment">// 暂时不清楚</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> NamedWriteableRegistry namedWriteableRegistry;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">ClientTemplate</span><span class="params">(Injector injector, List&lt;LifecycleComponent&gt; pluginLifecycleComponents,</span></span></span><br><span class="line"><span class="function"><span class="params">                TransportClientNodesService nodesService, TransportProxyClient proxy, NamedWriteableRegistry namedWriteableRegistry)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.injector = injector;</span><br><span class="line">            <span class="keyword">this</span>.pluginLifecycleComponents = pluginLifecycleComponents;</span><br><span class="line">            <span class="keyword">this</span>.nodesService = nodesService;</span><br><span class="line">            <span class="keyword">this</span>.proxy = proxy;</span><br><span class="line">            <span class="keyword">this</span>.namedWriteableRegistry = namedWriteableRegistry;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">Settings <span class="title">getSettings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> injector.getInstance(Settings.class);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">ThreadPool <span class="title">getThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> injector.getInstance(ThreadPool.class);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个类封装了依赖注入管理类injector、插件pluginLifecycleComponents、Transport代理proxy、namedWriteableRegistry、nodesService等5个成员变量。</p><h6 id="2-1-3-4-nodesService初始化"><a href="#2-1-3-4-nodesService初始化" class="headerlink" title="2.1.3.4 nodesService初始化"></a>2.1.3.4 nodesService初始化</h6><p>nodesService是TransportClientNodesService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">TransportClientNodesService(Settings settings, TransportService transportService,</span><br><span class="line">                                       ThreadPool threadPool, TransportClient.HostFailureListener hostFailureListener) &#123;</span><br><span class="line">        <span class="keyword">super</span>(settings);</span><br><span class="line">        <span class="keyword">this</span>.clusterName = ClusterName.CLUSTER_NAME_SETTING.get(settings);</span><br><span class="line">        <span class="keyword">this</span>.transportService = transportService;</span><br><span class="line">        <span class="keyword">this</span>.threadPool = threadPool;</span><br><span class="line">        <span class="keyword">this</span>.minCompatibilityVersion = Version.CURRENT.minimumCompatibilityVersion();</span><br><span class="line">        <span class="comment">// CLIENT_TRANSPORT_NODES_SAMPLER_INTERVAL参数默认5秒，在TransportClient中定义的</span></span><br><span class="line">        <span class="keyword">this</span>.nodesSamplerInterval = TransportClient.CLIENT_TRANSPORT_NODES_SAMPLER_INTERVAL.get(<span class="keyword">this</span>.settings);</span><br><span class="line">        <span class="keyword">this</span>.pingTimeout = TransportClient.CLIENT_TRANSPORT_PING_TIMEOUT.get(<span class="keyword">this</span>.settings).millis();</span><br><span class="line">        <span class="keyword">this</span>.ignoreClusterName = TransportClient.CLIENT_TRANSPORT_IGNORE_CLUSTER_NAME.get(<span class="keyword">this</span>.settings);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"node_sampler_interval[&#123;&#125;]"</span>, nodesSamplerInterval);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里判断是否启用了嗅探：这个Sniff参数就在这里使用</span></span><br><span class="line">        <span class="keyword">if</span> (TransportClient.CLIENT_TRANSPORT_SNIFF.get(<span class="keyword">this</span>.settings)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.nodesSampler = <span class="keyword">new</span> SniffNodesSampler();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.nodesSampler = <span class="keyword">new</span> SimpleNodeSampler();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.hostFailureListener = hostFailureListener;</span><br><span class="line">        <span class="comment">// 创建定时任务：通过GENERIC类型的线程池处理</span></span><br><span class="line">        <span class="keyword">this</span>.nodesSamplerFuture = threadPool.schedule(nodesSamplerInterval, ThreadPool.Names.GENERIC, <span class="keyword">new</span> ScheduledNodeSampler());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个类的构造方法很多参数都是从TransportClient中带过来的，比如是否启用嗅探参数Sniff，根据这个参数选择不同的策略SniffNodesSampler和SimpleNodeSampler。最后会有定时任务的时间间隔，线程池类型是GENERIC，默认是每隔5秒去ping其他节点。对于这两种策略：代码如下</p><p>SimpleNodeSampler类分析如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleNodeSampler</span> <span class="keyword">extends</span> <span class="title">NodeSampler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doSample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            HashSet&lt;DiscoveryNode&gt; newNodes = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            HashSet&lt;DiscoveryNode&gt; newFilteredNodes = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">for</span> (DiscoveryNode listedNode : listedNodes) &#123;</span><br><span class="line">                <span class="comment">// 通过Netty4获取connection</span></span><br><span class="line">                <span class="keyword">try</span> (Transport.Connection connection = transportService.openConnection(listedNode, LISTED_NODES_PROFILE))&#123;</span><br><span class="line">                    <span class="keyword">final</span> PlainTransportFuture&lt;LivenessResponse&gt; handler = <span class="keyword">new</span> PlainTransportFuture&lt;&gt;(</span><br><span class="line">                        <span class="keyword">new</span> FutureTransportResponseHandler&lt;LivenessResponse&gt;() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> LivenessResponse <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">new</span> LivenessResponse();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    <span class="comment">// 发送STATE的类型的Request：最终是调用了一个异步发送的方式</span></span><br><span class="line">                    transportService.sendRequest(connection, TransportLivenessAction.NAME, <span class="keyword">new</span> LivenessRequest(),</span><br><span class="line">                        TransportRequestOptions.builder().withType(TransportRequestOptions.Type.STATE).withTimeout(pingTimeout).build(),</span><br><span class="line">                        handler);</span><br><span class="line">                    <span class="keyword">final</span> LivenessResponse livenessResponse = handler.txGet();</span><br><span class="line">                    <span class="keyword">if</span> (!ignoreClusterName &amp;&amp; !clusterName.equals(livenessResponse.getClusterName())) &#123;</span><br><span class="line">                        logger.warn(<span class="string">"node &#123;&#125; not part of the cluster &#123;&#125;, ignoring..."</span>, listedNode, clusterName);</span><br><span class="line">                        newFilteredNodes.add(listedNode);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// use discovered information but do keep the original transport address,</span></span><br><span class="line">                        <span class="comment">// so people can control which address is exactly used.</span></span><br><span class="line">                        DiscoveryNode nodeWithInfo = livenessResponse.getDiscoveryNode();</span><br><span class="line">                        newNodes.add(<span class="keyword">new</span> DiscoveryNode(nodeWithInfo.getName(), nodeWithInfo.getId(), nodeWithInfo.getEphemeralId(),</span><br><span class="line">                            nodeWithInfo.getHostName(), nodeWithInfo.getHostAddress(), listedNode.getAddress(),</span><br><span class="line">                            nodeWithInfo.getAttributes(), nodeWithInfo.getRoles(), nodeWithInfo.getVersion()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ConnectTransportException e) &#123;</span><br><span class="line">                    logger.debug(</span><br><span class="line">                        (Supplier&lt;?&gt;)</span><br><span class="line">                            () -&gt; <span class="keyword">new</span> ParameterizedMessage(<span class="string">"failed to connect to node [&#123;&#125;], ignoring..."</span>, listedNode), e);</span><br><span class="line">                    hostFailureListener.onNodeDisconnected(listedNode, e);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    logger.info(</span><br><span class="line">                        (Supplier&lt;?&gt;) () -&gt; <span class="keyword">new</span> ParameterizedMessage(<span class="string">"failed to get node info for &#123;&#125;, disconnecting..."</span>, listedNode), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">   <span class="comment">// 验证节点</span></span><br><span class="line">            nodes = validateNewNodes(newNodes);</span><br><span class="line">            filteredNodes = Collections.unmodifiableList(<span class="keyword">new</span> ArrayList&lt;&gt;(newFilteredNodes));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//该方法主要是为每一个节点建立的连接进行检验</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> List&lt;DiscoveryNode&gt; <span class="title">validateNewNodes</span><span class="params">(Set&lt;DiscoveryNode&gt; nodes)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (Iterator&lt;DiscoveryNode&gt; it = nodes.iterator(); it.hasNext(); ) &#123;</span><br><span class="line">                DiscoveryNode node = it.next();</span><br><span class="line">                <span class="comment">// 循环的检验与每个可用节点建立的连接是否已完成</span></span><br><span class="line">                <span class="keyword">if</span> (!transportService.nodeConnected(node)) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        logger.trace(<span class="string">"connecting to node [&#123;&#125;]"</span>, node);</span><br><span class="line">                        <span class="comment">// 确定已经建立连接</span></span><br><span class="line">                        transportService.connectToNode(node);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        it.remove();</span><br><span class="line">                        logger.debug((Supplier&lt;?&gt;) () -&gt; <span class="keyword">new</span> ParameterizedMessage(<span class="string">"failed to connect to discovered node [&#123;&#125;]"</span>, node), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 返回列表</span></span><br><span class="line">            <span class="keyword">return</span> Collections.unmodifiableList(<span class="keyword">new</span> ArrayList&lt;&gt;(nodes));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这个类的工作还是比较清晰的，就是获取配置的listedNodes然后去请求一个STATE类型的Request，这里的Connection是通过Netty4来拿到的，具体在后续会分析到，而线程是用GENERIC的线程池。把成功建立连接的所有的Nodes保存起来，而与每个Node也只保持1条连接。</p><p>我们再来看看SniffNodesSampler是什么情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SniffNodesSampler</span> <span class="keyword">extends</span> <span class="title">NodeSampler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doSample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// the nodes we are going to ping include the core listed nodes that were added</span></span><br><span class="line">            <span class="comment">// and the last round of discovered nodes</span></span><br><span class="line">            <span class="comment">// 获取待ping的nodesToPing：从listedNodes和nodes获取</span></span><br><span class="line">            Set&lt;DiscoveryNode&gt; nodesToPing = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (DiscoveryNode node : listedNodes) &#123;</span><br><span class="line">                nodesToPing.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (DiscoveryNode node : nodes) &#123;</span><br><span class="line">                nodesToPing.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置一个计数器：大小为待ping的Node的列表nodesToPing大小</span></span><br><span class="line">            <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(nodesToPing.size());</span><br><span class="line">            <span class="comment">// 将cluster响应状态存储到ConcurrentMap中：clusterStateResponses</span></span><br><span class="line">            <span class="keyword">final</span> ConcurrentMap&lt;DiscoveryNode, ClusterStateResponse&gt; clusterStateResponses = ConcurrentCollections.newConcurrentMap();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 首先也是先向所有的listedNode都ping一遍，注意这里用的是MANAGEMENT的threadPool</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">final</span> DiscoveryNode nodeToPing : nodesToPing) &#123;</span><br><span class="line">                    <span class="comment">// 通过MANAGEMENT类型的线程处理:</span></span><br><span class="line">                    threadPool.executor(ThreadPool.Names.MANAGEMENT).execute(<span class="keyword">new</span> AbstractRunnable() &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                         * we try to reuse existing connections but if needed we will open a temporary connection</span></span><br><span class="line"><span class="comment">                         * that will be closed at the end of the execution.</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        Transport.Connection connectionToClose = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="comment">// 关闭异常</span></span><br><span class="line">                        <span class="function"><span class="keyword">void</span> <span class="title">onDone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                IOUtils.closeWhileHandlingException(connectionToClose);</span><br><span class="line">                            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                latch.countDown();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 如果失败：调用 onDone()方法，同时抛出异常信息</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                            onDone();</span><br><span class="line">                            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ConnectTransportException) &#123;</span><br><span class="line">                                logger.debug((Supplier&lt;?&gt;)</span><br><span class="line">                                    () -&gt; <span class="keyword">new</span> ParameterizedMessage(<span class="string">"failed to connect to node [&#123;&#125;], ignoring..."</span>, nodeToPing), e);</span><br><span class="line">                                hostFailureListener.onNodeDisconnected(nodeToPing, e);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                logger.info(</span><br><span class="line">                                    (Supplier&lt;?&gt;) () -&gt; <span class="keyword">new</span> ParameterizedMessage(</span><br><span class="line">                                        <span class="string">"failed to get local cluster state info for &#123;&#125;, disconnecting..."</span>, nodeToPing), e);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRun</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            Transport.Connection pingConnection = <span class="keyword">null</span>;</span><br><span class="line">                            <span class="keyword">if</span> (nodes.contains(nodeToPing)) &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    <span class="comment">// 调用TransportService发起连接：获取ping的连接</span></span><br><span class="line">                                    pingConnection = transportService.getConnection(nodeToPing);</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (NodeNotConnectedException e) &#123;</span><br><span class="line">                                    <span class="comment">// will use a temp connection</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (pingConnection == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                logger.trace(<span class="string">"connecting to cluster node [&#123;&#125;]"</span>, nodeToPing);</span><br><span class="line">                                <span class="comment">// 调用TransportService发起连接：这里会建立了一堆连接</span></span><br><span class="line">                                <span class="comment">// 这是因为这个列表添加了两次</span></span><br><span class="line">                                connectionToClose = transportService.openConnection(nodeToPing, LISTED_NODES_PROFILE);</span><br><span class="line">                                pingConnection = connectionToClose;</span><br><span class="line">                            &#125;</span><br><span class="line">                            transportService.sendRequest(pingConnection, ClusterStateAction.NAME,</span><br><span class="line">                                Requests.clusterStateRequest().clear().nodes(<span class="keyword">true</span>).local(<span class="keyword">true</span>),</span><br><span class="line">                                <span class="comment">// 在pingTimeout时间内写入STATE</span></span><br><span class="line">                                TransportRequestOptions.builder().withType(TransportRequestOptions.Type.STATE)</span><br><span class="line">                                    .withTimeout(pingTimeout).build(),</span><br><span class="line">                                <span class="keyword">new</span> TransportResponseHandler&lt;ClusterStateResponse&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                                    <span class="meta">@Override</span></span><br><span class="line">                                    <span class="function"><span class="keyword">public</span> ClusterStateResponse <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                        <span class="keyword">return</span> <span class="keyword">new</span> ClusterStateResponse();</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                    <span class="meta">@Override</span></span><br><span class="line">                                    <span class="function"><span class="keyword">public</span> String <span class="title">executor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                        <span class="keyword">return</span> ThreadPool.Names.SAME;</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                    <span class="meta">@Override</span></span><br><span class="line">                                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleResponse</span><span class="params">(ClusterStateResponse response)</span> </span>&#123;</span><br><span class="line">                                        <span class="comment">// 将nodeToPing拿到的clusterState添加到clusterStateResponses当中</span></span><br><span class="line">                                        clusterStateResponses.put(nodeToPing, response);</span><br><span class="line">                                        onDone();</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                    <span class="meta">@Override</span></span><br><span class="line">                                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleException</span><span class="params">(TransportException e)</span> </span>&#123;</span><br><span class="line">                                        logger.info(</span><br><span class="line">                                            (Supplier&lt;?&gt;) () -&gt; <span class="keyword">new</span> ParameterizedMessage(</span><br><span class="line">                                                <span class="string">"failed to get local cluster state for &#123;&#125;, disconnecting..."</span>, nodeToPing), e);</span><br><span class="line">                                        <span class="keyword">try</span> &#123;</span><br><span class="line">                                            hostFailureListener.onNodeDisconnected(nodeToPing, e);</span><br><span class="line">                                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                            onDone();</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                latch.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            HashSet&lt;DiscoveryNode&gt; newNodes = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            HashSet&lt;DiscoveryNode&gt; newFilteredNodes = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;DiscoveryNode, ClusterStateResponse&gt; entry : clusterStateResponses.entrySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!ignoreClusterName &amp;&amp; !clusterName.equals(entry.getValue().getClusterName())) &#123;</span><br><span class="line">                    logger.warn(<span class="string">"node &#123;&#125; not part of the cluster &#123;&#125;, ignoring..."</span>,</span><br><span class="line">                            entry.getValue().getState().nodes().getLocalNode(), clusterName);</span><br><span class="line">                    newFilteredNodes.add(entry.getKey());</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (ObjectCursor&lt;DiscoveryNode&gt; cursor : entry.getValue().getState().nodes().getDataNodes().values()) &#123;</span><br><span class="line">                    newNodes.add(cursor.value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="comment">// 同样需要检验连接</span></span><br><span class="line">            nodes = validateNewNodes(newNodes);</span><br><span class="line">            filteredNodes = Collections.unmodifiableList(<span class="keyword">new</span> ArrayList&lt;&gt;(newFilteredNodes));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先也是先向所有的listedNode都ping一遍，注意这里用的是<code>MANAGEMENT</code>的<code>threadPool</code>，也是调用TransportService发起连接，这里要特别注意，这种方式下其实是建立了一堆连接<code>connectionToClose = transportService.openConnection(nodeToPing, LISTED_NODES_PROFILE);</code>如每个类型多少条连接这样，所以这种模式一个Client会和一个Node保持一堆连接。回调函数都很简单，成功和失败的都归类，同时拿到了每个送回来的cluster的state保存下来`clusterStateResponses.put(nodeToPing, response)。</p><p>从哪里看出来是一个节点对应一堆连接呢？请思考</p><p>最后汇总再确认一遍所有的nodes，校验完后维护，其实这里的nodes就是整个集群的所有的nodes了，剩下的就交给那个调度器去每间隔时间去ping了。</p><p>至此，我们已经建立好了连接了，以后如何有什么请求，就是Client向一个node去获取一个连接或者一个类型的连接池threadpool，然后就可以发起请求了。这个过程其实就是proxy的事情。</p><h6 id="2-1-3-5-proxy初始化"><a href="#2-1-3-5-proxy初始化" class="headerlink" title="2.1.3.5 proxy初始化"></a>2.1.3.5 proxy初始化</h6><p>在ClientTemplate类初始化时也需要初始化proxy，它只保存两个变量nodesService和proxies，nodesService是上一步初始化好的建立了连接的对象，proxies是各种操作action的proxy的集合列表：比如index、update、search、bulk等。如果我们要去执行一个操作，最终会将proxy.execute()方法拿给nodesService.execute()执行，</p><p>nodesService会随机选取一个建立好连接的Node来执行操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> TransportProxyClient proxy = <span class="keyword">new</span> TransportProxyClient(settings, transportService, nodesService,actionModule.getActions().values().stream().map(x -&gt; x.getAction()).collect(Collectors.toList()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TransportProxyClient</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 保存nodesService</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TransportClientNodesService nodesService;</span><br><span class="line">    <span class="comment">// 各种操作action的proxy变量：比如index、update、search、bulk等</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Action, TransportActionNodeProxy&gt; proxies;</span><br><span class="line"></span><br><span class="line">    TransportProxyClient(Settings settings, TransportService transportService,</span><br><span class="line">                                TransportClientNodesService nodesService, List&lt;GenericAction&gt; actions) &#123;</span><br><span class="line">        <span class="keyword">this</span>.nodesService = nodesService;</span><br><span class="line">        Map&lt;Action, TransportActionNodeProxy&gt; proxies = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 循环的添加action的proxy到HashMap中</span></span><br><span class="line">        <span class="keyword">for</span> (GenericAction action : actions) &#123;</span><br><span class="line">            <span class="keyword">if</span> (action <span class="keyword">instanceof</span> Action) &#123;</span><br><span class="line">                proxies.put((Action) action, <span class="keyword">new</span> TransportActionNodeProxy(settings, action, transportService));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.proxies = unmodifiableMap(proxies);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 这个代理其实调用nodesService的execute()方法</span></span><br><span class="line">    <span class="keyword">public</span> &lt;Request extends ActionRequest, Response extends ActionResponse, RequestBuilder extends</span><br><span class="line">        ActionRequestBuilder&lt;Request, Response, RequestBuilder&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Action&lt;Request, Response, RequestBuilder&gt; action,<span class="keyword">final</span> Request request, ActionListener&lt;Response&gt; listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> TransportActionNodeProxy&lt;Request, Response&gt; proxy = proxies.get(action);</span><br><span class="line">        nodesService.execute((n, l) -&gt; proxy.execute(n, request, l), listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nodesService.execute()方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;Response&gt; <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(NodeListenerCallback&lt;Response&gt; callback, ActionListener&lt;Response&gt; listener)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// we first read nodes before checking the closed state; this</span></span><br><span class="line">       <span class="comment">// is because otherwise we could be subject to a race where we</span></span><br><span class="line">       <span class="comment">// read the state as not being closed, and then the client is</span></span><br><span class="line">       <span class="comment">// closed and the nodes list is cleared, and then a</span></span><br><span class="line">       <span class="comment">// NoNodeAvailableException is thrown</span></span><br><span class="line">       <span class="comment">// it is important that the order of first setting the state of</span></span><br><span class="line">       <span class="comment">// closed and then clearing the list of nodes is maintained in</span></span><br><span class="line">       <span class="comment">// the close method</span></span><br><span class="line">       <span class="keyword">final</span> List&lt;DiscoveryNode&gt; nodes = <span class="keyword">this</span>.nodes;</span><br><span class="line">       <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"transport client is closed"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 确保Nodes可用</span></span><br><span class="line">       ensureNodesAreAvailable(nodes);</span><br><span class="line">       <span class="comment">// 随机获取</span></span><br><span class="line">       <span class="keyword">int</span> index = getNodeNumber();</span><br><span class="line">       RetryListener&lt;Response&gt; retryListener = <span class="keyword">new</span> RetryListener&lt;&gt;(callback, listener, nodes, index, hostFailureListener);</span><br><span class="line">       DiscoveryNode node = retryListener.getNode(<span class="number">0</span>);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 回调doWithNode</span></span><br><span class="line">           callback.doWithNode(node, retryListener);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">//this exception can't come from the TransportService as it doesn't throw exception at all</span></span><br><span class="line">               listener.onFailure(e);</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               retryListener.maybeNodeFailed(node, e);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机选取一个Node</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getNodeNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> index = randomNodeGenerator.incrementAndGet();</span><br><span class="line">       <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">           index = <span class="number">0</span>;</span><br><span class="line">           randomNodeGenerator.set(<span class="number">0</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> index;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-RestClient初始化"><a href="#2-2-RestClient初始化" class="headerlink" title="2.2 RestClient初始化"></a>2.2 RestClient初始化</h4><p>这个类初始化非常简单，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestClient</span> <span class="keyword">implements</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(RestClient.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CloseableHttpAsyncClient client;</span><br><span class="line">    <span class="comment">//we don't rely on default headers supported by HttpAsyncClient as those cannot be replaced</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Header[] defaultHeaders;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxRetryTimeoutMillis;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String pathPrefix;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger lastHostIndex = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> HostTuple&lt;Set&lt;HttpHost&gt;&gt; hostTuple;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;HttpHost, DeadHostState&gt; blacklist = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FailureListener failureListener;</span><br><span class="line"></span><br><span class="line">    RestClient(CloseableHttpAsyncClient client, <span class="keyword">long</span> maxRetryTimeoutMillis, Header[] defaultHeaders,</span><br><span class="line">               HttpHost[] hosts, String pathPrefix, FailureListener failureListener) &#123;</span><br><span class="line">        <span class="keyword">this</span>.client = client;</span><br><span class="line">        <span class="keyword">this</span>.maxRetryTimeoutMillis = maxRetryTimeoutMillis;</span><br><span class="line">        <span class="keyword">this</span>.defaultHeaders = defaultHeaders;</span><br><span class="line">        <span class="keyword">this</span>.failureListener = failureListener;</span><br><span class="line">        <span class="keyword">this</span>.pathPrefix = pathPrefix;</span><br><span class="line">        setHosts(hosts);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a new &#123;<span class="doctag">@link</span> RestClientBuilder&#125; to help with &#123;<span class="doctag">@link</span> RestClient&#125; creation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RestClientBuilder <span class="title">builder</span><span class="params">(HttpHost... hosts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestClientBuilder(hosts);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Replaces the hosts that the client communicates with.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpHost</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setHosts</span><span class="params">(HttpHost... hosts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hosts == <span class="keyword">null</span> || hosts.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"hosts must not be null nor empty"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;HttpHost&gt; httpHosts = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        AuthCache authCache = <span class="keyword">new</span> BasicAuthCache();</span><br><span class="line">        <span class="keyword">for</span> (HttpHost host : hosts) &#123;</span><br><span class="line">            Objects.requireNonNull(host, <span class="string">"host cannot be null"</span>);</span><br><span class="line">            httpHosts.add(host);</span><br><span class="line">            authCache.put(host, <span class="keyword">new</span> BasicScheme());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.hostTuple = <span class="keyword">new</span> HostTuple&lt;&gt;(Collections.unmodifiableSet(httpHosts), authCache);</span><br><span class="line">        <span class="keyword">this</span>.blacklist.clear();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里不像TransportClient可以启用嗅探功能，仅仅只是会维护你明确配置的所有host，如果有必要，则把认证信息authCache缓存起来而已，剩下的事情就是交给httpClient调用。</p><p>对比这两种客户端的初始化，TransportClient稍微复杂一些，RestClient相对简单，它是最后是将所有的调用交给Apache的HttpClient客户端去完成。</p><p>至此，我们Client的源码流程大致分析完成，但是TransportClient还有一个问题，底层的通信是怎么样的？我们紧接着分析Transport源码来解答这一疑问。</p><p>buildTemplate()方法中有这么一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Transport transport = networkModule.getTransportSupplier().get();</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 初始化TransportService</span></span><br><span class="line">            <span class="keyword">final</span> TransportService transportService = <span class="keyword">new</span> TransportService(settings, transport, threadPool,</span><br><span class="line">                networkModule.getTransportInterceptor(),</span><br><span class="line">                boundTransportAddress -&gt; DiscoveryNode.createLocal(settings, address, UUIDs.randomBase64UUID()), <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>这段代码就说明，节点间通信都是需要构造Transport实例，然后传递到TransportService当中来进行的。</p><h4 id="2-3-Transport源码分析"><a href="#2-3-Transport源码分析" class="headerlink" title="2.3 Transport源码分析"></a>2.3 Transport源码分析</h4><p>我们知道这个Transport是用来进行节点之间通信的核心类。无论是无论是集群状态信息，还是搜索索引请求信息，都是通过transport传送。transport实现一般有LocalTransport和NettyTransport两种，在NetworkModule中注册中可以通过node是local还是network的来判别使用哪一种transport，可以通过配置<code>transport.type</code>来决定。</p><p><img src="F:\hexo\source\images\es\Transport实现类.png" alt=":\hexo\source\images\es\Transport实现类.pn"></p><h5 id="2-3-1-TransportClient调用流程"><a href="#2-3-1-TransportClient调用流程" class="headerlink" title="2.3.1 TransportClient调用流程"></a>2.3.1 TransportClient调用流程</h5><p>通过transportService.start()方法，最终会进入到doStart()方法中，这个流程可以参考源码启动章节</p><p>我们来看看doStart()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        adapter.rxMetric.clear();</span><br><span class="line">        adapter.txMetric.clear();</span><br><span class="line">        transport.transportServiceAdapter(adapter);</span><br><span class="line">        <span class="comment">// 调用父类的start()方法</span></span><br><span class="line">        transport.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (transport.boundAddress() != <span class="keyword">null</span> &amp;&amp; logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(<span class="string">"&#123;&#125;"</span>, transport.boundAddress());</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, BoundTransportAddress&gt; entry : transport.profileBoundAddresses().entrySet()) &#123;</span><br><span class="line">                logger.info(<span class="string">"profile [&#123;&#125;]: &#123;&#125;"</span>, entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取节点</span></span><br><span class="line">        localNode = localNodeFactory.apply(transport.boundAddress());</span><br><span class="line">        <span class="comment">// 注册到injection中：这里的线程类型是SAME</span></span><br><span class="line">        registerRequestHandler(</span><br><span class="line">            HANDSHAKE_ACTION_NAME,</span><br><span class="line">            () -&gt; HandshakeRequest.INSTANCE,</span><br><span class="line">            ThreadPool.Names.SAME,</span><br><span class="line">            <span class="keyword">false</span>, <span class="keyword">false</span>,</span><br><span class="line">            (request, channel) -&gt; channel.sendResponse(</span><br><span class="line">                    <span class="keyword">new</span> HandshakeResponse(localNode, clusterName, localNode.getVersion())));</span><br><span class="line">        <span class="keyword">if</span> (connectToRemoteCluster) &#123;</span><br><span class="line">            <span class="comment">// here we start to connect to the remote clusters</span></span><br><span class="line">            remoteClusterService.initializeRemoteClusters();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>NettyTransport.doStart()方法：这个方法创建了Netty的一个客户端ClientBootstrap和一个服务器ServerBootstrap，因为节点之间要进行通信，所以这个节点既是客户端也是服务端。默认情况下客户端和服务端都会启动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建一个clientBootstrap</span></span><br><span class="line">            bootstrap = createBootstrap();</span><br><span class="line">            <span class="keyword">if</span> (NetworkService.NETWORK_SERVER.get(settings)) &#123;</span><br><span class="line">                <span class="keyword">final</span> Netty4OpenChannelsHandler openChannels = <span class="keyword">new</span> Netty4OpenChannelsHandler(logger);</span><br><span class="line">                <span class="keyword">this</span>.serverOpenChannels = openChannels;</span><br><span class="line">                <span class="comment">// loop through all profiles and start them up, special handling for default one</span></span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;String, Settings&gt; entry : buildProfileSettings().entrySet()) &#123;</span><br><span class="line">                    <span class="comment">// merge fallback settings with default settings with profile settings so we have complete settings with default values</span></span><br><span class="line">                    <span class="keyword">final</span> Settings settings = Settings.builder()</span><br><span class="line">                        .put(createFallbackSettings())</span><br><span class="line">                        .put(entry.getValue()).build();</span><br><span class="line">                    <span class="comment">// 创建一个ServerBootstrap</span></span><br><span class="line">                    createServerBootstrap(entry.getKey(), settings);</span><br><span class="line">                    bindServer(entry.getKey(), settings);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 调用TCPTransport的doStart()方法创建一个GENERIC类型的线程池</span></span><br><span class="line">            <span class="keyword">super</span>.doStart();</span><br><span class="line">            success = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (success == <span class="keyword">false</span>) &#123;</span><br><span class="line">                doStop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在transportService.dosStart()方法当中，会调用transport.start()，最终会调用NettyTransport.doStart()方法。</p><p>通过上面的分析，我们就可以知道，最终transport service中的transport实例落到了transport 模块上。transport模块分为local transport 和 netty transport。这里我们只看netty transport。</p><p>其他的流程跟这个大致相同，就不再分析了。</p><p>我们来分析一下这个NettyTransport类：</p><h5 id="2-3-2-Netty4Transport"><a href="#2-3-2-Netty4Transport" class="headerlink" title="2.3.2 Netty4Transport"></a>2.3.2 Netty4Transport</h5><p>分析这个类，我们要带着几个问题去看：</p><ul><li>怎么启动一个服务？</li><li>怎么去发送数据？</li><li>怎么接收数据？</li></ul><h6 id="2-3-2-1-类图"><a href="#2-3-2-1-类图" class="headerlink" title="2.3.2.1 类图"></a>2.3.2.1 类图</h6><p><img src="F:\hexo\source\images\es\Netty4Transport类图.png" alt=":\hexo\source\images\es\Netty4Transport类图.pn"></p><p>我们可以看到Netty4Transport继承了TcpTransport。</p><h6 id="2-3-2-2-配置信息"><a href="#2-3-2-2-配置信息" class="headerlink" title="2.3.2.2 配置信息"></a>2.3.2.2 配置信息</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// workerCount表示transport的总共的worker数目，由transport.netty.worker_count来配置</span></span><br><span class="line">    <span class="comment">// 默认值是32和Runtime.getRuntime().availableProcessors()中的最小值，也就是不能超过32</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Setting&lt;Integer&gt; WORKER_COUNT =</span><br><span class="line">        <span class="keyword">new</span> Setting&lt;&gt;(<span class="string">"transport.netty.worker_count"</span>,</span><br><span class="line">            (s) -&gt; Integer.toString(EsExecutors.boundedNumberOfProcessors(s) * <span class="number">2</span>),</span><br><span class="line">            (s) -&gt; Setting.parseInt(s, <span class="number">1</span>, <span class="string">"transport.netty.worker_count"</span>), Property.NodeScope, Property.Shared);</span><br><span class="line">    <span class="comment">// 最大</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Setting&lt;ByteSizeValue&gt; NETTY_MAX_CUMULATION_BUFFER_CAPACITY =</span><br><span class="line">        Setting.byteSizeSetting(</span><br><span class="line">                <span class="string">"transport.netty.max_cumulation_buffer_capacity"</span>,</span><br><span class="line">                <span class="keyword">new</span> ByteSizeValue(-<span class="number">1</span>),</span><br><span class="line">                Property.NodeScope,</span><br><span class="line">                Property.Shared);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Setting&lt;Integer&gt; NETTY_MAX_COMPOSITE_BUFFER_COMPONENTS =</span><br><span class="line">        Setting.intSetting(<span class="string">"transport.netty.max_composite_buffer_components"</span>, -<span class="number">1</span>, -<span class="number">1</span>, Property.NodeScope, Property.Shared);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Setting&lt;ByteSizeValue&gt; NETTY_RECEIVE_PREDICTOR_SIZE = Setting.byteSizeSetting(</span><br><span class="line">            <span class="string">"transport.netty.receive_predictor_size"</span>, <span class="keyword">new</span> ByteSizeValue(<span class="number">64</span>, ByteSizeUnit.KB), Property.NodeScope, Property.Shared);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Setting&lt;ByteSizeValue&gt; NETTY_RECEIVE_PREDICTOR_MIN =</span><br><span class="line">        byteSizeSetting(<span class="string">"transport.netty.receive_predictor_min"</span>, NETTY_RECEIVE_PREDICTOR_SIZE, Property.NodeScope, Property.Shared);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Setting&lt;ByteSizeValue&gt; NETTY_RECEIVE_PREDICTOR_MAX =</span><br><span class="line">        byteSizeSetting(<span class="string">"transport.netty.receive_predictor_max"</span>, NETTY_RECEIVE_PREDICTOR_SIZE, Property.NodeScope, Property.Shared);</span><br><span class="line">    <span class="comment">// Netty的boss线程池大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Setting&lt;Integer&gt; NETTY_BOSS_COUNT =</span><br><span class="line">        intSetting(<span class="string">"transport.netty.boss_count"</span>, <span class="number">1</span>, <span class="number">1</span>, Property.NodeScope, Property.Shared);</span><br></pre></td></tr></table></figure><h6 id="2-3-2-3-启动服务"><a href="#2-3-2-3-启动服务" class="headerlink" title="2.3.2.3 启动服务"></a>2.3.2.3 启动服务</h6><p>其实在TransportClient的调用流程中已经说明了怎么去启动一个Netty服务。主要是通过下面的这句话来启动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transportService.start();</span><br></pre></td></tr></table></figure><p>最终会调用到Netty4Transport的doStart()方法，在改方法中创建clientBootstrap和serverBootstrap.</p><p>客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Bootstrap <span class="title">createBootstrap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">        <span class="keyword">if</span> (TCP_BLOCKING_CLIENT.get(settings)) &#123;</span><br><span class="line">            bootstrap.group(<span class="keyword">new</span> OioEventLoopGroup(<span class="number">1</span>, daemonThreadFactory(settings, TRANSPORT_CLIENT_WORKER_THREAD_NAME_PREFIX)));</span><br><span class="line">            bootstrap.channel(OioSocketChannel.class);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            bootstrap.group(<span class="keyword">new</span> NioEventLoopGroup(workerCount, daemonThreadFactory(settings, TRANSPORT_CLIENT_BOSS_THREAD_NAME_PREFIX)));</span><br><span class="line">            bootstrap.channel(NioSocketChannel.class);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bootstrap.handler(getClientChannelInitializer());</span><br><span class="line"></span><br><span class="line">        bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, Math.toIntExact(defaultConnectionProfile.getConnectTimeout().millis()));</span><br><span class="line">        bootstrap.option(ChannelOption.TCP_NODELAY, TCP_NO_DELAY.get(settings));</span><br><span class="line">        bootstrap.option(ChannelOption.SO_KEEPALIVE, TCP_KEEP_ALIVE.get(settings));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ByteSizeValue tcpSendBufferSize = TCP_SEND_BUFFER_SIZE.get(settings);</span><br><span class="line">        <span class="keyword">if</span> (tcpSendBufferSize.getBytes() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            bootstrap.option(ChannelOption.SO_SNDBUF, Math.toIntExact(tcpSendBufferSize.getBytes()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ByteSizeValue tcpReceiveBufferSize = TCP_RECEIVE_BUFFER_SIZE.get(settings);</span><br><span class="line">        <span class="keyword">if</span> (tcpReceiveBufferSize.getBytes() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            bootstrap.option(ChannelOption.SO_RCVBUF, Math.toIntExact(tcpReceiveBufferSize.getBytes()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bootstrap.option(ChannelOption.RCVBUF_ALLOCATOR, recvByteBufAllocator);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> reuseAddress = TCP_REUSE_ADDRESS.get(settings);</span><br><span class="line">        bootstrap.option(ChannelOption.SO_REUSEADDR, reuseAddress);</span><br><span class="line"></span><br><span class="line">        bootstrap.validate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bootstrap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>服务端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createServerBootstrap</span><span class="params">(String name, Settings settings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"using profile[&#123;&#125;], worker_count[&#123;&#125;], port[&#123;&#125;], bind_host[&#123;&#125;], publish_host[&#123;&#125;], compress[&#123;&#125;], "</span></span><br><span class="line">                    + <span class="string">"connect_timeout[&#123;&#125;], connections_per_node[&#123;&#125;/&#123;&#125;/&#123;&#125;/&#123;&#125;/&#123;&#125;], receive_predictor[&#123;&#125;-&gt;&#123;&#125;]"</span>,</span><br><span class="line">                name, workerCount, settings.get(<span class="string">"port"</span>), settings.get(<span class="string">"bind_host"</span>), settings.get(<span class="string">"publish_host"</span>), compress,</span><br><span class="line">                defaultConnectionProfile.getConnectTimeout(),</span><br><span class="line">                defaultConnectionProfile.getNumConnectionsPerType(TransportRequestOptions.Type.RECOVERY),</span><br><span class="line">                defaultConnectionProfile.getNumConnectionsPerType(TransportRequestOptions.Type.BULK),</span><br><span class="line">                defaultConnectionProfile.getNumConnectionsPerType(TransportRequestOptions.Type.REG),</span><br><span class="line">                defaultConnectionProfile.getNumConnectionsPerType(TransportRequestOptions.Type.STATE),</span><br><span class="line">                defaultConnectionProfile.getNumConnectionsPerType(TransportRequestOptions.Type.PING),</span><br><span class="line">                receivePredictorMin, receivePredictorMax);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ThreadFactory workerFactory = daemonThreadFactory(<span class="keyword">this</span>.settings, TRANSPORT_SERVER_WORKER_THREAD_NAME_PREFIX, name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (TCP_BLOCKING_SERVER.get(settings)) &#123;</span><br><span class="line">            serverBootstrap.group(<span class="keyword">new</span> OioEventLoopGroup(workerCount, workerFactory));</span><br><span class="line">            serverBootstrap.channel(OioServerSocketChannel.class);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            serverBootstrap.group(<span class="keyword">new</span> NioEventLoopGroup(workerCount, workerFactory));</span><br><span class="line">            serverBootstrap.channel(NioServerSocketChannel.class);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        serverBootstrap.childHandler(getServerChannelInitializer(name, settings));</span><br><span class="line"></span><br><span class="line">        serverBootstrap.childOption(ChannelOption.TCP_NODELAY, TCP_NO_DELAY.get(settings));</span><br><span class="line">        serverBootstrap.childOption(ChannelOption.SO_KEEPALIVE, TCP_KEEP_ALIVE.get(settings));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ByteSizeValue tcpSendBufferSize = TCP_SEND_BUFFER_SIZE.getDefault(settings);</span><br><span class="line">        <span class="keyword">if</span> (tcpSendBufferSize != <span class="keyword">null</span> &amp;&amp; tcpSendBufferSize.getBytes() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            serverBootstrap.childOption(ChannelOption.SO_SNDBUF, Math.toIntExact(tcpSendBufferSize.getBytes()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ByteSizeValue tcpReceiveBufferSize = TCP_RECEIVE_BUFFER_SIZE.getDefault(settings);</span><br><span class="line">        <span class="keyword">if</span> (tcpReceiveBufferSize != <span class="keyword">null</span> &amp;&amp; tcpReceiveBufferSize.getBytes() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            serverBootstrap.childOption(ChannelOption.SO_RCVBUF, Math.toIntExact(tcpReceiveBufferSize.bytesAsInt()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        serverBootstrap.option(ChannelOption.RCVBUF_ALLOCATOR, recvByteBufAllocator);</span><br><span class="line">        serverBootstrap.childOption(ChannelOption.RCVBUF_ALLOCATOR, recvByteBufAllocator);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> reuseAddress = TCP_REUSE_ADDRESS.get(settings);</span><br><span class="line">        serverBootstrap.option(ChannelOption.SO_REUSEADDR, reuseAddress);</span><br><span class="line">        serverBootstrap.childOption(ChannelOption.SO_REUSEADDR, reuseAddress);</span><br><span class="line"></span><br><span class="line">        serverBootstrap.validate();</span><br><span class="line"></span><br><span class="line">        serverBootstraps.put(name, serverBootstrap);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="2-3-2-4-连接服务"><a href="#2-3-2-4-连接服务" class="headerlink" title="2.3.2.4 连接服务"></a>2.3.2.4 连接服务</h6><p>我们以UnicastZenPing的连接为例：</p><p>在Discovery启动以后，会发现新的节点，如果发现有新节点加入，则会在UnicastZenPing调用transportService.openConnection(node, connectionProfile)方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Transport.<span class="function">Connection <span class="title">openConnection</span><span class="params">(<span class="keyword">final</span> DiscoveryNode node, ConnectionProfile profile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (isLocalNode(node)) &#123;</span><br><span class="line">           <span class="keyword">return</span> localNodeConnection;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> transport.openConnection(node, profile);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>最终调用TcpTransport的openConnection方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> NodeChannels <span class="title">openConnection</span><span class="params">(DiscoveryNode node, ConnectionProfile connectionProfile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConnectTransportException(<span class="keyword">null</span>, <span class="string">"can't open connection to a null node"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line">        NodeChannels nodeChannels = <span class="keyword">null</span>;</span><br><span class="line">        connectionProfile = resolveConnectionProfile(connectionProfile, defaultConnectionProfile);</span><br><span class="line">        globalLock.readLock().lock(); <span class="comment">// ensure we don't open connections while we are closing</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ensureOpen();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                AtomicBoolean runOnce = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line">                Consumer&lt;Channel&gt; onClose = c -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// we can't assert that the channel is closed here since netty3 has a different behavior that doesn't</span></span><br><span class="line">                        <span class="comment">// consider a channel closed while it's close future is running.</span></span><br><span class="line">                        onChannelClosed(c);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="comment">// we only need to disconnect from the nodes once since all other channels</span></span><br><span class="line">                        <span class="comment">// will also try to run this we protect it from running multiple times.</span></span><br><span class="line">                        <span class="keyword">if</span> (runOnce.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                            disconnectFromNodeChannel(c, <span class="string">"channel closed"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">// 获取连接的Channel</span></span><br><span class="line">                nodeChannels = connectToChannels(node, connectionProfile, onClose);</span><br><span class="line">                <span class="keyword">final</span> Channel channel = nodeChannels.getChannels().get(<span class="number">0</span>); <span class="comment">// one channel is guaranteed by the connection profile</span></span><br><span class="line">                <span class="keyword">final</span> TimeValue connectTimeout = connectionProfile.getConnectTimeout() == <span class="keyword">null</span> ?</span><br><span class="line">                    defaultConnectionProfile.getConnectTimeout() :</span><br><span class="line">                    connectionProfile.getConnectTimeout();</span><br><span class="line">                <span class="keyword">final</span> TimeValue handshakeTimeout = connectionProfile.getHandshakeTimeout() == <span class="keyword">null</span> ?</span><br><span class="line">                    connectTimeout : connectionProfile.getHandshakeTimeout();</span><br><span class="line">                <span class="comment">// 处理数据</span></span><br><span class="line">                <span class="keyword">final</span> Version version = executeHandshake(node, channel, handshakeTimeout);</span><br><span class="line">                <span class="keyword">if</span> (version != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// if we are talking to a pre 5.2 node we won't be able to retrieve the version since it doesn't implement the handshake</span></span><br><span class="line">                    <span class="comment">// we do since 5.2 - in this case we just go with the version provided by the node.</span></span><br><span class="line">                    nodeChannels = <span class="keyword">new</span> NodeChannels(nodeChannels, version); <span class="comment">// clone the channels - we now have the correct version</span></span><br><span class="line">                &#125;</span><br><span class="line">                transportServiceAdapter.onConnectionOpened(nodeChannels);</span><br><span class="line">                openConnections.add(nodeChannels);</span><br><span class="line">                success = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">return</span> nodeChannels;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ConnectTransportException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// ConnectTransportExceptions are handled specifically on the caller end - we wrap the actual exception to ensure</span></span><br><span class="line">                <span class="comment">// only relevant exceptions are logged on the caller end.. this is the same as in connectToNode</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConnectTransportException(node, <span class="string">"general node connection failure"</span>, e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (success == <span class="keyword">false</span>) &#123;</span><br><span class="line">                        IOUtils.closeWhileHandlingException(nodeChannels);</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            globalLock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>实质就是创建Netty中的Channel，一个连接就是第一个Channel，根据之前所说的会有多个类型的连接会创。</p><h6 id="2-3-2-5-发送数据"><a href="#2-3-2-5-发送数据" class="headerlink" title="2.3.2.5 发送数据"></a>2.3.2.5 发送数据</h6><p>先了解发送类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RECOVERY：做数据恢复recovery，默认个数2个；</span><br><span class="line">BULK：做数据恢复recovery，默认个数2个；</span><br><span class="line">REG：典型的搜索和单doc索引，默认个数6个</span><br><span class="line">STATE：如集群state的发送等，默认个数1个</span><br><span class="line">PING：是node之间的ping。默认个数1个</span><br></pre></td></tr></table></figure><p>怎么获取Channel？在TransportService的sendRequest方法会传入一个参数options，是TransportRequestOptions的实例，包含三个属性：timeout(超时时间)、compress(是否压缩)、type(发送的类型，即上面说的五个之一)，根据需要发送数据的节点和发送的类型（上面五大类型）获得到对应的channel，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> &lt;T extends TransportResponse&gt; <span class="function"><span class="keyword">void</span> <span class="title">sendRequest</span><span class="params">(<span class="keyword">final</span> Transport.Connection connection, <span class="keyword">final</span> String action,<span class="keyword">final</span> TransportRequest request,<span class="keyword">final</span> TransportRequestOptions options,TransportResponseHandler&lt;T&gt; handler)</span> </span>&#123;</span><br><span class="line">        asyncSender.sendRequest(connection, action, request, options, handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.asyncSender = interceptor.interceptSender(<span class="keyword">this</span>::sendRequestInternal);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> &lt;T extends TransportResponse&gt; <span class="function"><span class="keyword">void</span> <span class="title">sendRequestInternal</span><span class="params">(<span class="keyword">final</span> Transport.Connection connection, <span class="keyword">final</span> String action,<span class="keyword">final</span> TransportRequest request,<span class="keyword">final</span> TransportRequestOptions options,TransportResponseHandler&lt;T&gt; handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"can't send request to a null connection"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        DiscoveryNode node = connection.getNode();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> requestId = transport.newRequestId();</span><br><span class="line">        <span class="keyword">final</span> TimeoutHandler timeoutHandler;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (options.timeout() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                timeoutHandler = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                timeoutHandler = <span class="keyword">new</span> TimeoutHandler(requestId);</span><br><span class="line">            &#125;</span><br><span class="line">            Supplier&lt;ThreadContext.StoredContext&gt; storedContextSupplier = threadPool.getThreadContext().newRestorableContext(<span class="keyword">true</span>);</span><br><span class="line">            TransportResponseHandler&lt;T&gt; responseHandler = <span class="keyword">new</span> ContextRestoreResponseHandler&lt;&gt;(storedContextSupplier, handler);</span><br><span class="line">            clientHandlers.put(requestId, <span class="keyword">new</span> RequestHolder&lt;&gt;(responseHandler, connection, action, timeoutHandler));</span><br><span class="line">            <span class="keyword">if</span> (lifecycle.stoppedOrClosed()) &#123;</span><br><span class="line">                <span class="comment">// if we are not started the exception handling will remove the RequestHolder again and calls the handler to notify</span></span><br><span class="line">                <span class="comment">// the caller. It will only notify if the toStop code hasn't done the work yet.</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TransportException(<span class="string">"TransportService is closed stopped can't send request"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (timeoutHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">assert</span> options.timeout() != <span class="keyword">null</span>;</span><br><span class="line">                timeoutHandler.future = threadPool.schedule(options.timeout(), ThreadPool.Names.GENERIC, timeoutHandler);</span><br><span class="line">            &#125;</span><br><span class="line">            connection.sendRequest(requestId, action, request, options); <span class="comment">// local node optimization happens upstream</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception e) &#123;</span><br><span class="line">            <span class="comment">// usually happen either because we failed to connect to the node</span></span><br><span class="line">            <span class="comment">// or because we failed serializing the message</span></span><br><span class="line">            <span class="keyword">final</span> RequestHolder holderToNotify = clientHandlers.remove(requestId);</span><br><span class="line">            <span class="comment">// If holderToNotify == null then handler has already been taken care of.</span></span><br><span class="line">            <span class="keyword">if</span> (holderToNotify != <span class="keyword">null</span>) &#123;</span><br><span class="line">                holderToNotify.cancelTimeout();</span><br><span class="line">                <span class="comment">// callback that an exception happened, but on a different thread since we don't</span></span><br><span class="line">                <span class="comment">// want handlers to worry about stack overflows</span></span><br><span class="line">                <span class="keyword">final</span> SendRequestTransportException sendRequestException = <span class="keyword">new</span> SendRequestTransportException(node, action, e);</span><br><span class="line">                threadPool.executor(ThreadPool.Names.GENERIC).execute(<span class="keyword">new</span> AbstractRunnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRejection</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// if we get rejected during node shutdown we don't wanna bubble it up</span></span><br><span class="line">                        logger.debug(</span><br><span class="line">                            (Supplier&lt;?&gt;) () -&gt; <span class="keyword">new</span> ParameterizedMessage(</span><br><span class="line">                                <span class="string">"failed to notify response handler on rejection, action: &#123;&#125;"</span>,</span><br><span class="line">                                holderToNotify.action()),</span><br><span class="line">                            e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                        logger.warn(</span><br><span class="line">                            (Supplier&lt;?&gt;) () -&gt; <span class="keyword">new</span> ParameterizedMessage(</span><br><span class="line">                                <span class="string">"failed to notify response handler on exception, action: &#123;&#125;"</span>,</span><br><span class="line">                                holderToNotify.action()),</span><br><span class="line">                            e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRun</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        holderToNotify.handler().handleException(sendRequestException);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.debug(<span class="string">"Exception while sending request, handler likely already notified due to timeout"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="2-3-2-6-数据写入"><a href="#2-3-2-6-数据写入" class="headerlink" title="2.3.2.6 数据写入"></a>2.3.2.6 数据写入</h6><p>之后数据该压缩的压缩（压缩方法在CompressorFactory中实现），并写入version和action；</p><p>在openConnection方法中，通过调用executeHandshake()方法处理数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Version version = executeHandshake(node, channel, handshakeTimeout);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Version <span class="title">executeHandshake</span><span class="params">(DiscoveryNode node, Channel channel, TimeValue timeout)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        numHandshakes.inc();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> requestId = newRequestId();</span><br><span class="line">        <span class="keyword">final</span> HandshakeResponseHandler handler = <span class="keyword">new</span> HandshakeResponseHandler(channel);</span><br><span class="line">        AtomicReference&lt;Version&gt; versionRef = handler.versionRef;</span><br><span class="line">        AtomicReference&lt;Exception&gt; exceptionRef = handler.exceptionRef;</span><br><span class="line">        pendingHandshakes.put(requestId, handler);</span><br><span class="line">        <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isOpen(channel) == <span class="keyword">false</span>) &#123;</span><br><span class="line">                <span class="comment">// we have to protect us here since sendRequestToChannel won't barf if the channel is closed.</span></span><br><span class="line">                <span class="comment">// it's weird but to change it will cause a lot of impact on the exception handling code all over the codebase.</span></span><br><span class="line">                <span class="comment">// yet, if we don't check the state here we might have registered a pending handshake handler but the close</span></span><br><span class="line">                <span class="comment">// listener calling #onChannelClosed might have already run and we are waiting on the latch below unitl we time out.</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"handshake failed, channel already closed"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// for the request we use the minCompatVersion since we don't know what's the version of the node we talk to</span></span><br><span class="line">            <span class="comment">// we also have no payload on the request but the response will contain the actual version of the node we talk</span></span><br><span class="line">            <span class="comment">// to as the payload.</span></span><br><span class="line">            <span class="keyword">final</span> Version minCompatVersion = getCurrentVersion().minimumCompatibilityVersion();</span><br><span class="line">            <span class="comment">// 调用该方法发送数据</span></span><br><span class="line">            sendRequestToChannel(node, channel, requestId, HANDSHAKE_ACTION_NAME, TransportRequest.Empty.INSTANCE,</span><br><span class="line">                TransportRequestOptions.EMPTY, minCompatVersion, TransportStatus.setHandshake((<span class="keyword">byte</span>)<span class="number">0</span>));</span><br><span class="line">            <span class="keyword">if</span> (handler.latch.await(timeout.millis(), TimeUnit.MILLISECONDS) == <span class="keyword">false</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConnectTransportException(node, <span class="string">"handshake_timeout["</span> + timeout + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            success = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (handler.handshakeNotSupported.get()) &#123;</span><br><span class="line">                <span class="comment">// this is a BWC layer, if we talk to a pre 5.2 node then the handshake is not supported</span></span><br><span class="line">                <span class="comment">// this will go away in master once it's all ported to 5.2 but for now we keep this to make</span></span><br><span class="line">                <span class="comment">// the backport straight forward</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (exceptionRef.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"handshake failed"</span>, exceptionRef.get());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Version version = versionRef.get();</span><br><span class="line">                <span class="keyword">if</span> (getCurrentVersion().isCompatible(version) == <span class="keyword">false</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Received message from unsupported version: ["</span> + version</span><br><span class="line">                        + <span class="string">"] minimal compatible version is: ["</span> + getCurrentVersion().minimumCompatibilityVersion() + <span class="string">"]"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> version;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> TransportResponseHandler&lt;?&gt; removedHandler = pendingHandshakes.remove(requestId);</span><br><span class="line">            <span class="comment">// in the case of a timeout or an exception on the send part the handshake has not been removed yet.</span></span><br><span class="line">            <span class="comment">// but the timeout is tricky since it's basically a race condition so we only assert on the success case.</span></span><br><span class="line">            <span class="keyword">assert</span> success &amp;&amp; removedHandler == <span class="keyword">null</span> || success == <span class="keyword">false</span> : <span class="string">"handler for requestId ["</span> + requestId + <span class="string">"] is not been removed"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们来看sendRequestToChannel方法：写入request信息，通过ChannelBuffers创建出buffer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendRequestToChannel</span><span class="params">(DiscoveryNode node, <span class="keyword">final</span> Channel targetChannel, <span class="keyword">final</span> <span class="keyword">long</span> requestId, <span class="keyword">final</span> String action,<span class="keyword">final</span> TransportRequest request, TransportRequestOptions options, Version channelVersion,<span class="keyword">byte</span> status)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">        TransportException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (compress) &#123;</span><br><span class="line">            options = TransportRequestOptions.builder(options).withCompress(<span class="keyword">true</span>).build();</span><br><span class="line">        &#125;</span><br><span class="line">        status = TransportStatus.setRequest(status);</span><br><span class="line">        ReleasableBytesStreamOutput bStream = <span class="keyword">new</span> ReleasableBytesStreamOutput(bigArrays);</span><br><span class="line">        <span class="keyword">boolean</span> addedReleaseListener = <span class="keyword">false</span>;</span><br><span class="line">        StreamOutput stream = Streams.flushOnCloseStream(bStream);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// only compress if asked, and, the request is not bytes, since then only</span></span><br><span class="line">            <span class="comment">// the header part is compressed, and the "body" can't be extracted as compressed</span></span><br><span class="line">            <span class="keyword">if</span> (options.compress() &amp;&amp; canCompress(request)) &#123;</span><br><span class="line">                status = TransportStatus.setCompress(status);</span><br><span class="line">                <span class="comment">// 对数据做压缩</span></span><br><span class="line">                stream = CompressorFactory.COMPRESSOR.streamOutput(stream);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// we pick the smallest of the 2, to support both backward and forward compatibility</span></span><br><span class="line">            <span class="comment">// note, this is the only place we need to do this, since from here on, we use the serialized version</span></span><br><span class="line">            <span class="comment">// as the version to use also when the node receiving this request will send the response with</span></span><br><span class="line">            <span class="comment">// 写入Version信息</span></span><br><span class="line">            Version version = Version.min(getCurrentVersion(), channelVersion);</span><br><span class="line"></span><br><span class="line">            stream.setVersion(version);</span><br><span class="line">            threadPool.getThreadContext().writeTo(stream);</span><br><span class="line">            stream.writeString(action);</span><br><span class="line">            BytesReference message = buildMessage(requestId, status, node.getVersion(), request, stream, bStream);</span><br><span class="line">            <span class="keyword">final</span> TransportRequestOptions finalOptions = options;</span><br><span class="line">            <span class="keyword">final</span> StreamOutput finalStream = stream;</span><br><span class="line">            Runnable onRequestSent = () -&gt; &#123; <span class="comment">// this might be called in a different thread</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    IOUtils.closeWhileHandlingException(finalStream, bStream);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    transportServiceAdapter.onRequestSent(node, requestId, action, request, finalOptions);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            addedReleaseListener = internalSendMessage(targetChannel, message, onRequestSent);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IOUtils.close(stream);</span><br><span class="line">            <span class="keyword">if</span> (!addedReleaseListener) &#123;</span><br><span class="line">                IOUtils.close(stream, bStream);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="2-3-2-7-数据接收"><a href="#2-3-2-7-数据接收" class="headerlink" title="2.3.2.7 数据接收"></a>2.3.2.7 数据接收</h6><p>启动服务中的channelPipeline注册，统一的handler为MessageChannelHandler，负责消息接受及处理逻辑，在其他模块中会对不同的消息（Action）注册对应的处理程序（handler）。</p><p>在Netty4Transport的createBootstrap()方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">bootstrap.handler(getClientChannelInitializer());</span><br><span class="line"></span><br><span class="line">。。。</span><br><span class="line"><span class="function"><span class="keyword">protected</span> ChannelHandler <span class="title">getClientChannelInitializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClientChannelInitializer();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientChannelInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">Channel</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(Channel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            ch.pipeline().addLast(<span class="string">"size"</span>, <span class="keyword">new</span> Netty4SizeHeaderFrameDecoder());</span><br><span class="line">            <span class="comment">// using a dot as a prefix means this cannot come from any settings parsed</span></span><br><span class="line">            ch.pipeline().addLast(<span class="string">"dispatcher"</span>, <span class="keyword">new</span> Netty4MessageChannelHandler(Netty4Transport.<span class="keyword">this</span>, <span class="string">".client"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            Netty4Utils.maybeDie(cause);</span><br><span class="line">            <span class="keyword">super</span>.exceptionCaught(ctx, cause);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在Netty4Transport的createServerBootstrap()方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">serverBootstrap.childHandler(getServerChannelInitializer(name, settings));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ChannelHandler <span class="title">getServerChannelInitializer</span><span class="params">(String name, Settings settings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerChannelInitializer(name, settings);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="title">ServerChannelInitializer</span><span class="params">(String name, Settings settings)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.settings = settings;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(Channel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            ch.pipeline().addLast(<span class="string">"open_channels"</span>, Netty4Transport.<span class="keyword">this</span>.serverOpenChannels);</span><br><span class="line">            ch.pipeline().addLast(<span class="string">"size"</span>, <span class="keyword">new</span> Netty4SizeHeaderFrameDecoder());</span><br><span class="line">            ch.pipeline().addLast(<span class="string">"dispatcher"</span>, <span class="keyword">new</span> Netty4MessageChannelHandler(Netty4Transport.<span class="keyword">this</span>, name));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>可以看到在ClientBootStrap和ServerBootStrap中都注册了消息处理的类 MessageChannelHandler：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipeline.addLast(<span class="string">"dispatcher"</span>, <span class="keyword">new</span> MessageChannelHandler(NettyTransport.<span class="keyword">this</span>, logger));</span><br></pre></td></tr></table></figure><p>MessageChannelHandler类负责消息接受及处理逻辑，在其他模块中会对不同的消息（Action）注册对应的处理程序（handler）。在对收到的内容进行解析的过程中获取到action，找到对应的handler进行处理，这个过程会交给threadpool中的线程来操作。</p><p>比如SearchAction的注册代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transportService.registerHandler(SearchAction.NAME, <span class="keyword">new</span> TransportHandler());</span><br></pre></td></tr></table></figure><p>在TcpTransport中的messageReceived方法则是负责消息的接收。</p><p>至此，Transport模块我们分析完成了。</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过上一篇对Elasticsearch Discovery的分析，我们知道了ES Discovery的主要是用来做发现协议的，它包含了master选举、集群状态更新等功能，而在这一过程当中也依赖了Transport模块，但是我们一直没有谈论，本篇着重来分析Transport
      
    
    </summary>
    
      <category term="Elasticsearch源码分析专题" scheme="https://grezhang.github.io/categories/Elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="elasticsearch" scheme="https://grezhang.github.io/tags/elasticsearch/"/>
    
      <category term="源码分析" scheme="https://grezhang.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch源码分析(三)Discover模块</title>
    <link href="https://grezhang.github.io/2018/05/27/ElasticSearch/elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E4%B8%89)--Discover%E6%A8%A1%E5%9D%97/"/>
    <id>https://grezhang.github.io/2018/05/27/ElasticSearch/elasticsearch源码分析(三)--Discover模块/</id>
    <published>2018-05-27T04:12:57.000Z</published>
    <updated>2018-07-02T02:01:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过上一篇对Elasticsearch启动的分析，我们知道了ES启动的大致流程，还遗留下几个问题</p><ul><li>master选举是在什么模块进行的</li><li>ES集群是如何进行Master选举的？</li><li>ES是如何维护这些节点的？</li><li>Discovery模块是如何运作的？</li></ul><p>要想进行Master选举，必然要有一套算法机制，以及节点之前的通信连接、判断节点存活状态等。</p><p>通过查阅官网资料，我们知道这些功能是在Elasticsearch的发现协议Discovery里面进行的，在官网上，Elasticsearch的Discovery Module有下面几种实现：</p><ul><li><p>Azure Classic Discovery：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-discovery-azure-classic.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-discovery-azure-classic.html</a></p></li><li><p>EC2 Discovery：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-discovery-ec2.html#modules-discovery-ec2" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-discovery-ec2.html#modules-discovery-ec2</a></p></li><li><p>Google Compute Engine Discovery：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-discovery-gce.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-discovery-gce.html</a></p></li><li><p>Zen Discovery：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-discovery-zen.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-discovery-zen.html</a></p><p>​</p></li></ul><h4 id="一、Zen-Discovery模块介绍"><a href="#一、Zen-Discovery模块介绍" class="headerlink" title="一、Zen Discovery模块介绍"></a>一、Zen Discovery模块介绍</h4><p>这里基本上是官网的翻译，建议还是查看官网文档，翻译不准。。。</p><p>Zen Discovery是内置在elasticsearch的默认发现模块。它提供单播发现，但可扩展到支持云环境和其他形式的发现。</p><p>禅发现集成了其它模块，例如，节点之间的所有通信是使用transport模块。</p><p>它被分离成多个子模块，其解释如下：</p><h5 id="1-1-Ping"><a href="#1-1-Ping" class="headerlink" title="1.1 Ping"></a>1.1 Ping</h5><p>这是一个节点使用发现机制来查找其他节点的过程。</p><h5 id="1-2-Unicast"><a href="#1-2-Unicast" class="headerlink" title="1.2 Unicast"></a>1.2 Unicast</h5><p>单播发现需要一个主机列表，用于将作为GossipRouter。这些宿主可被指定为主机名或IP地址;指定主机名的主机每一轮Ping过程中解析为IP地址。请注意，如果您处于DNS解析度随时间变化的环境中，则可能需要调整<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/networkaddress-cache-ttl.html" title="Title" target="_blank" rel="noopener">JVM安全设置</a>。</p><p>建议将单播主机列表维护为集群中符合主节点的节点列表。</p><p>单播发现提供以下设置和<code>discovery.zen.ping.unicast</code>前缀：</p><table><thead><tr><th>设置</th><th>描述</th></tr></thead><tbody><tr><td><code>hosts</code></td><td>数组设置或逗号分隔的设置。每个值的形式应该是<code>host:port</code>或<code>host</code>（如果没有设置，<code>port</code>默认设置会<code>transport.profiles.default.port</code> 回落到<code>transport.tcp.port</code>）。请注意，IPv6主机必须放在括号内。默认为<code>127.0.0.1, [::1]</code></td></tr><tr><td><code>hosts.resolve_timeout</code></td><td>在每轮ping中等待DNS查找的时间量。指定为 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/common-options.html#time-units" target="_blank" rel="noopener">时间单位</a>。默认为5秒。</td></tr></tbody></table><p>单播发现使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/modules-transport.html" target="_blank" rel="noopener">传输</a>模块执行发现。</p><h5 id="1-3-master选举"><a href="#1-3-master选举" class="headerlink" title="1.3 master选举"></a>1.3 master选举</h5><p>作为Ping过程的一部分，集群的主节点要么当选要么加入假期。这是自动完成的。ping的默认超时为3秒</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">discovery.zen.ping_timeout（默认为3s）</span><br></pre></td></tr></table></figure><p>如果在超时后没有做出决定，则重新启动ping程序。在缓慢或拥塞的网络中，在作出选举决定之前，三秒可能不足以让节点意识到其环境中的其他节点。在这种情况下，应该谨慎地增加超时时间，因为这会减慢选举进程。一旦一个节点决定加入一个现有的已形成的集群，它将发送一个加入请求给主设备（<code>discovery.zen.join_timeout</code>）的超时默认值是ping超时的20倍。</p><p>当主节点停止或遇到问题时，群集节点会再次启动ping并选择新的主节点。这种ping测试也可以作为防止（部分）网络故障的保护，其中一个节点可能会不公正地认为主站发生故障。在这种情况下，节点将简单地从其他节点听到关于当前活动的主节点的信息。</p><p>如果<code>discovery.zen.master_election.ignore_non_master_pings</code>是<code>true</code>，没有参与资格（节点，其中节点坪<code>node.master</code>是<code>false</code>）的主选期间忽略; 默认值是 <code>false</code>。</p><p>可以通过设置<code>node.master</code>来排除节点成为主节点<code>false</code>。</p><p>该<code>discovery.zen.minimum_master_nodes</code>套需要加入新当选主为了选举完成并当选节点接受其主控权掌握合格节点的最小数量。相同的设置控制应该成为任何活动集群一部分的活动主节点合格节点的最小数量。如果不满足这个要求，活动的主节点将下台，新的主节点选举将开始。</p><p>此设置必须设置为您的主要合格节点的<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/important-settings.html#minimum_master_nodes" target="_blank" rel="noopener">法定人数</a>。建议避免只有两个主节点，因为两个法定人数是两个。因此，任何主节点的损失都将导致无法运行的群集。</p><h5 id="1-4-故障检测"><a href="#1-4-故障检测" class="headerlink" title="1.4 故障检测"></a>1.4 故障检测</h5><p>有两个故障检测进程正在运行。第一种方法是通过主设备对群集中的所有其他节点进行ping操作，并验证它们是否处于活动状态。另一方面，每个节点都会主动确认它是否仍然存在或需要启动选举过程。</p><p>以下设置使用<code>discovery.zen.fd</code>前缀控制故障检测过程 ：</p><table><thead><tr><th>设置</th><th>描述</th></tr></thead><tbody><tr><td><code>ping_interval</code></td><td>一个节点多久发作一次。默认为<code>1s</code>。</td></tr><tr><td><code>ping_timeout</code></td><td>等待ping响应需要多长时间，默认为 <code>30s</code>。</td></tr><tr><td><code>ping_retries</code></td><td>有多少ping故障/超时会导致节点被视为失败。默认为<code>3</code>。</td></tr></tbody></table><h5 id="1-5-群集状态更新Cluster-state-updates"><a href="#1-5-群集状态更新Cluster-state-updates" class="headerlink" title="1.5 群集状态更新Cluster state updates"></a>1.5 群集状态更新Cluster state updates</h5><p>主节点是群集中，可以使改变集群状态的唯一节点。主节点一次处理一个集群状态更新，状态改变和发布更新的到集群中的所有其他节点。每个节点接收发布消息，确认它，但还没有立即应用它。如果主节点没有接收来自节点确认的数量至少为discovery.zen.minimum_master_nodes，在时间（由受控discovery.zen.commit_timeout设置，默认值为30秒）内。节点集群状态改变被拒绝。</p><p>一旦足够的节点已作出回应，集群状态改变被提交然后消息将被发送到所有结点。然后节点然后进行新的群集状态适用于他们的内部状态。主节点等待所有节点响应，在去队列处理下一个状态更新之前，直到超时，超时时间是在discovery.zen.publish_timeout默认情况下设置为30秒，时间从发布开始时测量h超时设置可以通过动态的改变集群更新设置API</p><h5 id="1-6-无主块No-master-block"><a href="#1-6-无主块No-master-block" class="headerlink" title="1.6 无主块No master block"></a>1.6 无主块No master block</h5><p>要使群集完全可操作，它必须具有活动的主节点和一些有主资格的节点，并且主资格的节点必须满足的数目必须满足<code>discovery.zen.minimum_master_nodes</code>设置的值。如果设置 <code>discovery.zen.no_master_block</code> ，那么设置控制在没有活动的主设备时应拒绝哪些操作。</p><p>该<code>discovery.zen.no_master_block</code>设置有两个有效选项：</p><table><thead><tr><th><code>all</code></th><th>节点上的所有操作（即读取和写入操作）都将被拒绝。这也适用于api集群状态读取或写入操作，如get索引设置，put映射和集群状态api。</th></tr></thead><tbody><tr><td><code>write</code></td><td>（默认）写入操作将被拒绝。基于最后一次已知的群集配置，读取操作将成功。这可能会导致部分读取过时的数据，因为此节点可能与群集的其余部分隔离。</td></tr></tbody></table><p>该<code>discovery.zen.no_master_block</code>设置不适用于基于节点的apis（例如，群集统计信息，节点信息和节点统计信息apis）。对这些apis的请求不会被阻止，并且可以在任何可用的节点上运行。</p><h5 id="1-7-Fault-Delection"><a href="#1-7-Fault-Delection" class="headerlink" title="1.7 Fault Delection"></a>1.7 Fault Delection</h5><p>用ping的方式来确定node是否在集群里面</p><h4 id="二、Discovery源码分析"><a href="#二、Discovery源码分析" class="headerlink" title="二、Discovery源码分析"></a>二、Discovery源码分析</h4><h5 id="2-1-Discovery类图"><a href="#2-1-Discovery类图" class="headerlink" title="2.1 Discovery类图"></a>2.1 Discovery类图</h5><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/ZenDiscovery%E7%B1%BB%E5%9B%BE.png" alt=":\hexo\source\images\es\ZenDiscovery类图.pn"></p><h5 id="2-2-与Discovery相关的几个类"><a href="#2-2-与Discovery相关的几个类" class="headerlink" title="2.2 与Discovery相关的几个类"></a>2.2 与Discovery相关的几个类</h5><p>ZenDiscovery.java 模块的主类，也是启动这个模块的入口，由Node.java调用并初始化，几乎涵盖了全部的发现协议的逻辑，是一个高度内聚了类，它有一些成员变量，需要明白他们的意思：</p><ul><li>pingTimeout：取自discovery.zen.ping_timeout（默认为3s）允许调整选举时间来处理网络慢或拥塞的情况（更高的值确保更少的失败机会）</li><li>joinTimeout：取自discovery.zen.join_timeout（默认值为ping超时的20倍）。当一个新的node加入集群时，将会发个join的request到master，这个request的timeout即joinTimeout。</li><li>joinRetryAttempts：join重试的次数，默认为3次。</li><li>joinRetryDelay：重试的间隔，默认为100ms。</li><li>maxPingsFromAnotherMaster：容忍其他master发出的,在强制其他或是本地master rejoin之前的次数。</li><li>masterElectionIgnoreNonMasters：用来控制在主节点选举时候的ping响应，只有在极端情况下才会使用这个参数，平时一般不用配置，默认值为false</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">有人说，选举master时，node.master为false的节点的投票是不起作用的，这个说法不完全正确：如果discovery.zen.master_election.ignore_non_master_pings设置为true，那么以上说法正确，但是默认是false，也就是说，它们的投票是起作用的，只是它们不可能成为master。所以我觉得，集群机器数不大的话，除了负担特别重的机器，都设置为node.master为true比较妥当。</span></span><br><span class="line"></span><br><span class="line"><span class="string">设置需要加入新一轮master选举的“master”候选人的最小数量</span></span><br><span class="line"><span class="string">也就是说，集群中，该值是针对那些node.master=true的来设置的，建议&gt;=num(node.master=true)/2+1.并不是有的朋友解释的，集群机器数量的除以2再加1，当然默认情况下是，因为默认情况下，discovery.zen.master_election.ignore_non_master_pings为false</span></span><br></pre></td></tr></table></figure><ul><li>masterElectionWaitForJoinsTimeout：master选举时等待join的timeout,默认是joinTimeout的一半。</li></ul><p>其中joinRetryAttempts和maxPingsFromAnotherMaster是一定要大于等于1的。</p><p>UnicastZenPing.java 是一个ZenPing 实现类，主要是负责底层和其他Nodes建立并维护连接的任务</p><p>PublishClusterStateAction.java 在<code>ZenDiscovery</code>中的变量名是<code>publishClusterState</code>，之前讲过，这些<code>**Action</code> 都是对<code>**Service</code>的封装，因此它主要是用来处理发送事件和处理事件的接口，比如发送一个<code>clusterStateChangeEvent</code> 和处理这个event，都是通过这个类调用</p><p>MasterFaultDetection.java 构建完cluster后所有的node用来检测master存活状态的类</p><p>NodeFaultDetection.java 构建完cluster后master用来检测其他node存活状态的类</p><h5 id="2-3-如何运行"><a href="#2-3-如何运行" class="headerlink" title="2.3 如何运行"></a>2.3 如何运行</h5><p>我们通过上一篇的分析知道，在ES启动的时候会去实例化Node，然后调用Node#start()方法启动各个module，Discovery是在实例化Node的时候通过guice进行注入的，在Node启动的时候去启动的，代码如下：</p><p>Node的构造函数中实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">final</span> DiscoveryModule discoveryModule = <span class="keyword">new</span> DiscoveryModule(<span class="keyword">this</span>.settings, threadPool, transportService,</span><br><span class="line">                namedWriteableRegistry, networkService, clusterService, pluginsService.filterPlugins(DiscoveryPlugin.class));</span><br><span class="line">...</span><br><span class="line">b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery());</span><br></pre></td></tr></table></figure><h6 id="2-3-1-ZenDiscover的初始化"><a href="#2-3-1-ZenDiscover的初始化" class="headerlink" title="2.3.1 ZenDiscover的初始化"></a>2.3.1 ZenDiscover的初始化</h6><p>初始化的时候会加载我上段ZenDiscovery模块介绍提到的几个模块，我就不再重复了，值得注意的是Fault Delection的分为两个masterFD和nodesFD；其次还加载了一些对于discover的配置</p><h6 id="2-3-2-ZenDiscovery运行"><a href="#2-3-2-ZenDiscovery运行" class="headerlink" title="2.3.2 ZenDiscovery运行"></a>2.3.2 ZenDiscovery运行</h6><p>其实ZenDiscover的运行就是几个子模块的运行；它是通过Node#start()方法启动的。</p><p>在Node#start()方法中：我们可以看到Discovery相关的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Discovery discovery = injector.getInstance(Discovery.class);</span><br><span class="line">clusterService.setDiscoverySettings(discovery.getDiscoverySettings());</span><br><span class="line">clusterService.addInitialStateBlock(discovery.getDiscoverySettings().getNoMasterBlock());</span><br><span class="line">clusterService.setClusterStatePublisher(discovery::publish);</span><br><span class="line">...</span><br><span class="line"> <span class="comment">// start after cluster service so the local disco is known</span></span><br><span class="line">  discovery.start();</span><br><span class="line">  transportService.acceptIncomingRequests();</span><br><span class="line">  <span class="comment">// 核心方法</span></span><br><span class="line">  discovery.startInitialJoin();</span><br></pre></td></tr></table></figure><p>在DiscoveryModule类中，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> Map&lt;String, Supplier&lt;Discovery&gt;&gt; discoveryTypes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        discoveryTypes.put(<span class="string">"zen"</span>,</span><br><span class="line">            () -&gt; <span class="keyword">new</span> ZenDiscovery(settings, threadPool, transportService, namedWriteableRegistry, clusterService, hostsProvider));</span><br><span class="line">        discoveryTypes.put(<span class="string">"none"</span>, () -&gt; <span class="keyword">new</span> NoneDiscovery(settings, clusterService, clusterService.getClusterSettings()));</span><br><span class="line">        discoveryTypes.put(<span class="string">"single-node"</span>, () -&gt; <span class="keyword">new</span> SingleNodeDiscovery(settings, clusterService));</span><br><span class="line">        <span class="keyword">for</span> (DiscoveryPlugin plugin : plugins) &#123;</span><br><span class="line">            plugin.getDiscoveryTypes(threadPool, transportService, namedWriteableRegistry,</span><br><span class="line">                clusterService, hostsProvider).entrySet().forEach(entry -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (discoveryTypes.put(entry.getKey(), entry.getValue()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot register discovery type ["</span> + entry.getKey() + <span class="string">"] twice"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">String discoveryType = DISCOVERY_TYPE_SETTING.get(settings);</span><br><span class="line">        <span class="comment">// 这里是函数式编程的用法，详情请百度或者Google</span></span><br><span class="line">        Supplier&lt;Discovery&gt; discoverySupplier = discoveryTypes.get(discoveryType);</span><br><span class="line">        <span class="keyword">if</span> (discoverySupplier == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown discovery type ["</span> + discoveryType + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Loggers.getLogger(getClass(), settings).info(<span class="string">"using discovery type [&#123;&#125;]"</span>, discoveryType);</span><br><span class="line">        discovery = Objects.requireNonNull(discoverySupplier.get());</span><br></pre></td></tr></table></figure><p>由上面的代码可以看出，这里Discovery的实例是由DisdcoveryModule的suppiler 提供。</p><p>discovery.start()方法调用AbstractLifecycleComponent#start()方法进行监听，同时在该start()方法中调用ZenDiscovery#doStart()方法进行真正工作，这里用到的模板方法的设计模式，在Spring中很多地方都是这样使用的，首先在抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// ES的生命周期zhuangt:INITIALIZED -&amp;gt; STARTED, STOPPED, CLOSED</span></span><br><span class="line">       <span class="comment">// 如果不可以启动，直接返回</span></span><br><span class="line">       <span class="keyword">if</span> (!lifecycle.canMoveToStarted()) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 启动之前循环监听</span></span><br><span class="line">       <span class="keyword">for</span> (LifecycleListener listener : listeners) &#123;</span><br><span class="line">           listener.beforeStart();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 调用ZenDiscovery的doStart()方法对一些变量进行初始化工作</span></span><br><span class="line">       doStart();</span><br><span class="line">       <span class="comment">// 处理状态</span></span><br><span class="line">       lifecycle.moveToStarted();</span><br><span class="line">       <span class="comment">// 启动之后的监听</span></span><br><span class="line">       <span class="keyword">for</span> (LifecycleListener listener : listeners) &#123;</span><br><span class="line">           listener.afterStart();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> <span class="comment">// 模板方法：由具体的Discovery类来实现，比如ZenDiscovery类</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doStart</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>ZenDiscovery的start()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 该方法其实就是做了一些初始化操作，不要被它的start()命名给误导</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 节点故障探测设置</span></span><br><span class="line">      nodesFD.setLocalNode(clusterService.localNode());</span><br><span class="line">      <span class="comment">// 调用连接线程控制类进行初始化操作</span></span><br><span class="line">      joinThreadControl.start();</span><br><span class="line">      <span class="comment">// 设置ping参数</span></span><br><span class="line">      zenPing.start(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">this</span>.nodeJoinController = <span class="keyword">new</span> NodeJoinController(clusterService, allocationService, electMaster, settings);</span><br><span class="line">      <span class="keyword">this</span>.nodeRemovalExecutor = <span class="keyword">new</span> NodeRemovalClusterStateTaskExecutor(allocationService, electMaster, <span class="keyword">this</span>::submitRejoin, logger);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>discovery.startInitialJoin()方法分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startInitialJoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// start the join thread from a cluster state update. See &#123;@link JoinThreadControl&#125; for details.</span></span><br><span class="line">       clusterService.submitStateUpdateTask(<span class="string">"initial_join"</span>, <span class="keyword">new</span> LocalClusterUpdateTask() &#123;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> ClusterTasksResult&lt;LocalClusterUpdateTask&gt; <span class="title">execute</span><span class="params">(ClusterState currentState)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">               <span class="comment">// do the join on a different thread, the DiscoveryService waits for 30s anyhow till it is discovered</span></span><br><span class="line">               <span class="comment">// 调用这个方法进行详细的处理</span></span><br><span class="line">               joinThreadControl.startNewThreadIfNotRunning();</span><br><span class="line">               <span class="comment">// 返回LocalClusterUpdateTask</span></span><br><span class="line">               <span class="keyword">return</span> unchanged();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 加入集群失败后的逻辑：这里只是打印日志</span></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(String source, @org.elasticsearch.common.Nullable Exception e)</span> </span>&#123;</span><br><span class="line">               logger.warn(<span class="string">"failed to start initial join process"</span>, e);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>我们通过上面的源码分析知道，joinThreadControl.startNewThreadIfNotRunning()这个方法是其核心处理逻辑，我们来看看它做了什么工作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** starts a new joining thread if there is no currently active one and join thread controlling is started */</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startNewThreadIfNotRunning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           ClusterService.assertClusterStateThread();</span><br><span class="line">           <span class="comment">// 如果join线程还存活，直接返回</span></span><br><span class="line">           <span class="keyword">if</span> (joinThreadActive()) &#123;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 从ES中的线程池获取generic线程池，然后提交一个任务</span></span><br><span class="line">           threadPool.generic().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   Thread currentThread = Thread.currentThread();</span><br><span class="line">                   <span class="comment">// CAS操作：</span></span><br><span class="line">                   <span class="keyword">if</span> (!currentJoinThread.compareAndSet(<span class="keyword">null</span>, currentThread)) &#123;</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">// 第一次启动，这里的running肯定是true，是在之前的doStart()中进行初始化的</span></span><br><span class="line">                   <span class="keyword">while</span> (running.get() &amp;&amp; joinThreadActive(currentThread)) &#123;</span><br><span class="line">                       <span class="keyword">try</span> &#123;</span><br><span class="line">                           <span class="comment">// 第一步：首先自己先加入集群</span></span><br><span class="line">                           innerJoinCluster();</span><br><span class="line">                           <span class="keyword">return</span>;</span><br><span class="line">.....</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>通过上面的分析我们知道，如果join线程还存活，则直接返回，否则从从ES中的线程池获取generic线程池，然后提交一个任务，在该任务中主要调用innerJoinCluster()方法加入集群。</p><p>我们来猜猜看看innerJoinCluster()方法做了什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们要加入一个集群，肯定先要找到组织，熟悉Elasticsearch的配置都知道，我们的ES默认的集群名称是slasticsearch，如果配置了，则为我们配置的名称（有点废话了），肯定要进行master选举</span><br></pre></td></tr></table></figure><p>innerJoinCluster()方法分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">innerJoinCluster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DiscoveryNode masterNode = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">final</span> Thread currentThread = Thread.currentThread();</span><br><span class="line">        nodeJoinController.startElectionContext();</span><br><span class="line">        <span class="comment">// 通过findMaster方法来进行Master选举:</span></span><br><span class="line">        <span class="keyword">while</span> (masterNode == <span class="keyword">null</span> &amp;&amp; joinThreadControl.joinThreadActive(currentThread)) &#123;</span><br><span class="line">            masterNode = findMaster();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="三、master选举源码分析"><a href="#三、master选举源码分析" class="headerlink" title="三、master选举源码分析"></a>三、master选举源码分析</h4><p>阅读该部分源码，我们带着下面的一些问题去看。</p><ul><li>分布式系统设计思想？</li><li>ES为什么要master选举？</li><li>有哪些选举算法？</li><li>master选举主流程和详细流程？</li><li>什么时候触发选举？</li><li>为什么不用ZK来实现master选举？</li><li>如何获取到最新的状态数据？</li><li>Master如何进行故障检测？</li><li>Master如何管理集群</li><li>ClusterState的更新流程</li></ul><h5 id="3-1-分布式系统设计思想"><a href="#3-1-分布式系统设计思想" class="headerlink" title="3.1 分布式系统设计思想"></a>3.1 分布式系统设计思想</h5><p>所有的分布式系统都会遇到各个节点数据同步问题（一致性）、因网络故障存在的延迟、脑裂等问题都需要用一套合理的解决方案。比如，在互联网中比较经典的CAP理论和BASE理论。在ES中同样需要面临这样的问题？</p><h5 id="3-2-ES为什么要master选举"><a href="#3-2-ES为什么要master选举" class="headerlink" title="3.2 ES为什么要master选举"></a>3.2 ES为什么要master选举</h5><p>一种选择是分布式哈希表(DHT),可以支持每小时数千个节点的离开和加入,他可以在不了解底层网络拓扑的异构网络中工作,查询响应时间大约为4到10跳(中转次数)，但是在相对稳定的对等网络中,Master模式会更好</p><p>Elasticsearch的典型场景中的另一个简化是集群中没有那么多节点。 通常，节点的数量远远小于单个节点能够维护的连接数，并且网格环境不必经常处理节点加入和离开。 这就是为什么master的做法更适合Elasticsearch。</p><h5 id="3-3-选举算法"><a href="#3-3-选举算法" class="headerlink" title="3.3 选举算法"></a>3.3 选举算法</h5><h6 id="3-3-1-Bully算法"><a href="#3-3-1-Bully算法" class="headerlink" title="3.3.1 Bully算法"></a>3.3.1 Bully算法</h6><p>Leader选举的基本算法之一。 它假定所有节点都有一个惟一的ID，该ID对节点进行排序。 任何时候的当前Leader都是参与集群的最高id节点。 该算法的优点是易于实现,但是,当拥有最大 id 的节点处于不稳定状态的场景下会有问题,例如 Master 负载过重而假死,集群拥有第二大id 的节点被选为 新主,这时原来的 Master 恢复,再次被选为新主,然后又假死…</p><p>elasticsearch 通过推迟选举直到当前的 Master 失效来解决上述问题,但是容易产生脑裂,再通过 <em>法定得票人数过半</em> 解决脑裂</p><h6 id="3-3-2-Paxos算法"><a href="#3-3-2-Paxos算法" class="headerlink" title="3.3.2 Paxos算法"></a>3.3.2 Paxos算法</h6><p>Paxos实现起来非常复杂,但非常强大，尤其在什么时机,以及如何进行选举方面的灵活性比简单的Bully算法有很大的优势，因为在现实生活中，存在比网络链接异常更多的故障模式。比较典型的是Zookeeper在该算法进行了改进，形成自己的一套选举算法。</p><h5 id="3-4-选举流程"><a href="#3-4-选举流程" class="headerlink" title="3.4 选举流程"></a>3.4 选举流程</h5><p>只有一个 Leader将当前版本的全局集群状态推送到每个节点。 ZenDiscovery（默认）过程就是这样的:</p><ul><li>每个节点计算最低的已知节点ID，并向该节点发送领导投票</li><li>如果一个节点收到足够多的票数，并且该节点也为自己投票，那么它将扮演领导者的角色，开始发布集群状态。</li><li>所有节点都会参数选举,并参与投票,但是,只有有资格成为 master 的节点的投票才有效.</li></ul><p>有多少选票赢得选举的定义就是所谓的法定人数。 在弹性搜索中，法定大小是一个可配置的参数。 （一般配置成:可以成为master节点数n/2+1）</p><h5 id="3-5-选举详细流程"><a href="#3-5-选举详细流程" class="headerlink" title="3.5 选举详细流程"></a>3.5 选举详细流程</h5><h6 id="3-5-1-获取PingResponse列表"><a href="#3-5-1-获取PingResponse列表" class="headerlink" title="3.5.1 获取PingResponse列表"></a>3.5.1 获取PingResponse列表</h6><p>节奏上一个Discovery模块的源码进行分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> DiscoveryNode <span class="title">findMaster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    logger.trace(<span class="string">"starting to ping"</span>);</span><br><span class="line">    <span class="comment">// ping所有节点并获取PingResponse</span></span><br><span class="line">    List&lt;ZenPing.PingResponse&gt; fullPingResponses = pingAndWait(pingTimeout).toList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ZenPing.<span class="function">PingCollection <span class="title">pingAndWait</span><span class="params">(TimeValue timeout)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> CompletableFuture&lt;ZenPing.PingCollection&gt; response = <span class="keyword">new</span> CompletableFuture&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 步骤2：ping所有节点，调用UnicastZenPing的ping()方法</span></span><br><span class="line">        zenPing.ping(response::complete, timeout);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>从 <code>response::complete</code>和<code>response.get</code>两句大致就能猜猜，这个方法里面会异步发起请求，主线程等待response。</p><p>UnicastZenPing#ping()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ping</span><span class="params">(<span class="keyword">final</span> Consumer&lt;PingCollection&gt; resultsConsumer, <span class="keyword">final</span> TimeValue duration)</span> </span>&#123;</span><br><span class="line">        ping(resultsConsumer, duration, duration);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">ping</span><span class="params">(<span class="keyword">final</span> Consumer&lt;PingCollection&gt; resultsConsumer,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">final</span> TimeValue scheduleDuration,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">final</span> TimeValue requestDuration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;DiscoveryNode&gt; seedNodes;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            seedNodes = resolveHostsLists(</span><br><span class="line">                <span class="comment">// 1、从配置的discovery.zen.ping.unicast.hosts列表中获取</span></span><br><span class="line">                unicastZenPingExecutorService,</span><br><span class="line">                logger,</span><br><span class="line">                configuredHosts,</span><br><span class="line">                limitPortCounts,</span><br><span class="line">                transportService,</span><br><span class="line">                UNICAST_NODE_PREFIX,</span><br><span class="line">                resolveTimeout);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过其他方式添加seedNodes：List&lt;DiscoveryNode&gt;</span></span><br><span class="line">        seedNodes.addAll(hostsProvider.buildDynamicNodes());</span><br><span class="line">        <span class="comment">// 本实例最近一次的clusterState的masterNode</span></span><br><span class="line">        <span class="keyword">final</span> DiscoveryNodes nodes = contextProvider.clusterState().nodes();</span><br><span class="line">        <span class="comment">// add all possible master nodes that were active in the last known cluster configuration</span></span><br><span class="line">        <span class="comment">// 步骤3：添加有成为master资格的节点</span></span><br><span class="line">        <span class="keyword">for</span> (ObjectCursor&lt;DiscoveryNode&gt; masterNode : nodes.getMasterNodes().values()) &#123;</span><br><span class="line">            seedNodes.add(masterNode.value);</span><br><span class="line">        &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可以看出，在sendPing之前需要确定seedNodes（List<discoverynode>）,它从三个地方获取，第一，从配置的discovery.zen.ping.unicast.hosts列表中获取，第二、hostsProvider.buildDynamicNodes()中获取，最后，从本实例最近一次的clusterState的masterNode中获取。</discoverynode></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;DiscoveryNode&gt; <span class="title">resolveHostsLists</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// create tasks to submit to the executor service; we will wait up to resolveTimeout for these tasks to complete</span></span><br><span class="line">        <span class="keyword">final</span> List&lt;Callable&lt;TransportAddress[]&gt;&gt; callables =</span><br><span class="line">            hosts</span><br><span class="line">                .stream()</span><br><span class="line">                <span class="comment">// 地址列表通过TransportService构造</span></span><br><span class="line">                .map(hn -&gt; (Callable&lt;TransportAddress[]&gt;) () -&gt; transportService.addressesFromString(hn, limitPortCounts))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 异步Future列表</span></span><br><span class="line">        <span class="keyword">final</span> List&lt;Future&lt;TransportAddress[]&gt;&gt; futures =</span><br><span class="line">            executorService.invokeAll(callables, resolveTimeout.nanos(), TimeUnit.NANOSECONDS);</span><br><span class="line">        <span class="keyword">final</span> List&lt;DiscoveryNode&gt; discoveryNodes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">final</span> Set&lt;TransportAddress&gt; localAddresses = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        localAddresses.add(transportService.boundAddress().publishAddress());</span><br><span class="line">        localAddresses.addAll(Arrays.asList(transportService.boundAddress().boundAddresses()));</span><br><span class="line">        <span class="comment">// ExecutorService#invokeAll guarantees that the futures are returned in the iteration order of the tasks so we can associate the</span></span><br><span class="line">        <span class="comment">// hostname with the corresponding task by iterating together</span></span><br><span class="line">        <span class="keyword">final</span> Iterator&lt;String&gt; it = hosts.iterator();</span><br><span class="line">        <span class="comment">// 循环获取异步结果：就是简单的IP获取，为啥会用异步方式？</span></span><br><span class="line">        <span class="comment">// 猜猜是因为host中可能配置有域名，怕解析时间过长</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> Future&lt;TransportAddress[]&gt; future : futures) &#123;</span><br><span class="line">            <span class="keyword">final</span> String hostname = it.next();</span><br><span class="line">            <span class="keyword">if</span> (!future.isCancelled()) &#123;</span><br><span class="line">                <span class="keyword">assert</span> future.isDone();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">final</span> TransportAddress[] addresses = future.get();</span><br><span class="line">                    logger.trace(<span class="string">"resolved host [&#123;&#125;] to &#123;&#125;"</span>, hostname, addresses);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> addressId = <span class="number">0</span>; addressId &lt; addresses.length; addressId++) &#123;</span><br><span class="line">                        <span class="keyword">final</span> TransportAddress address = addresses[addressId];</span><br><span class="line">                        <span class="comment">// no point in pinging ourselves</span></span><br><span class="line">                        <span class="keyword">if</span> (localAddresses.contains(address) == <span class="keyword">false</span>) &#123;</span><br><span class="line">                            discoveryNodes.add(</span><br><span class="line">                                <span class="keyword">new</span> DiscoveryNode(</span><br><span class="line">                                    nodeId_prefix + hostname + <span class="string">"_"</span> + addressId + <span class="string">"#"</span>,</span><br><span class="line">                                    address,</span><br><span class="line">                                    emptyMap(),</span><br><span class="line">                                    emptySet(),</span><br><span class="line">                                    Version.CURRENT.minimumCompatibilityVersion()));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> ExecutionException e) &#123;</span><br><span class="line">                    <span class="keyword">assert</span> e.getCause() != <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">final</span> String message = <span class="string">"failed to resolve host ["</span> + hostname + <span class="string">"]"</span>;</span><br><span class="line">                    logger.warn(message, e.getCause());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.warn(<span class="string">"timed out after [&#123;&#125;] resolving host [&#123;&#125;]"</span>, resolveTimeout, hostname);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回List&lt;DiscoveryNode&gt;</span></span><br><span class="line">        <span class="keyword">return</span> discoveryNodes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿到seedNodes之后就需要发起连接，这里会构造一个叫PingRound的类来统计，并且分别会在 scheduleDuration的0, 1/3, 2/3时刻发起一轮sendPing操作，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 刚开始启动，集群健康状态设置为RED</span></span><br><span class="line">        <span class="keyword">final</span> ConnectionProfile connectionProfile =</span><br><span class="line">            ConnectionProfile.buildSingleChannelProfile(TransportRequestOptions.Type.REG, requestDuration, requestDuration);</span><br><span class="line">        <span class="comment">// 构造一个叫PingRound的类来统计：这个类有id，seedNodes、pingListener、localNode等</span></span><br><span class="line">        <span class="keyword">final</span> PingingRound pingingRound = <span class="keyword">new</span> PingingRound(pingingRoundIdGenerator.incrementAndGet(), seedNodes, resultsConsumer,</span><br><span class="line">            nodes.getLocalNode(), connectionProfile);</span><br><span class="line">        activePingingRounds.put(pingingRound.id(), pingingRound);</span><br><span class="line">        <span class="comment">// 构造ping发送对象pingSender</span></span><br><span class="line">        <span class="keyword">final</span> AbstractRunnable pingSender = <span class="keyword">new</span> AbstractRunnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AlreadyClosedException == <span class="keyword">false</span>) &#123;</span><br><span class="line">                    logger.warn(<span class="string">"unexpected error while pinging"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRun</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">// 发送sendPings</span></span><br><span class="line">                sendPings(requestDuration, pingingRound);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 提交线generic程池：ping的连接不像其他那样由transportService 来保持长连接，而是即建即销，的一条连接</span></span><br><span class="line">        <span class="comment">// 0</span></span><br><span class="line">        threadPool.generic().execute(pingSender);</span><br><span class="line">        <span class="comment">// 1/3</span></span><br><span class="line">        threadPool.schedule(TimeValue.timeValueMillis(scheduleDuration.millis() / <span class="number">3</span>), ThreadPool.Names.GENERIC, pingSender);</span><br><span class="line">        <span class="comment">// 2/3</span></span><br><span class="line">        threadPool.schedule(TimeValue.timeValueMillis(scheduleDuration.millis() / <span class="number">3</span> * <span class="number">2</span>), ThreadPool.Names.GENERIC, pingSender);</span><br><span class="line">        threadPool.schedule(scheduleDuration, ThreadPool.Names.GENERIC, <span class="keyword">new</span> AbstractRunnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRun</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">// 关闭临时连接</span></span><br><span class="line">                finishPingingRound(pingingRound);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                logger.warn(<span class="string">"unexpected error while finishing pinging round"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>这里注意一点就是ping的连接不像其他那样由transportService 来保持长连接，而是即建即销，的一条连接。最后finishPingRound时则把这些临时连接关闭。</p><h6 id="3-5-2-选举master"><a href="#3-5-2-选举master" class="headerlink" title="3.5.2 选举master"></a>3.5.2 选举master</h6><p>再次回到findMaster()方法，上面ping完之后，我们拿到了一个fullPingResponses列表，这里有一个filter操作，如果我们启用了<code>discovery.zen.master_election.ignore_non_master_pings</code>则就会把那些node.master = false 那些节点都忽略掉：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filter responses</span></span><br><span class="line">        <span class="comment">// 如果我们启用了discovery.zen.master_election.ignore_non_master_pings则就会把那些node.master = false 那些节点都忽略掉：</span></span><br><span class="line">        <span class="keyword">final</span> List&lt;ZenPing.PingResponse&gt; pingResponses = filterPingResponses(fullPingResponses, masterElectionIgnoreNonMasters, logger);</span><br></pre></td></tr></table></figure><p>紧接着就要从这些<code>pingResponse</code>里面收集其他节点当前的master节点是谁，最后拿到一个<code>activeMasters</code>的候选的名单，并把自己给去掉，Discovery的策略是非直到最后一刻都不会选自己为master（猜猜可能是预防脑裂吧）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//从pingResponse列表里面收集其他节点当前的master节点是谁，最后拿到一个activeMasters的候选的名单</span></span><br><span class="line">        List&lt;DiscoveryNode&gt; activeMasters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ZenPing.PingResponse pingResponse : pingResponses) &#123;</span><br><span class="line">            <span class="comment">// We can't include the local node in pingMasters list, otherwise we may up electing ourselves without</span></span><br><span class="line">            <span class="comment">// any check / verifications from other nodes in ZenDiscover#DiscoveryNode()</span></span><br><span class="line">            <span class="keyword">if</span> (pingResponse.master() != <span class="keyword">null</span> &amp;&amp; !localNode.equals(pingResponse.master())) &#123;</span><br><span class="line">                <span class="comment">// 添加master到activeMasters名单</span></span><br><span class="line">                activeMasters.add(pingResponse.master());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果可选名单为空，就是大家刚刚启动，则进入选举环节</span></span><br><span class="line">        <span class="keyword">if</span> (activeMasters.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 如果有足够的候选人参与:由discovery.zen.minimum_master_nodes参数指定</span></span><br><span class="line">            <span class="keyword">if</span> (electMaster.hasEnoughCandidates(masterCandidates)) &#123;</span><br><span class="line">                <span class="comment">// 具体的选举方法：非常简单，就是找到id为最小的节点</span></span><br><span class="line">                <span class="keyword">final</span> ElectMasterService.MasterCandidate winner = electMaster.electMaster(masterCandidates);</span><br><span class="line">                logger.trace(<span class="string">"candidate &#123;&#125; won election"</span>, winner);</span><br><span class="line">                <span class="keyword">return</span> winner.getNode();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// if we don't have enough master nodes, we bail, because there are not enough master to elect from</span></span><br><span class="line">                logger.warn(<span class="string">"not enough master nodes discovered during pinging (found [&#123;&#125;], but needed [&#123;&#125;]), pinging again"</span>,</span><br><span class="line">                            masterCandidates, electMaster.minimumMasterNodes());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">assert</span> !activeMasters.contains(localNode) : <span class="string">"local node should never be elected as master when other nodes indicate an active master"</span>;</span><br><span class="line">            <span class="comment">// lets tie break between discovered nodes</span></span><br><span class="line">            <span class="keyword">return</span> electMaster.tieBreakActiveMasters(activeMasters);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>接着就对这个候选列表判断，最理想就是列表为1，就证明你当前加入一个健康的集群中去，如果是有多个（正常情况下肯定不会有多个，除非你没有配置那个<code>discovery.zen.minimum_master_nodes</code>导致很多分治子群了）则在列表里面简单的选一个id号最小的（意思是不参乱了）。如果列表为空，就是大家都是刚启动，则进入选举环节，选举环节还是选出那个id最小的。</p><p>现在这个<code>masterNode</code>是定下来了，如果这个master是别人，则就简单的发送个join请求过去就好了，如果选出的master是你自己，那就还有一件很重要的事要做，还记得那个<code>discovery.zen.minimum_master_nodes</code>参数吗，一般要求这个值需要配成你的集群的cluster节点数的一半+1，以预防有脑裂，当前如果你选举出自己是master，那么你还需要等待 <code>minimumMasterNodes() - 1</code> 这么多个人join过来并认同你是master，那你才是真正的master，选举才结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上面通过findMaster()方法找到masterNode，但是这时还不能算是真正的master节点</span></span><br><span class="line">        <span class="comment">// 如果选出了自己</span></span><br><span class="line">        <span class="keyword">if</span> (clusterService.localNode().equals(masterNode)) &#123;</span><br><span class="line">            <span class="comment">// 需要的节点数是discovery.zen.minimum_master_nodes-1（因为masterNode自己不需要表决了）</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> requiredJoins = Math.max(<span class="number">0</span>, electMaster.minimumMasterNodes() - <span class="number">1</span>); <span class="comment">// we count as one</span></span><br><span class="line">            logger.debug(<span class="string">"elected as master, waiting for incoming joins ([&#123;&#125;] needed)"</span>, requiredJoins);</span><br><span class="line">            nodeJoinController.waitToBeElectedAsMaster(requiredJoins, masterElectionWaitForJoinsTimeout,</span><br><span class="line">                    <span class="keyword">new</span> NodeJoinController.ElectionCallback() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onElectedAsMaster</span><span class="params">(ClusterState state)</span> </span>&#123;</span><br><span class="line">                            joinThreadControl.markThreadAsDone(currentThread);</span><br><span class="line">                            <span class="comment">// we only starts nodesFD if we are master (it may be that we received a cluster state while pinging)</span></span><br><span class="line">                            nodesFD.updateNodesAndPing(state); <span class="comment">// start the nodes FD</span></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">                            logger.trace(<span class="string">"failed while waiting for nodes to join, rejoining"</span>, t);</span><br><span class="line">                            joinThreadControl.markThreadAsDoneAndStartNew(currentThread);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果这个master是别人，则就简单的发送个join请求过去就好了</span></span><br><span class="line">            <span class="comment">// process any incoming joins (they will fail because we are not the master)</span></span><br><span class="line">            nodeJoinController.stopElectionContext(masterNode + <span class="string">" elected"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// send join request</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> success = joinElectedMaster(masterNode);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// finalize join through the cluster state update thread</span></span><br><span class="line">            <span class="keyword">final</span> DiscoveryNode finalMasterNode = masterNode;</span><br><span class="line">            clusterService.submitStateUpdateTask(<span class="string">"finalize_join ("</span> + masterNode + <span class="string">")"</span>, <span class="keyword">new</span> LocalClusterUpdateTask() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> ClusterTasksResult&lt;LocalClusterUpdateTask&gt; <span class="title">execute</span><span class="params">(ClusterState currentState)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">                        <span class="comment">// failed to join. Try again...</span></span><br><span class="line">                        joinThreadControl.markThreadAsDoneAndStartNew(currentThread);</span><br><span class="line">                        <span class="keyword">return</span> unchanged();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (currentState.getNodes().getMasterNode() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// Post 1.3.0, the master should publish a new cluster state before acking our join request. we now should have</span></span><br><span class="line">                        <span class="comment">// a valid master.</span></span><br><span class="line">                        logger.debug(<span class="string">"no master node is set, despite of join request completing. retrying pings."</span>);</span><br><span class="line">                        joinThreadControl.markThreadAsDoneAndStartNew(currentThread);</span><br><span class="line">                        <span class="keyword">return</span> unchanged();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!currentState.getNodes().getMasterNode().equals(finalMasterNode)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> joinThreadControl.stopRunningThreadAndRejoin(currentState, <span class="string">"master_switched_while_finalizing_join"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Note: we do not have to start master fault detection here because it's set at &#123;@link #processNextPendingClusterState &#125;</span></span><br><span class="line">                    <span class="comment">// when the first cluster state arrives.</span></span><br><span class="line">                    joinThreadControl.markThreadAsDone(currentThread);</span><br><span class="line">                    <span class="keyword">return</span> unchanged();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(String source, @Nullable Exception e)</span> </span>&#123;</span><br><span class="line">                    logger.error(<span class="string">"unexpected error while trying to finalize cluster join"</span>, e);</span><br><span class="line">                    joinThreadControl.markThreadAsDoneAndStartNew(currentThread);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这里会有一个等待join超时配置，超时后还没有满足数量的join请求，则选举失败，需要新一轮选举。</p><h6 id="3-6-什么时候触发Master选举"><a href="#3-6-什么时候触发Master选举" class="headerlink" title="3.6 什么时候触发Master选举"></a>3.6 什么时候触发Master选举</h6><ul><li>集群启动</li><li>Master 失效</li></ul><p>非 Master 节点运行的 MasterFaultDetection 检测到 Master 失效,在其注册的 listener 中执行 handleMasterGone,执行 rejoin 操作,重新选主.注意,即使一个节点认为 Master 失效也会进入选主流程</p><h6 id="3-7-为什么不用ZK？"><a href="#3-7-为什么不用ZK？" class="headerlink" title="3.7 为什么不用ZK？"></a>3.7 为什么不用ZK？</h6><p>个人猜测可能是当时ZK不是很流行，应用不广泛。Elasticsearch第一版发布于2010年，zookeeper发布于2008年，时间间隔不是很长。</p><h6 id="3-8-如何获取到最新的数据"><a href="#3-8-如何获取到最新的数据" class="headerlink" title="3.8 如何获取到最新的数据"></a>3.8 如何获取到最新的数据</h6><p>现在 Master 已成功当选,但是他未必有最新的 clusterState 信息,这些信息如何得到?<br>gateway 模块负责 clusterState 持久化和恢复,Master 节点在当选后,会通过下面的流程获取到集群最新 clusterState:</p><ul><li>枚举集群中有资格成为 Master 的节点列表</li><li>通过listGatewayMetaState获取这些节点上存储的 clusterState</li></ul><ol start="3"><li>对比这些节点的 clusterState 版本号,选择最新的作为 clusterState 并应用.</li></ol><font face="FireBrick">这一块将在后续的gateway源码分析模块中进行分析。</font><h5 id="3-9-总结master选举"><a href="#3-9-总结master选举" class="headerlink" title="3.9 总结master选举"></a>3.9 总结master选举</h5><h4 id="四、同步状态"><a href="#四、同步状态" class="headerlink" title="四、同步状态"></a>四、同步状态</h4><p>选举流程结束后两个重要的小task就开始工作了，分别是<code>MasterFaultDetection</code>和<code>NodesFaultDetection</code>，这两个task很简单，就拿一个master的来看，唯一不同就是node的里面保存的是cluster里面所有的nodes。</p><p>这两个是在ZenDiscovery初始化的时候就初始化好的Listener：MasterNodeFailureListener和NodeFaultDetectionListener分别是实现了MasterFaultDetection和NodesFaultDetection的内部类Listener。</p><p>如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MasterNodeFailureListener</span> <span class="keyword">implements</span> <span class="title">MasterFaultDetection</span>.<span class="title">Listener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMasterFailure</span><span class="params">(DiscoveryNode masterNode, Throwable cause, String reason)</span> </span>&#123;</span><br><span class="line">            handleMasterGone(masterNode, cause, reason);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">NodeFaultDetectionListener</span> <span class="keyword">extends</span> <span class="title">NodesFaultDetection</span>.<span class="title">Listener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger pingsWhileMaster = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNodeFailure</span><span class="params">(DiscoveryNode node, String reason)</span> </span>&#123;</span><br><span class="line">            handleNodeFailure(node, reason);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPingReceived</span><span class="params">(<span class="keyword">final</span> NodesFaultDetection.PingRequest pingRequest)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// if we are master, we don't expect any fault detection from another node. If we get it</span></span><br><span class="line">            <span class="comment">// means we potentially have two masters in the cluster.</span></span><br><span class="line">            <span class="keyword">if</span> (!localNodeMaster()) &#123;</span><br><span class="line">                pingsWhileMaster.set(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pingsWhileMaster.incrementAndGet() &lt; maxPingsFromAnotherMaster) &#123;</span><br><span class="line">                logger.trace(<span class="string">"got a ping from another master &#123;&#125;. current ping count: [&#123;&#125;]"</span>, pingRequest.masterNode(), pingsWhileMaster.get());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            logger.debug(<span class="string">"got a ping from another master &#123;&#125;. resolving who should rejoin. current ping count: [&#123;&#125;]"</span>, pingRequest.masterNode(), pingsWhileMaster.get());</span><br><span class="line">            clusterService.submitStateUpdateTask(<span class="string">"ping from another master"</span>, <span class="keyword">new</span> LocalClusterUpdateTask(Priority.IMMEDIATE) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> ClusterTasksResult&lt;LocalClusterUpdateTask&gt; <span class="title">execute</span><span class="params">(ClusterState currentState)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (currentState.nodes().isLocalNodeElectedMaster()) &#123;</span><br><span class="line">                        pingsWhileMaster.set(<span class="number">0</span>);</span><br><span class="line">                       </span><br><span class="line">                        <span class="keyword">return</span> handleAnotherMaster(currentState, pingRequest.masterNode(), pingRequest.clusterStateVersion(), <span class="string">"node fd ping"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> unchanged();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(String source, Exception e)</span> </span>&#123;</span><br><span class="line">                    logger.debug(<span class="string">"unexpected error during cluster state update task after pings from another master"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>对与这两个类，我们只需要看run方法就行了</p><p>MasterFaultDetection#run()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// check if the master node did not get switched on us..., if it did, we simply return with no reschedule</span></span><br><span class="line">  <span class="keyword">if</span> (masterToPing.equals(MasterFaultDetection.<span class="keyword">this</span>.masterNode())) &#123;</span><br><span class="line">    <span class="comment">// we don't stop on disconnection from master, we keep pinging it</span></span><br><span class="line">     threadPool.schedule(pingInterval, ThreadPool.Names.SAME, MasterPinger.<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>和<code>findMaster（）</code>里面的不一样就是这里不再用temp连接而是在threadPool里面的长连接，这里对错误进行分类，如果是一些业务错误则不受尝试次数的限制，如请求的节点根本不是master节点，请求的master不是自己的cluster等等，会直接调用<code>notifyMasterFailure</code>回调，如果是常规错误，则记录尝试次数，当错误次数超过了阈值，则调用<code>notifyMasterFailure</code>回调。</p><p>接着看MasterNodeFailureListener的handleMasterGone()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleMasterGone</span><span class="params">(<span class="keyword">final</span> DiscoveryNode masterNode, <span class="keyword">final</span> Throwable cause, <span class="keyword">final</span> String reason)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 状态不是已经开始，则直接返回</span></span><br><span class="line">       <span class="keyword">if</span> (lifecycleState() != Lifecycle.State.STARTED) &#123;</span><br><span class="line">           <span class="comment">// not started, ignore a master failure</span></span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// master是自己也直接返回</span></span><br><span class="line">       <span class="keyword">if</span> (localNodeMaster()) &#123;</span><br><span class="line">           <span class="comment">// we might get this on both a master telling us shutting down, and then the disconnect failure</span></span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       logger.info((Supplier&lt;?&gt;) () -&gt; <span class="keyword">new</span> ParameterizedMessage(<span class="string">"master_left [&#123;&#125;], reason [&#123;&#125;]"</span>, masterNode, reason), cause);</span><br><span class="line"></span><br><span class="line">       clusterService.submitStateUpdateTask(<span class="string">"master_failed ("</span> + masterNode + <span class="string">")"</span>, <span class="keyword">new</span> LocalClusterUpdateTask(Priority.IMMEDIATE) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> ClusterTasksResult&lt;LocalClusterUpdateTask&gt; <span class="title">execute</span><span class="params">(ClusterState currentState)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (!masterNode.equals(currentState.nodes().getMasterNode())) &#123;</span><br><span class="line">                   <span class="comment">// master got switched on us, no need to send anything</span></span><br><span class="line">                   <span class="keyword">return</span> unchanged();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// flush any pending cluster states from old master, so it will not be set as master again</span></span><br><span class="line">               publishClusterState.pendingStatesQueue().failAllStatesAndClear(<span class="keyword">new</span> ElasticsearchException(<span class="string">"master left [&#123;&#125;]"</span>, reason));</span><br><span class="line">               <span class="comment">// 重新进入rejion流程</span></span><br><span class="line">               <span class="keyword">return</span> rejoin(currentState, <span class="string">"master left (reason = "</span> + reason + <span class="string">")"</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(String source, Exception e)</span> </span>&#123;</span><br><span class="line">               logger.error((Supplier&lt;?&gt;) () -&gt; <span class="keyword">new</span> ParameterizedMessage(<span class="string">"unexpected failure during [&#123;&#125;]"</span>, source), e);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在前面分析的Node初始化时，注册了clusterState的发布方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clusterService.setClusterStatePublisher(discovery::publish);</span><br></pre></td></tr></table></figure><p>我们来看看publish()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(ClusterChangedEvent clusterChangedEvent, AckListener ackListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!clusterChangedEvent.state().getNodes().isLocalNodeElectedMaster()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Shouldn't publish state when not master"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用PublishClusterStateAction的publish()方法</span></span><br><span class="line">            publishClusterState.publish(clusterChangedEvent, electMaster.minimumMasterNodes(), ackListener);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FailedToCommitClusterStateException t) &#123;</span><br><span class="line">            <span class="comment">// cluster service logs a WARN message</span></span><br><span class="line">            logger.debug(<span class="string">"failed to publish cluster state version [&#123;&#125;] (not enough nodes acknowledged, min master nodes [&#123;&#125;])"</span>, clusterChangedEvent.state().version(), electMaster.minimumMasterNodes());</span><br><span class="line">            submitRejoin(<span class="string">"zen-disco-failed-to-publish"</span>);</span><br><span class="line">            <span class="keyword">throw</span> t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// update the set of nodes to ping after the new cluster state has been published</span></span><br><span class="line">        nodesFD.updateNodesAndPing(clusterChangedEvent.state());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clean the pending cluster queue - we are currently master, so any pending cluster state should be failed</span></span><br><span class="line">        <span class="comment">// note that we also clean the queue on master failure (see handleMasterGone) but a delayed cluster state publish</span></span><br><span class="line">        <span class="comment">// from a stale master can still make it in the queue during the election (but not be committed)</span></span><br><span class="line">        publishClusterState.pendingStatesQueue().failAllStatesAndClear(<span class="keyword">new</span> ElasticsearchException(<span class="string">"elected as master"</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>调用PublishClusterStateAction的publish()方法，在PublishClusterStateAction初始化的时候，会调用CommitClusterStateRequestHandler的构造方法，然后传递给TransportService的registerRequestHandler方法，最后会处理到一个pendingStatesQueue队列。</p><p>pendingStatesQueue会保存着每个待提交的state，并且也会提供最新的commit 的state给其他请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CommitClusterStateRequestHandler</span> <span class="keyword">implements</span> <span class="title">TransportRequestHandler</span>&lt;<span class="title">CommitClusterStateRequest</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageReceived</span><span class="params">(CommitClusterStateRequest request, <span class="keyword">final</span> TransportChannel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            handleCommitRequest(request, channel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleCommitRequest</span><span class="params">(CommitClusterStateRequest request, <span class="keyword">final</span> TransportChannel channel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ClusterState state = pendingStatesQueue.markAsCommitted(request.stateUUID,</span><br><span class="line">            <span class="keyword">new</span> PendingClusterStatesQueue.StateProcessedListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNewClusterStateProcessed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// send a response to the master to indicate that this cluster state has been processed post committing it.</span></span><br><span class="line">                    channel.sendResponse(TransportResponse.Empty.INSTANCE);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    logger.debug(<span class="string">"failed to send response on cluster state processed"</span>, e);</span><br><span class="line">                    onNewClusterStateFailed(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNewClusterStateFailed</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.sendResponse(e);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception inner) &#123;</span><br><span class="line">                    inner.addSuppressed(e);</span><br><span class="line">                    logger.debug(<span class="string">"failed to send response on cluster state processed"</span>, inner);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (state != <span class="keyword">null</span>) &#123;</span><br><span class="line">            newPendingClusterStatelistener.onNewClusterState(<span class="string">"master "</span> + state.nodes().getMasterNode() +</span><br><span class="line">                <span class="string">" committed version ["</span> + state.version() + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>而发布<code>clusterChangedEvent</code>则交给了<code>PublishClusterStateAction</code>主要逻辑在<code>innerPublish</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">innerPublish</span><span class="params">(<span class="keyword">final</span> ClusterChangedEvent clusterChangedEvent, <span class="keyword">final</span> Set&lt;DiscoveryNode&gt; nodesToPublishTo,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">final</span> SendingController sendingController, <span class="keyword">final</span> <span class="keyword">boolean</span> sendFullVersion,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">final</span> Map&lt;Version, BytesReference&gt; serializedStates, <span class="keyword">final</span> Map&lt;Version, BytesReference&gt; serializedDiffs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ClusterState clusterState = clusterChangedEvent.state();</span><br><span class="line">        <span class="keyword">final</span> ClusterState previousState = clusterChangedEvent.previousState();</span><br><span class="line">        <span class="keyword">final</span> TimeValue publishTimeout = discoverySettings.getPublishTimeout();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> publishingStartInNanos = System.nanoTime();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> DiscoveryNode node : nodesToPublishTo) &#123;</span><br><span class="line">            <span class="comment">// try and serialize the cluster state once (or per version), so we don't serialize it</span></span><br><span class="line">            <span class="comment">// per node when we send it over the wire, compress it while we are at it...</span></span><br><span class="line">            <span class="comment">// we don't send full version if node didn't exist in the previous version of cluster state</span></span><br><span class="line">            <span class="keyword">if</span> (sendFullVersion || !previousState.nodes().nodeExists(node)) &#123;</span><br><span class="line">                sendFullClusterState(clusterState, serializedStates, node, publishTimeout, sendingController);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 是在ES2.x之后才有的，目的是为了减少网络带宽</span></span><br><span class="line">                sendClusterStateDiff(clusterState, serializedDiffs, serializedStates, node, publishTimeout, sendingController);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sendingController.waitForCommit(discoverySettings.getCommitTimeout());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> timeLeftInNanos = Math.max(<span class="number">0</span>, publishTimeout.nanos() - (System.nanoTime() - publishingStartInNanos));</span><br><span class="line">            <span class="keyword">final</span> BlockingClusterStatePublishResponseHandler publishResponseHandler = sendingController.getPublishResponseHandler();</span><br><span class="line">            sendingController.setPublishingTimedOut(!publishResponseHandler.awaitAllNodes(TimeValue.timeValueNanos(timeLeftInNanos)));</span><br><span class="line">            <span class="keyword">if</span> (sendingController.getPublishingTimedOut()) &#123;</span><br><span class="line">                DiscoveryNode[] pendingNodes = publishResponseHandler.pendingNodes();</span><br><span class="line">                <span class="comment">// everyone may have just responded</span></span><br><span class="line">                <span class="keyword">if</span> (pendingNodes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    logger.warn(<span class="string">"timed out waiting for all nodes to process published state [&#123;&#125;] (timeout [&#123;&#125;], pending nodes: &#123;&#125;)"</span>,</span><br><span class="line">                        clusterState.version(), publishTimeout, pendingNodes);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// ignore &amp; restore interrupt</span></span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在ES2.x 之后支持了发送临近版本的diff来同步状态，目的为了省网络带宽，点进去ClusterState类可以发现里面的状态信息量还是不少，不过diff 需要你的版本和目前的最新的版本只相差一个版本，如果你要从1跳到3需要发送full的状态。<code>sendFullClusterState</code> 和<code>sendClusterStateDiff</code>都会调用底层transportService来真正发送状态，而状态记录通过一个<code>sendingController</code>来维护，没接收到ack或者timeout都会让controller来check是否达到了<code>minMasterNodes-1</code>，达到则标记这次的状态推送commited，其余情况都会抛错。</p><p>这里一定需要注意，Publish状态分成两个阶段，首先是sendNotification</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendClusterStateToNode</span><span class="params">(<span class="keyword">final</span> ClusterState clusterState, BytesReference bytes,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        <span class="keyword">final</span> DiscoveryNode node,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        <span class="keyword">final</span> TimeValue publishTimeout,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        <span class="keyword">final</span> SendingController sendingController,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        <span class="keyword">final</span> <span class="keyword">boolean</span> sendDiffs, <span class="keyword">final</span> Map&lt;Version, BytesReference&gt; serializedStates)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// -&gt; no need to put a timeout on the options here, because we want the response to eventually be received</span></span><br><span class="line">            <span class="comment">//  and not log an error if it arrives after the timeout</span></span><br><span class="line">            <span class="comment">// -&gt; no need to compress, we already compressed the bytes</span></span><br><span class="line">            TransportRequestOptions options = TransportRequestOptions.builder()</span><br><span class="line">                .withType(TransportRequestOptions.Type.STATE).withCompress(<span class="keyword">false</span>).build();</span><br><span class="line">            transportService.sendRequest(node, SEND_ACTION_NAME,</span><br><span class="line">                    <span class="keyword">new</span> BytesTransportRequest(bytes, node.getVersion()),</span><br><span class="line">                    options,</span><br><span class="line">                    <span class="keyword">new</span> EmptyTransportResponseHandler(ThreadPool.Names.SAME) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleResponse</span><span class="params">(TransportResponse.Empty response)</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">if</span> (sendingController.getPublishingTimedOut()) &#123;</span><br><span class="line">                                logger.debug(<span class="string">"node &#123;&#125; responded for cluster state [&#123;&#125;] (took longer than [&#123;&#125;])"</span>, node,</span><br><span class="line">                                    clusterState.version(), publishTimeout);</span><br><span class="line">                            &#125;</span><br><span class="line">                            </span><br><span class="line">                            sendingController.onNodeSendAck(node);</span><br><span class="line">                        &#125;</span><br><span class="line">                        ....</span><br><span class="line">                    &#125;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p>就是master先向所有节点发送这个状态，需要等minMasterNodes确认了这个通知，master节点才会把这个状态mark成commited，再<code>sendCommitToNode()</code> 告知所有节点把commited这个状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">onNodeSendAck</span><span class="params">(DiscoveryNode node)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (committed) &#123;</span><br><span class="line">                <span class="keyword">assert</span> sendAckedBeforeCommit.isEmpty();</span><br><span class="line">                sendCommitToNode(node, clusterState, <span class="keyword">this</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (committedOrFailed()) &#123;</span><br><span class="line">                logger.trace(<span class="string">"ignoring ack from [&#123;&#125;] for cluster state version [&#123;&#125;]. already failed"</span>, node, clusterState.version());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// we're still waiting</span></span><br><span class="line">                sendAckedBeforeCommit.add(node);</span><br><span class="line">                <span class="keyword">if</span> (node.isMasterNode()) &#123;</span><br><span class="line">                    checkForCommitOrFailIfNoPending(node);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>其他Node消息处理也是在该类当中，大致流程就不再详细查看了，入口在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">transportService.registerRequestHandler(SEND_ACTION_NAME, BytesTransportRequest::<span class="keyword">new</span>, ThreadPool.Names.SAME, <span class="keyword">false</span>, <span class="keyword">false</span>,</span><br><span class="line">          <span class="keyword">new</span> SendClusterStateRequestHandler());</span><br><span class="line">      transportService.registerRequestHandler(COMMIT_ACTION_NAME, CommitClusterStateRequest::<span class="keyword">new</span>, ThreadPool.Names.SAME, <span class="keyword">false</span>, <span class="keyword">false</span>,</span><br><span class="line">          <span class="keyword">new</span> CommitClusterStateRequestHandler());</span><br></pre></td></tr></table></figure><p>都会调用底层transportService来真正发送状态。</p><h4 id="五、Discovery模块总结"><a href="#五、Discovery模块总结" class="headerlink" title="五、Discovery模块总结"></a>五、Discovery模块总结</h4><p>从上面的源码分析我们知道，Discovery模块是ES的核心模块，它对ES集群进行master选举、状态发布和更新。</p><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/Discovery%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt=":\hexo\source\images\es\Discovery时序图.pn"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过上一篇对Elasticsearch启动的分析，我们知道了ES启动的大致流程，还遗留下几个问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master选举是在什么模块进行的&lt;/li&gt;
&lt;li&gt;ES集群是如何进行Master选举的？&lt;/li&gt;
&lt;li&gt;ES是如何维护这些节点的？&lt;/li&gt;

      
    
    </summary>
    
      <category term="Elasticsearch源码分析专题" scheme="https://grezhang.github.io/categories/Elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="elasticsearch" scheme="https://grezhang.github.io/tags/elasticsearch/"/>
    
      <category term="源码分析" scheme="https://grezhang.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch源码分析(二)--启动</title>
    <link href="https://grezhang.github.io/2018/05/25/ElasticSearch/elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E4%BA%8C)--%E5%90%AF%E5%8A%A8/"/>
    <id>https://grezhang.github.io/2018/05/25/ElasticSearch/elasticsearch源码分析(二)--启动/</id>
    <published>2018-05-25T04:10:57.000Z</published>
    <updated>2018-07-02T02:01:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于最近半年来一直在使用Elasticsearch来做全文检索和ELK统一日志工作，对于ES还是觉得需要细细研究，才能感受到它的魅力，才能有所提高。</p><p>我们先提出几个问题：</p><ul><li>启动入口在哪个类？</li><li>启动需要做哪些初始化工作？</li><li>如何加载配置文件？</li></ul><h4 id="一、怎么找启动入口在哪个类"><a href="#一、怎么找启动入口在哪个类" class="headerlink" title="一、怎么找启动入口在哪个类"></a>一、怎么找启动入口在哪个类</h4><p>看源码最头疼的事情就是找入口，相信很多刚开始也是这样，面对那么多模块中的类，很难找到一个切入点，我刚开始看也是这样，对于这样的问题，其实还是自己的积累不够，多学习就是了。</p><p>我们先来看看启动的脚本elasticsearch.bat或者elasticsearch.sh</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line">忽略其他</span><br><span class="line"></span><br><span class="line"><span class="variable">%JAVA%</span> <span class="variable">%ES_JAVA_OPTS%</span> <span class="variable">%ES_PARAMS%</span> -cp "<span class="variable">%ES_CLASSPATH%</span>" "org.elasticsearch.bootstrap.Elasticsearch" <span class="variable">!newparams!</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ENDLOCAL</span></span><br></pre></td></tr></table></figure><p>看到了org.elasticsearch.bootstrap.Elasticsearch这个类，不用想就是它的启动类。</p><h4 id="二、Elasticsearch类做了什么事情"><a href="#二、Elasticsearch类做了什么事情" class="headerlink" title="二、Elasticsearch类做了什么事情"></a>二、Elasticsearch类做了什么事情</h4><p>我们先来猜想一下，我们下载完Elasticsearch的安装包，一般有两种部署方式：单机部署和集群部署</p><h5 id="2-1-单机部署"><a href="#2-1-单机部署" class="headerlink" title="2.1 单机部署"></a>2.1 单机部署</h5><p>一般我们会修改{Elasticsearch_home}\config下的elasticsearch.yml文件和jvm.options</p><p>在elasticsearch.yml中配置集群名称、节点名称、日志存放路径、数据存放路径、网络IP、http端口（9200）、Netty端口（9300）等</p><p>同时还会去初始化一些module，如下图</p><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/es%E5%8D%95%E6%9C%BA%E5%90%AF%E5%8A%A8.png" alt=":\hexo\source\images\es\es单机启动.pn"></p><h5 id="2-2-集群部署"><a href="#2-2-集群部署" class="headerlink" title="2.2 集群部署"></a>2.2 集群部署</h5><p>我们会在单机部署的基础上，增加Discovery模块（集群发现）的配置、</p><p>有哪些节点参与到集群当中：discovery.zen.ping.unicast.hosts: [“host1”, “host2”]</p><p>需要有几个皇子在场才可以选举投票出master：discovery.zen.minimum_master_nodes: 3</p><h5 id="2-3-启动流程猜想"><a href="#2-3-启动流程猜想" class="headerlink" title="2.3 启动流程猜想"></a>2.3 启动流程猜想</h5><p>通过上述分析我们知道，ES集群启动会做一些初始化工作、加载配置文件，加载一下扩展插件，如果是集群启动，还会进行master选举，master选举需要有足够多的节点参与投票，这个参数是可以指定。</p><h4 id="三、启动源码分析"><a href="#三、启动源码分析" class="headerlink" title="三、启动源码分析"></a>三、启动源码分析</h4><h5 id="3-1-Elasticsearch类图"><a href="#3-1-Elasticsearch类图" class="headerlink" title="3.1 Elasticsearch类图"></a>3.1 Elasticsearch类图</h5><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/Elasticsearch%E7%B1%BB%E5%9B%BE.png" alt=":\hexo\source\images\es\Elasticsearch类图.pn"></p><h5 id="3-2-Elasticsearch-main-方法"><a href="#3-2-Elasticsearch-main-方法" class="headerlink" title="3.2 Elasticsearch#main()方法"></a>3.2 Elasticsearch#main()方法</h5><p>我们先来看看org.elasticsearch.bootstrap.Elasticsearch#main()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// we want the JVM to think there is a security manager installed so that if internal policy decisions that would be based on the</span></span><br><span class="line">        <span class="comment">// presence of a security manager or lack thereof act as if there is a security manager present (e.g., DNS cache policy)</span></span><br><span class="line">        System.setSecurityManager(<span class="keyword">new</span> SecurityManager() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkPermission</span><span class="params">(Permission perm)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// grant all permissions so that we can later set the security manager to the one that we want</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        LogConfigurator.registerErrorListener();</span><br><span class="line">        <span class="comment">// 调用构造器</span></span><br><span class="line">        <span class="keyword">final</span> Elasticsearch elasticsearch = <span class="keyword">new</span> Elasticsearch();</span><br><span class="line">        <span class="comment">// 调用main方法，执行完后返回一个状态</span></span><br><span class="line">        <span class="keyword">int</span> status = main(args, elasticsearch, Terminal.DEFAULT);</span><br><span class="line">        <span class="comment">// 判断状态是否启动成功</span></span><br><span class="line">        <span class="keyword">if</span> (status != ExitCodes.OK) &#123;</span><br><span class="line">            exit(status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args, <span class="keyword">final</span> Elasticsearch elasticsearch, <span class="keyword">final</span> Terminal terminal)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elasticsearch.main(args, terminal);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过上面的类图关系，我们知道Elasticsearch是一个Command，就是一开始先设置了一个SecurityManager，做一些检查checkPermission(Permission perm)，因此主要还是增加一些启停的hook，配置日志输出，用意看注释吧，接着打印了一些基本参数后则进入<code>init</code>方法，在Command#execute(terminal, options)方法里会调用<code>Bootstrap.init(!daemonize, pidFile, quiet, initialEnv);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">main</span><span class="params">(String[] args, Terminal terminal)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (addShutdownHook()) &#123;</span><br><span class="line">            shutdownHookThread.set(<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IOException e) &#123;</span><br><span class="line">                    <span class="keyword">try</span> (</span><br><span class="line">                        StringWriter sw = <span class="keyword">new</span> StringWriter();</span><br><span class="line">                        PrintWriter pw = <span class="keyword">new</span> PrintWriter(sw)) &#123;</span><br><span class="line">                        e.printStackTrace(pw);</span><br><span class="line">                        terminal.println(sw.toString());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IOException impossible) &#123;</span><br><span class="line">                        <span class="comment">// StringWriter#close declares a checked IOException from the Closeable interface but the Javadocs for StringWriter</span></span><br><span class="line">                        <span class="comment">// say that an exception here is impossible</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(impossible);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">            <span class="comment">// 当JVM关闭时，会执行系统中已经设置的所有通过方法addShutdownHook添加的钩子，</span></span><br><span class="line">            <span class="comment">// 当系统执行完这些钩子后，jvm才会关闭</span></span><br><span class="line">            Runtime.getRuntime().addShutdownHook(shutdownHookThread.get());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>配置日志输出Command#main()方法中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 配置日志输出</span><br><span class="line">// initialize default for es.logger.level because we will not read the log4j2.properties</span><br><span class="line">final String loggerLevel = System.getProperty(&quot;es.logger.level&quot;, Level.INFO.name());</span><br><span class="line">final Settings settings = Settings.builder().put(&quot;logger.level&quot;, loggerLevel).build();</span><br><span class="line">LogConfigurator.configureWithoutConfig(settings);</span><br></pre></td></tr></table></figure><p>LogConfigurator#configureWithoutConfig()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">configureWithoutConfig</span><span class="params">(<span class="keyword">final</span> Settings settings)</span> </span>&#123;</span><br><span class="line">     Objects.requireNonNull(settings);</span><br><span class="line">     <span class="comment">// we initialize the status logger immediately otherwise Log4j will complain when we try to get the context</span></span><br><span class="line">     configureStatusLogger();</span><br><span class="line">     configureLoggerLevels(settings);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在Command#mainWithoutErrorHandling(args, terminal)中执行Command，同时会抛出所有的异常给Command#main()方法，真正调用execute(terminal, options)方法执行操作，这是一个抽象方法，通过我们的类图,它的实现类应该是EnvironmentAwareCommand#execute()</p><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/Command-execute%E5%AE%9E%E7%8E%B0%E7%B1%BB.png" alt=":\hexo\source\images\es\Command-execute实现类.pn"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Terminal terminal, OptionSet options)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 将配置信息设置到HashMap中</span></span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, String&gt; settings = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> KeyValuePair kvp : settingOption.values(options)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (kvp.value.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.USAGE, <span class="string">"setting ["</span> + kvp.key + <span class="string">"] must not be empty"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (settings.containsKey(kvp.key)) &#123;</span><br><span class="line">                <span class="keyword">final</span> String message = String.format(</span><br><span class="line">                        Locale.ROOT,</span><br><span class="line">                        <span class="string">"setting [%s] already set, saw [%s] and [%s]"</span>,</span><br><span class="line">                        kvp.key,</span><br><span class="line">                        settings.get(kvp.key),</span><br><span class="line">                        kvp.value);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.USAGE, message);</span><br><span class="line">            &#125;</span><br><span class="line">            settings.put(kvp.key, kvp.value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检查了elasticsearch的三个环境参数：</span></span><br><span class="line">        putSystemPropertyIfSettingIsMissing(settings, <span class="string">"path.conf"</span>, <span class="string">"es.path.conf"</span>);</span><br><span class="line">        putSystemPropertyIfSettingIsMissing(settings, <span class="string">"path.data"</span>, <span class="string">"es.path.data"</span>);</span><br><span class="line">        putSystemPropertyIfSettingIsMissing(settings, <span class="string">"path.home"</span>, <span class="string">"es.path.home"</span>);</span><br><span class="line">        putSystemPropertyIfSettingIsMissing(settings, <span class="string">"path.logs"</span>, <span class="string">"es.path.logs"</span>);</span><br><span class="line">        <span class="comment">// 调用execute方法</span></span><br><span class="line">        execute(terminal, options, createEnv(terminal, settings));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>该方法也是一个抽象方法，它有很多实现类</p><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/EnvironmentAwareCommand-execute%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E7%B1%BB.png" alt=":\hexo\source\images\es\EnvironmentAwareCommand-execute方法实现类.pn"></p><p>在该方法中，会先调用createEnv(terminal, settings)设置环境参数，使用该方法来加载配置文件信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Create an &#123;<span class="doctag">@link</span> Environment&#125; for the command to use. Overrideable for tests. */</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Environment <span class="title">createEnv</span><span class="params">(Terminal terminal, Map&lt;String, String&gt; settings)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> InternalSettingsPreparer.prepareEnvironment(Settings.EMPTY, terminal, settings);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>那么这些配置信息怎么跟节点信息关联呢？</p><h5 id="3-3-Elasticsearch-execute-方法"><a href="#3-3-Elasticsearch-execute-方法" class="headerlink" title="3.3 Elasticsearch#execute()方法"></a>3.3 Elasticsearch#execute()方法</h5><p>直接来看Elasticsearch#execute()方法做了什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Terminal terminal, OptionSet options, Environment env)</span> <span class="keyword">throws</span> UserException </span>&#123;</span><br><span class="line">        <span class="comment">// 检查参数是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (options.nonOptionArguments().isEmpty() == <span class="keyword">false</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.USAGE, <span class="string">"Positional arguments not allowed, found "</span> + options.nonOptionArguments());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (options.has(versionOption)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (options.has(daemonizeOption) || options.has(pidfileOption)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.USAGE, <span class="string">"Elasticsearch version option is mutually exclusive with any other option"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            terminal.println(<span class="string">"Version: "</span> + org.elasticsearch.Version.CURRENT</span><br><span class="line">                    + <span class="string">", Build: "</span> + Build.CURRENT.shortHash() + <span class="string">"/"</span> + Build.CURRENT.date()</span><br><span class="line">                    + <span class="string">", JVM: "</span> + JvmInfo.jvmInfo().version());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 是否以守护线程启动（后台启动 -d）</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> daemonize = options.has(daemonizeOption);</span><br><span class="line">        <span class="comment">// 进程文件</span></span><br><span class="line">        <span class="keyword">final</span> Path pidFile = pidfileOption.value(options);</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> quiet = options.has(quietOption);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行初始化方法</span></span><br><span class="line">            init(daemonize, pidFile, quiet, env);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NodeValidationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.CONFIG, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>该方法主要是检查一些参数，然后调用Elasticsearch#init(daemonize, pidFile, quiet, env)方法，在方法里会调用<code>Bootstrap.init(!daemonize, pidFile, quiet, initialEnv)</code>，而这个方法才是Elasticsearch真正去启动ES。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is invoked by &#123;<span class="doctag">@link</span> Elasticsearch#main(String[])&#125; to startup elasticsearch.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> <span class="keyword">boolean</span> foreground,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> Path pidFile,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> <span class="keyword">boolean</span> quiet,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> Environment initialEnv)</span> <span class="keyword">throws</span> BootstrapException, NodeValidationException, UserException </span>&#123;</span><br><span class="line">        <span class="comment">// Set the system property before anything has a chance to trigger its use</span></span><br><span class="line">        initLoggerPrefix();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// force the class initializer for BootstrapInfo to run before</span></span><br><span class="line">        <span class="comment">// the security manager is installed</span></span><br><span class="line">        BootstrapInfo.init();</span><br><span class="line"></span><br><span class="line">        INSTANCE = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">        <span class="keyword">final</span> SecureSettings keystore = loadSecureSettings(initialEnv);</span><br><span class="line">        Environment environment = createEnvironment(foreground, pidFile, keystore, initialEnv.settings());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 配置日志输出</span></span><br><span class="line">            LogConfigurator.configure(environment);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检查自定义配置文件</span></span><br><span class="line">        checkForCustomConfFile();</span><br><span class="line">        <span class="comment">// 检查是否配置错误</span></span><br><span class="line">        checkConfigExtension(environment.configExtension());</span><br><span class="line">        <span class="comment">// 如果pidFile文件不为空，则创建pid文件，会在磁盘上持久化一个记录应用pid的文件</span></span><br><span class="line">        <span class="keyword">if</span> (environment.pidFile() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                PidFile.create(environment.pidFile(), <span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通过参数foreground和quiet来控制日志输出</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> closeStandardStreams = (foreground == <span class="keyword">false</span>) || quiet;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (closeStandardStreams) &#123;</span><br><span class="line">                <span class="keyword">final</span> Logger rootLogger = ESLoggerFactory.getRootLogger();</span><br><span class="line">                <span class="keyword">final</span> Appender maybeConsoleAppender = Loggers.findAppender(rootLogger, ConsoleAppender.class);</span><br><span class="line">                <span class="keyword">if</span> (maybeConsoleAppender != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Loggers.removeAppender(rootLogger, maybeConsoleAppender);</span><br><span class="line">                &#125;</span><br><span class="line">                closeSystOut();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// fail if somebody replaced the lucene jars</span></span><br><span class="line">            checkLucene();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// install the default uncaught exception handler; must be done before security is</span></span><br><span class="line">            <span class="comment">// initialized as we do not want to grant the runtime permission</span></span><br><span class="line">            <span class="comment">// setDefaultUncaughtExceptionHandler</span></span><br><span class="line">            <span class="comment">// 初始化节点信息</span></span><br><span class="line">            Thread.setDefaultUncaughtExceptionHandler(</span><br><span class="line">                <span class="keyword">new</span> ElasticsearchUncaughtExceptionHandler(() -&gt; Node.NODE_NAME_SETTING.get(environment.settings())));</span><br><span class="line">            <span class="comment">// 调用Bootstrap的setup方法和start方法</span></span><br><span class="line">            INSTANCE.setup(<span class="keyword">true</span>, environment);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// any secure settings must be read during node construction</span></span><br><span class="line">                IOUtils.close(keystore);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 调用Bootstrap的start方法</span></span><br><span class="line">            INSTANCE.start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (closeStandardStreams) &#123;</span><br><span class="line">                closeSysError();</span><br><span class="line">            &#125;</span><br><span class="line">            ... 略</span><br></pre></td></tr></table></figure><p>参数详解</p><ul><li>foreground：标识elasticsearch是否是作为后台守护进程启动的，</li><li>pidFile：通过parser解析args后得到，实际是解析了默认命令行参数（verbose，E,silent，version，help，quiet，daemonize，pidfile）</li><li>quiet：同上</li><li>initialEnv：Environment实例化的环境参数对象，保存了一些类似于repoFile，configFile，pluginsFile，binFile，libFile等参数。</li></ul><p>通过上述的源码阅读，我们发现在该方法中：</p><p>主要工作</p><ul><li>首先会实例化一个Bootstrap对象</li><li>配置log输出器</li><li>创建pid文件，会在磁盘上持久化一个记录应用pid的文件</li><li>通过参数foreground和quiet来控制日志输出</li><li>调用Bootstrap的setup方法和start方法</li></ul><h5 id="3-5-Bootstrap-setup-方法"><a href="#3-5-Bootstrap-setup-方法" class="headerlink" title="3.5 Bootstrap#setup()方法"></a>3.5 Bootstrap#setup()方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setup(<span class="keyword">boolean</span> addShutdownHook, Environment environment)<span class="keyword">throws</span> BootstrapException</span><br></pre></td></tr></table></figure><p>该方法主要工作</p><ul><li>通过environment生成本地插件控制器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Settings settings = environment.settings();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Spawner类是一个Environment本地插件控制器</span></span><br><span class="line">            spawner.spawnNativePluginControllers(environment);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li><p>初始化本地资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">initializeNatives(</span><br><span class="line">                environment.tmpFile(),</span><br><span class="line">                BootstrapSettings.MEMORY_LOCK_SETTING.get(settings),</span><br><span class="line">                BootstrapSettings.SYSTEM_CALL_FILTER_SETTING.get(settings),</span><br><span class="line">                BootstrapSettings.CTRLHANDLER_SETTING.get(settings));</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>在安全管理器安装之前初始化探针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">initializeProbes();</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>添加关闭钩子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (addShutdownHook) &#123;</span><br><span class="line">            Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        IOUtils.close(node, spawner);</span><br><span class="line">                        LoggerContext context = (LoggerContext) LogManager.getContext(<span class="keyword">false</span>);</span><br><span class="line">                        Configurator.shutdown(context);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ElasticsearchException(<span class="string">"failed to stop node"</span>, ex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>检查jar重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// look for jar hell,检查jar重复</span></span><br><span class="line">            JarHell.checkJarHell();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | URISyntaxException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>在安全管理器安装之前配置日志输出器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// install SM after natives, shutdown hooks, etc.</span></span><br><span class="line">        <span class="comment">// 安装安全管理器</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Security.configure(environment, BootstrapSettings.SECURITY_FILTER_BAD_DEFAULTS_SETTING.get(settings));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>安装安全管理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// install SM after natives, shutdown hooks, etc.</span></span><br><span class="line">        <span class="comment">// 安装安全管理器</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Security.configure(environment,               BootstrapSettings.SECURITY_FILTER_BAD_DEFAULTS_SETTING.get(settings));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>通过参数environment实例化Node</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过参数environment实例化Node</span></span><br><span class="line">        node = <span class="keyword">new</span> Node(environment) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">validateNodeBeforeAcceptingRequests</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">final</span> Settings settings,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">final</span> BoundTransportAddress boundTransportAddress, List&lt;BootstrapCheck&gt; checks)</span> <span class="keyword">throws</span> NodeValidationException </span>&#123;</span><br><span class="line">                BootstrapChecks.check(settings, boundTransportAddress, checks);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h5 id="3-6-Bootstrap-start-方法"><a href="#3-6-Bootstrap-start-方法" class="headerlink" title="3.6 Bootstrap#start()方法"></a>3.6 Bootstrap#start()方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> NodeValidationException </span>&#123;</span><br><span class="line">       node.start();</span><br><span class="line">       keepAliveThread.start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>主要工作</p><ul><li><p>启动已经实例化的Node</p></li><li><p>启动keepAliveThread 线程，这个线程在Bootstrap初始化的时候就已经实例化了，该线程创建了一个计数为1的CountDownLatch，目的是在启动完成后能顺利添加关闭钩子，而这句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread())</span><br></pre></td></tr></table></figure><p>意思就是在jvm中增加一个关闭的钩子，当jvm关闭的时候，会执行系统中已经设置的所有通过方法addShutdownHook添加的钩子，当系统执行完这些钩子后，jvm才会关闭。所以这些钩子可以在jvm关闭的时候进行内存清理、对象销毁等操作。<br>可以看到启动的重点在setup方法中，启动过后就是Node的事了。</p><p>keepAliveThhread线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch keepAliveLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"><span class="comment">/** creates a new instance */</span></span><br><span class="line">    Bootstrap() &#123;</span><br><span class="line">        <span class="comment">// 在构造器中就创建keepAliveThread线程</span></span><br><span class="line">        keepAliveThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    keepAliveLatch.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// bail out</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"elasticsearch[keepAlive/"</span> + Version.CURRENT + <span class="string">"]"</span>);</span><br><span class="line">        keepAliveThread.setDaemon(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// keep this thread alive (non daemon thread) until we shutdown</span></span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 这里的钩子执行完毕，才会执行完keepAliveThread线程的run()方法</span></span><br><span class="line">                keepAliveLatch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="3-4-Node类源码解读"><a href="#3-4-Node类源码解读" class="headerlink" title="3.4 Node类源码解读"></a>3.4 Node类源码解读</h5><p>我们先不看源码，如果是你，会怎么去设计这个Node类？会怎么去加载配置文件信息？</p><p>猜想，我们启动ES都是一个节点Node，如果是集群，会有多个Node，那么我们应该也是通过Node来加载配置文件，加载完配置文件构造一个Config对象，最后初始化一个Node对象。</p><p>继续猜想，Node应该是包含一些基本信息、全局环境配置Setting和Environment，节点环境NodeEnvironment、是否为master、是否可以参与投票等。</p><p>问题：这些信息设置完毕，如何启动、如何停止？如何加载插件？</p><p>验证猜想，查看类的定义信息</p><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/Node%E5%AE%9A%E4%B9%891.png" alt=":\hexo\source\images\es\Node定义1.pn"></p><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/Node%E5%AE%9A%E4%B9%89.png" alt=":\hexo\source\images\es\Node定义.pn"></p><h6 id="3-4-1-Node初始化"><a href="#3-4-1-Node初始化" class="headerlink" title="3.4.1 Node初始化"></a>3.4.1 Node初始化</h6><p>我们前面通过分析Bootstrap#setup()方法知道，Node的实例化是在该方法中调用 new Node(environment)进行的，节点的启动是在Bootstrap#start()方法中调用Node#start()方法进行启动的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过参数environment实例化Node</span></span><br><span class="line">        node = <span class="keyword">new</span> Node(environment) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">validateNodeBeforeAcceptingRequests</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">final</span> Settings settings,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">final</span> BoundTransportAddress boundTransportAddress, List&lt;BootstrapCheck&gt; checks)</span> <span class="keyword">throws</span> NodeValidationException </span>&#123;</span><br><span class="line">                BootstrapChecks.check(settings, boundTransportAddress, checks);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p>使用google的注入框架Guice的Injector进行注入与获取实例。elasticsearch里面的组件都是用上面的方法进行模块化管理，elasticsearch对guice进行了封装，通过ModulesBuilder类构建elasticsearch的模块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ModulesBuilder modules = <span class="keyword">new</span> ModulesBuilder();</span><br><span class="line">            <span class="comment">// plugin modules must be added here, before others or we can get crazy injection errors...</span></span><br><span class="line">            <span class="keyword">for</span> (Module pluginModule : pluginsService.createGuiceModules()) &#123;</span><br><span class="line">                modules.add(pluginModule);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> MonitorService monitorService = <span class="keyword">new</span> MonitorService(settings, nodeEnvironment, threadPool);</span><br><span class="line">            modules.add(<span class="keyword">new</span> NodeModule(<span class="keyword">this</span>, monitorService));</span><br><span class="line">            ClusterModule clusterModule = <span class="keyword">new</span> ClusterModule(settings, clusterService,</span><br><span class="line">                pluginsService.filterPlugins(ClusterPlugin.class));</span><br><span class="line">            modules.add(clusterModule);</span><br><span class="line">            IndicesModule indicesModule = <span class="keyword">new</span> IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));</span><br><span class="line">            modules.add(indicesModule);</span><br><span class="line"></span><br><span class="line">            SearchModule searchModule = <span class="keyword">new</span> SearchModule(settings, <span class="keyword">false</span>, pluginsService.filterPlugins(SearchPlugin.class));</span><br><span class="line">            CircuitBreakerService circuitBreakerService = createCircuitBreakerService(settingsModule.getSettings(),</span><br><span class="line">                settingsModule.getClusterSettings());</span><br><span class="line">            resourcesToClose.add(circuitBreakerService);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Node的实例化主要工作：</p><ul><li>设置初始化信息：nodeEnvironment</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            Settings tmpSettings = Settings.builder().put(environment.settings())</span><br><span class="line">                .put(Client.CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE).build();</span><br><span class="line"></span><br><span class="line">            tmpSettings = TribeService.processSettings(tmpSettings);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// create the node environment as soon as possible, to recover the node id and enable logging</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                nodeEnvironment = <span class="keyword">new</span> NodeEnvironment(tmpSettings, environment);</span><br><span class="line">                resourcesToClose.add(nodeEnvironment);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Failed to create node environment"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> hadPredefinedNodeName = NODE_NAME_SETTING.exists(tmpSettings);</span><br><span class="line">            Logger logger = Loggers.getLogger(Node.class, tmpSettings);</span><br><span class="line">            <span class="keyword">final</span> String nodeId = nodeEnvironment.nodeId();</span><br><span class="line">            tmpSettings = addNodeNameIfNeeded(tmpSettings, nodeId);</span><br><span class="line">            <span class="keyword">if</span> (DiscoveryNode.nodeRequiresLocalStorage(tmpSettings)) &#123;</span><br><span class="line">                checkForIndexDataInDefaultPathData(tmpSettings, nodeEnvironment, logger);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// this must be captured after the node name is possibly added to the settings</span></span><br><span class="line">            <span class="keyword">final</span> String nodeName = NODE_NAME_SETTING.get(tmpSettings);</span><br><span class="line">            <span class="keyword">if</span> (hadPredefinedNodeName == <span class="keyword">false</span>) &#123;</span><br><span class="line">                logger.info(<span class="string">"node name [&#123;&#125;] derived from node ID [&#123;&#125;]; set [&#123;&#125;] to override"</span>, nodeName, nodeId, NODE_NAME_SETTING.getKey());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.info(<span class="string">"node name [&#123;&#125;], node ID [&#123;&#125;]"</span>, nodeName, nodeId);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><ul><li><p>打印JVM信息</p><p>​</p></li><li><p>初始化pluginsService类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.pluginsService = <span class="keyword">new</span> PluginsService(tmpSettings, environment.modulesFile(), environment.pluginsFile(), classpathPlugins);</span><br></pre></td></tr></table></figure><ul><li><p>environment(这里会加载配置文件)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.environment = <span class="keyword">new</span> Environment(<span class="keyword">this</span>.settings);</span><br><span class="line">Environment.assertEquivalent(environment, <span class="keyword">this</span>.environment);</span><br></pre></td></tr></table></figure></li><li><p>Executors 和threadPool</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;ExecutorBuilder&lt;?&gt;&gt; executorBuilders = pluginsService.getExecutorBuilders(settings);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> ThreadPool threadPool = <span class="keyword">new</span> ThreadPool(settings, executorBuilders.toArray(<span class="keyword">new</span> ExecutorBuilder[<span class="number">0</span>]));</span><br><span class="line">resourcesToClose.add(() -&gt; ThreadPool.terminate(threadPool, <span class="number">10</span>, TimeUnit.SECONDS));</span><br><span class="line"><span class="comment">// adds the context to the DeprecationLogger so that it does not need to be injected everywhere</span></span><br><span class="line">DeprecationLogger.setThreadContext(threadPool.getThreadContext());</span><br><span class="line">resourcesToClose.add(() -&gt; DeprecationLogger.removeThreadContext(threadPool.getThreadContext()));</span><br></pre></td></tr></table></figure><p>我们来看es线程池做了什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPool</span><span class="params">(<span class="keyword">final</span> Settings settings, <span class="keyword">final</span> ExecutorBuilder&lt;?&gt;... customBuilders)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(settings);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> Node.NODE_NAME_SETTING.exists(settings);</span><br><span class="line">        <span class="comment">// 将构造好的线程池添加到HashMap中，key是线程池的名称，value是ExecutorBuilder</span></span><br><span class="line">        <span class="comment">// 每一个线程都是通过ExecutorBuilder来构造</span></span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, ExecutorBuilder&gt; builders = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> availableProcessors = EsExecutors.boundedNumberOfProcessors(settings);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> halfProcMaxAt5 = halfNumberOfProcessorsMaxFive(availableProcessors);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> halfProcMaxAt10 = halfNumberOfProcessorsMaxTen(availableProcessors);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> genericThreadPoolMax = boundedBy(<span class="number">4</span> * availableProcessors, <span class="number">128</span>, <span class="number">512</span>);</span><br><span class="line">        builders.put(Names.GENERIC, <span class="keyword">new</span> ScalingExecutorBuilder(Names.GENERIC, <span class="number">4</span>, genericThreadPoolMax, TimeValue.timeValueSeconds(<span class="number">30</span>)));</span><br><span class="line">        builders.put(Names.INDEX, <span class="keyword">new</span> FixedExecutorBuilder(settings, Names.INDEX, availableProcessors, <span class="number">200</span>));</span><br><span class="line">        builders.put(Names.BULK, <span class="keyword">new</span> FixedExecutorBuilder(settings, Names.BULK, availableProcessors, <span class="number">200</span>)); <span class="comment">// now that we reuse bulk for index/delete ops</span></span><br><span class="line">        builders.put(Names.GET, <span class="keyword">new</span> FixedExecutorBuilder(settings, Names.GET, availableProcessors, <span class="number">1000</span>));</span><br><span class="line">        builders.put(Names.SEARCH, <span class="keyword">new</span> FixedExecutorBuilder(settings, Names.SEARCH, searchThreadPoolSize(availableProcessors), <span class="number">1000</span>));</span><br><span class="line">        builders.put(Names.MANAGEMENT, <span class="keyword">new</span> ScalingExecutorBuilder(Names.MANAGEMENT, <span class="number">1</span>, <span class="number">5</span>, TimeValue.timeValueMinutes(<span class="number">5</span>)));</span><br><span class="line">        <span class="comment">// no queue as this means clients will need to handle rejections on listener queue even if the operation succeeded</span></span><br><span class="line">        <span class="comment">// the assumption here is that the listeners should be very lightweight on the listeners side</span></span><br><span class="line">        builders.put(Names.LISTENER, <span class="keyword">new</span> FixedExecutorBuilder(settings, Names.LISTENER, halfProcMaxAt10, -<span class="number">1</span>));</span><br><span class="line">        builders.put(Names.FLUSH, <span class="keyword">new</span> ScalingExecutorBuilder(Names.FLUSH, <span class="number">1</span>, halfProcMaxAt5, TimeValue.timeValueMinutes(<span class="number">5</span>)));</span><br><span class="line">        builders.put(Names.REFRESH, <span class="keyword">new</span> ScalingExecutorBuilder(Names.REFRESH, <span class="number">1</span>, halfProcMaxAt10, TimeValue.timeValueMinutes(<span class="number">5</span>)));</span><br><span class="line">        builders.put(Names.WARMER, <span class="keyword">new</span> ScalingExecutorBuilder(Names.WARMER, <span class="number">1</span>, halfProcMaxAt5, TimeValue.timeValueMinutes(<span class="number">5</span>)));</span><br><span class="line">        builders.put(Names.SNAPSHOT, <span class="keyword">new</span> ScalingExecutorBuilder(Names.SNAPSHOT, <span class="number">1</span>, halfProcMaxAt5, TimeValue.timeValueMinutes(<span class="number">5</span>)));</span><br><span class="line">        builders.put(Names.FETCH_SHARD_STARTED, <span class="keyword">new</span> ScalingExecutorBuilder(Names.FETCH_SHARD_STARTED, <span class="number">1</span>, <span class="number">2</span> * availableProcessors, TimeValue.timeValueMinutes(<span class="number">5</span>)));</span><br><span class="line">        builders.put(Names.FORCE_MERGE, <span class="keyword">new</span> FixedExecutorBuilder(settings, Names.FORCE_MERGE, <span class="number">1</span>, -<span class="number">1</span>));</span><br><span class="line">        builders.put(Names.FETCH_SHARD_STORE, <span class="keyword">new</span> ScalingExecutorBuilder(Names.FETCH_SHARD_STORE, <span class="number">1</span>, <span class="number">2</span> * availableProcessors, TimeValue.timeValueMinutes(<span class="number">5</span>)));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> ExecutorBuilder&lt;?&gt; builder : customBuilders) &#123;</span><br><span class="line">            <span class="keyword">if</span> (builders.containsKey(builder.name())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"builder with name ["</span> + builder.name() + <span class="string">"] already exists"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            builders.put(builder.name(), builder);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.builders = Collections.unmodifiableMap(builders);</span><br><span class="line"></span><br><span class="line">        threadContext = <span class="keyword">new</span> ThreadContext(settings);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, ExecutorHolder&gt; executors = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) <span class="keyword">final</span> Map.Entry&lt;String, ExecutorBuilder&gt; entry : builders.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">final</span> ExecutorBuilder.ExecutorSettings executorSettings = entry.getValue().getSettings(settings);</span><br><span class="line">            <span class="keyword">final</span> ExecutorHolder executorHolder = entry.getValue().build(executorSettings, threadContext);</span><br><span class="line">            <span class="keyword">if</span> (executors.containsKey(executorHolder.info.getName())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"duplicate executors with name ["</span> + executorHolder.info.getName() + <span class="string">"] registered"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            logger.debug(<span class="string">"created thread pool: &#123;&#125;"</span>, entry.getValue().formatInfo(executorHolder.info));</span><br><span class="line">            executors.put(entry.getKey(), executorHolder);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executors.put(Names.SAME, <span class="keyword">new</span> ExecutorHolder(DIRECT_EXECUTOR, <span class="keyword">new</span> Info(Names.SAME, ThreadPoolType.DIRECT)));</span><br><span class="line">        <span class="keyword">this</span>.executors = unmodifiableMap(executors);</span><br><span class="line">        <span class="comment">// 最后创建一个1线程的scheduler来执行定时任务</span></span><br><span class="line">        <span class="keyword">this</span>.scheduler = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>, EsExecutors.daemonThreadFactory(settings, <span class="string">"scheduler"</span>), <span class="keyword">new</span> EsAbortPolicy());</span><br><span class="line">        <span class="keyword">this</span>.scheduler.setExecuteExistingDelayedTasksAfterShutdownPolicy(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">this</span>.scheduler.setContinueExistingPeriodicTasksAfterShutdownPolicy(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">this</span>.scheduler.setRemoveOnCancelPolicy(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        TimeValue estimatedTimeInterval = ESTIMATED_TIME_INTERVAL_SETTING.get(settings);</span><br><span class="line">        <span class="comment">// 最后创建一个执行timer的线程</span></span><br><span class="line">        <span class="keyword">this</span>.cachedTimeThread = <span class="keyword">new</span> CachedTimeThread(EsExecutors.threadName(settings, <span class="string">"[timer]"</span>), estimatedTimeInterval.millis());</span><br><span class="line">        <span class="keyword">this</span>.cachedTimeThread.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>原来在ES的threadPool中，根据不同的类型分别分配了不同线程数的一个线程池，而executor由一个executorBuilder来提供，所以submit task的时候也需要指定不同的Name。最后创建一个1线程的scheduler来执行定时任务。最后创建一个执行timer的线程。</p><p>再继续往下看Node的构造方法就会看到接下来会new 一堆的services和modules，这里就不一一过了，其共性就是都会绑定刚刚创建的threadPool，已经也会绑定必要的services，某些module本身具有后台线程的话，初始化完成需要调用<code>.start()</code>去启动这些后台线程。</p><p>问题：</p><p>32和Runtime.getRuntime().availableProcessors()中的最小值，也就是不能超过32，为什么会有这个限制呢？是因为在elasticsearch的github上有人提了个<a href="https://github.com/elastic/elasticsearch/issues/3478" target="_blank" rel="noopener">issues/3478</a>，当使用core很多的机器的时候（比如48core），会创建太多的内存从而导致OOM，所以设置了32的上限来避免太多线程给系统产生压力。</p><ul><li>初始化modules实例，通过Guice的Injector进行注入各个Module实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">ModulesBuilder modules = <span class="keyword">new</span> ModulesBuilder();</span><br><span class="line">***</span><br><span class="line">modules.add(b -&gt; &#123;</span><br><span class="line">                    b.bind(NodeService.class).toInstance(nodeService);</span><br><span class="line">                    b.bind(NamedXContentRegistry.class).toInstance(xContentRegistry);</span><br><span class="line">                    b.bind(PluginsService.class).toInstance(pluginsService);</span><br><span class="line">                    b.bind(Client.class).toInstance(client);</span><br><span class="line">                    b.bind(NodeClient.class).toInstance(client);</span><br><span class="line">                    b.bind(Environment.class).toInstance(<span class="keyword">this</span>.environment);</span><br><span class="line">                    b.bind(ThreadPool.class).toInstance(threadPool);</span><br><span class="line">                    b.bind(NodeEnvironment.class).toInstance(nodeEnvironment);</span><br><span class="line">                    b.bind(TribeService.class).toInstance(tribeService);</span><br><span class="line">                    b.bind(ResourceWatcherService.class).toInstance(resourceWatcherService);</span><br><span class="line">                    b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService);</span><br><span class="line">                    b.bind(BigArrays.class).toInstance(bigArrays);</span><br><span class="line">                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService());</span><br><span class="line">                    b.bind(AnalysisRegistry.class).toInstance(analysisModule.getAnalysisRegistry());</span><br><span class="line">                    b.bind(IngestService.class).toInstance(ingestService);</span><br><span class="line">                    b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry);</span><br><span class="line">                    b.bind(MetaDataUpgrader.class).toInstance(metaDataUpgrader);</span><br><span class="line">                    b.bind(MetaStateService.class).toInstance(metaStateService);</span><br><span class="line">                    b.bind(IndicesService.class).toInstance(indicesService);</span><br><span class="line">                    b.bind(SearchService.class).toInstance(newSearchService(clusterService, indicesService,</span><br><span class="line">                        threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase()));</span><br><span class="line">                    b.bind(SearchTransportService.class).toInstance(searchTransportService);</span><br><span class="line">                    b.bind(SearchPhaseController.class).toInstance(<span class="keyword">new</span> SearchPhaseController(settings, bigArrays,</span><br><span class="line">                            scriptModule.getScriptService()));</span><br><span class="line">                    b.bind(Transport.class).toInstance(transport);</span><br><span class="line">                    b.bind(TransportService.class).toInstance(transportService);</span><br><span class="line">                    b.bind(NetworkService.class).toInstance(networkService);</span><br><span class="line">                    b.bind(UpdateHelper.class).toInstance(<span class="keyword">new</span> UpdateHelper(settings, scriptModule.getScriptService()));</span><br><span class="line">                    b.bind(MetaDataIndexUpgradeService.class).toInstance(<span class="keyword">new</span> MetaDataIndexUpgradeService(settings, xContentRegistry,</span><br><span class="line">                        indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), indexMetaDataUpgraders));</span><br><span class="line">                    b.bind(ClusterInfoService.class).toInstance(clusterInfoService);</span><br><span class="line">                    b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery());</span><br><span class="line">                    &#123;</span><br><span class="line">                        RecoverySettings recoverySettings = <span class="keyword">new</span> RecoverySettings(settings, settingsModule.getClusterSettings());</span><br><span class="line">                        processRecoverySettings(settingsModule.getClusterSettings(), recoverySettings);</span><br><span class="line">                        b.bind(PeerRecoverySourceService.class).toInstance(<span class="keyword">new</span> PeerRecoverySourceService(settings, transportService,</span><br><span class="line">                                indicesService, recoverySettings, clusterService));</span><br><span class="line">                        b.bind(PeerRecoveryTargetService.class).toInstance(<span class="keyword">new</span> PeerRecoveryTargetService(settings, threadPool,</span><br><span class="line">                                transportService, recoverySettings, clusterService));</span><br><span class="line">                    &#125;</span><br><span class="line">                    httpBind.accept(b);</span><br><span class="line">                    pluginComponents.stream().forEach(p -&gt; b.bind((Class) p.getClass()).toInstance(p));</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">            injector = modules.createInjector();</span><br></pre></td></tr></table></figure><p>这里面会注入Discovery，ClusterService，Transport Service，还创建了NodeClient用来接收全部其他节点请求。这些都会在往后重点剖析。</p><h6 id="3-4-2-启动Node"><a href="#3-4-2-启动Node" class="headerlink" title="3.4.2 启动Node"></a>3.4.2 启动Node</h6><p>通过在Bootstrap#start()方法中调用Node.start()来启动节点</p><p>我们知道，在Node的初始化方法中，Model组件会被添加到绑定的线程当中，那么启动这些只需要调用相应组件的.start()方法即可完成组件的加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> NodeValidationException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!lifecycle.moveToStarted()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Logger logger = Loggers.getLogger(Node.class, NODE_NAME_SETTING.get(settings));</span><br><span class="line">        logger.info(<span class="string">"starting ..."</span>);</span><br><span class="line">        <span class="comment">// hack around dependency injection problem (for now...)</span></span><br><span class="line">        injector.getInstance(Discovery.class).setAllocationService(injector.getInstance(AllocationService.class));</span><br><span class="line">        pluginLifecycleComponents.forEach(LifecycleComponent::start);</span><br><span class="line"></span><br><span class="line">        injector.getInstance(MappingUpdatedAction.class).setClient(client);</span><br><span class="line">        injector.getInstance(IndicesService.class).start();</span><br><span class="line">        injector.getInstance(IndicesClusterStateService.class).start();</span><br><span class="line">        injector.getInstance(IndicesTTLService.class).start();</span><br><span class="line">        injector.getInstance(SnapshotsService.class).start();</span><br><span class="line">        injector.getInstance(SnapshotShardsService.class).start();</span><br><span class="line">        injector.getInstance(RoutingService.class).start();</span><br><span class="line">        injector.getInstance(SearchService.class).start();</span><br><span class="line">        injector.getInstance(MonitorService.class).start();</span><br></pre></td></tr></table></figure><p>3.4.3 Node节点停止</p><p>该方法跟node启动差不多，也是调用相关组件的stop方法即可，这里就不再分析了</p><h6 id="3-4-4-加载配置文件信息"><a href="#3-4-4-加载配置文件信息" class="headerlink" title="3.4.4 加载配置文件信息"></a>3.4.4 加载配置文件信息</h6><ul><li>入口</li></ul><p>通过Node的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Settings preparedSettings)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>(InternalSettingsPreparer.prepareEnvironment(preparedSettings, <span class="keyword">null</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是加载配置文件的入口，它有三个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Settings <span class="title">prepareSettings</span><span class="params">(Settings input)</span> </span>&#123;</span><br><span class="line">        Settings.Builder output = Settings.builder();</span><br><span class="line">        initializeSettings(output, input, Collections.emptyMap());</span><br><span class="line">        finalizeSettings(output, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> output.build();</span><br><span class="line">    &#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Environment <span class="title">prepareEnvironment</span><span class="params">(Settings input, Terminal terminal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prepareEnvironment(input, terminal, Collections.emptyMap());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Environment <span class="title">prepareEnvironment</span><span class="params">(Settings input, Terminal terminal, Map&lt;String, String&gt; properties)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>在InternalSettingsPreparer类的prepareEnvironment(org.elasticsearch.common.settings.Settings, org.elasticsearch.cli.Terminal, java.util.Map&lt;java.lang.String,java.lang.String&gt;, java.nio.file.Path)方法中进行了配置文件的加载。</p><ul><li><p>加载配置文件的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Environment <span class="title">prepareEnvironment</span><span class="params">(Settings input, Terminal terminal, Map&lt;String, String&gt; properties)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// just create enough settings to build the environment, to get the config dir</span></span><br><span class="line">        Settings.Builder output = Settings.builder();</span><br><span class="line">        <span class="comment">// 初始化输入输出流信息</span></span><br><span class="line">        initializeSettings(output, input, properties);</span><br><span class="line">        <span class="comment">// 构造Environment实例</span></span><br><span class="line">        Environment environment = <span class="keyword">new</span> Environment(output.build());</span><br><span class="line">        <span class="comment">// 这个很关键，保证elasticsearch.yml文件中配置的日志路径path.logs生效</span></span><br><span class="line">        output = Settings.builder(); <span class="comment">// start with a fresh output</span></span><br><span class="line">        <span class="keyword">boolean</span> settingsFileFound = <span class="keyword">false</span>;</span><br><span class="line">        Set&lt;String&gt; foundSuffixes = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String allowedSuffix : ALLOWED_SUFFIXES) &#123;</span><br><span class="line">            Path path = environment.configFile().resolve(<span class="string">"elasticsearch"</span> + allowedSuffix);</span><br><span class="line">            <span class="keyword">if</span> (Files.exists(path)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!settingsFileFound) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        output.loadFromPath(path);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> SettingsException(<span class="string">"Failed to load settings from "</span> + path.toString(), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                settingsFileFound = <span class="keyword">true</span>;</span><br><span class="line">                foundSuffixes.add(allowedSuffix);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (foundSuffixes.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SettingsException(<span class="string">"multiple settings files found with suffixes: "</span></span><br><span class="line">                + Strings.collectionToDelimitedString(foundSuffixes, <span class="string">","</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// re-initialize settings now that the config file has been loaded</span></span><br><span class="line">        initializeSettings(output, input, properties);</span><br><span class="line">        finalizeSettings(output, terminal);</span><br><span class="line">        <span class="comment">// 再次获取Environment实例</span></span><br><span class="line">        environment = <span class="keyword">new</span> Environment(output.build());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// we put back the path.logs so we can use it in the logging configuration file</span></span><br><span class="line">        output.put(Environment.PATH_LOGS_SETTING.getKey(), cleanPath(environment.logsFile().toAbsolutePath().toString()));</span><br><span class="line">        String configExtension = foundSuffixes.isEmpty() ? <span class="keyword">null</span> : foundSuffixes.iterator().next();</span><br><span class="line">        <span class="comment">// 返回Environment实例</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Environment(output.build(), configExtension);</span><br></pre></td></tr></table></figure><p>构建一个默认的Settings的实例</p><p>然后用构造出来的新的Settings来加载给定或默认路径下的<em>elasticsearch.yml</em></p><p>然后将方法接受的参数Settings实例也加载到这个新的Settings中。</p><p>最后才将日志文件的路径加载进Settings中，这样就保证了<em>elasticsearch.yml</em>文件中配置的日志路径<em>path.logs</em>生效（覆盖该方法参数中的配置）。</p><p>最后返回一个Environment的实例，使得Node开始构建</p></li></ul><h4 id="四、总结："><a href="#四、总结：" class="headerlink" title="四、总结："></a>四、总结：</h4><p>通过上述的源码分析，我们知道Elasticsearch节点启动的入口是Elasticsearch#main()方法，在该方法中会进行一些安全管理的设置，去调用Command的main()方法，整个方法执行没有任何异常，则返回ok状态。</p><p>Command#main()：会去添加一些钩子、配置日志输出、调用mainWithoutErrorHandling()去执行EnvironmentAwareCommand#execute(terminal, options)方法。</p><p>EnvironmentAwareCommand#execute(terminal, options)方法：只是将配置信息设置到HashMap中，检查了elasticsearch的参数path.conf、path.data、path.home、path.logs，最后调用Elasticsearch#execute()方法，execute(terminal, options, createEnv(terminal, settings))会先调用EnvironmentAwareCommand# createEnv(terminal, settings)</p><p>Elasticsearch#execute()方法：主要是处理参数，调用init(daemonize, pidFile, quiet, env)，真正执行启动的是Bootstrap.init(!daemonize, pidFile, quiet, initialEnv)方法。</p><p>Bootstrap.init(!daemonize, pidFile, quiet, initialEnv)：主要是调用setup()方法和start()方法，在setup()方法中主要通过environment生成本地插件控制器spawner、添加钩子、添加安全管理器、检查jar包、创建Node节点。而start()通过启动初始化好的Node和keepAliveThread线程，这个keepAliveThread使用了CountdownLatch计数器为1来保证钩子一定能够关闭。</p><p>Node类的初始化：通过设置好的environment来初始化节点，设置nodEnvironment、Environment、设置Node_name、设置线程池（其实是一个HashMap&lt;String,ExecutorBuilder&gt;） ，根据不同的类型分别分配了不同线程数的一个线程池。将创建好的module绑定到创建的ThreadPool。</p><p>大致的时序图如下：</p><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/Elasticsearch%E6%BA%90%E7%A0%81%E5%90%AF%E5%8A%A8%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt=":\hexo\source\images\es\Elasticsearch源码启动时序图.pn"></p><p>现在还遗留着几个问题：</p><ul><li>master选举是在什么模块进行的</li></ul><ul><li>怎么进行master选举</li><li>怎么进行节点监控、维护的</li></ul><p>留到下一篇再进行分析。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于最近半年来一直在使用Elasticsearch来做全文检索和ELK统一日志工作，对于ES还是觉得需要细细研究，才能感受到它的魅力，才能有所提高。&lt;/p&gt;
&lt;p&gt;我们先提出几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动入口在哪个类？&lt;/li&gt;
&lt;li&gt;启动需要做哪些初始化工作
      
    
    </summary>
    
      <category term="Elasticsearch源码分析专题" scheme="https://grezhang.github.io/categories/Elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="elasticsearch" scheme="https://grezhang.github.io/tags/elasticsearch/"/>
    
      <category term="源码分析" scheme="https://grezhang.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch源码分析(一)--整体架构</title>
    <link href="https://grezhang.github.io/2018/05/23/ElasticSearch/elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E4%B8%80)--%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/"/>
    <id>https://grezhang.github.io/2018/05/23/ElasticSearch/elasticsearch源码分析(一)--整体架构/</id>
    <published>2018-05-23T04:12:57.000Z</published>
    <updated>2018-06-25T13:05:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、源码主要模块"><a href="#一、源码主要模块" class="headerlink" title="一、源码主要模块"></a>一、源码主要模块</h1><p>我下载的Elasticsearch的源码版本为5.6.4</p><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/es01.png" alt="es整体结构"></p><p>从上图来看：Elasticsearch主要包含以下几个模块</p><p>distribution：elasticsearch的打包发行相关，将elasticsearch打成各种发行包（zip，deb，rpm，tar）的模块。具体用法如是，在相应的发行版本模块下执行publishToMavenLocal这个Task，如果执行成功的话就会在路径build/distributions下生成对应的发行包，这种打好的包就能在生产服务器上运行。如果自己修改了源码，打包时就需要用到该模块了。</p><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/es02-2.png" alt=":\我的资料\ELK日志监控\es源码分析\distribution整体架构.pn"></p><p><img src="G:\我的资料\ELK日志监控\es源码分析\distribution整体架构-打包zip.png" alt=":\我的资料\ELK日志监控\es源码分析\distribution整体架构-打包zip.pn"></p><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/es02-3.png" alt=":\我的资料\ELK日志监控\es源码分析\distribution整体架构-打包zip成功.pn"></p><p>core：核心包，elasticsearch的源码主要在这个里面，Elasticsearch索引管理、集群管理、服务发现、查询、对Lucene操作的封装等都位于该模块</p><p>buildSrc：elasticsearch的构建相关的代码，gradle相关依赖配置都在改模块下</p><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/buildSrc%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.png" alt=":\我的资料\ELK日志监控\es源码分析\buildSrc整体架构.pn"></p><p>client：作为连接elasticsearch的客户端相关代码，它提供了Rest方式（基于Http）、transport （Java Netty内部的通信方式）等方式。</p><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/client%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.png" alt=":\我的资料\ELK日志监控\es源码分析\client整体架构.pn"></p><p>modules：作为elasticsearch除核心外的必备模块相关代码,比如对Netty的封装、父子类查询、重建索引</p><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/modules%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.png" alt=":\我的资料\ELK日志监控\es源码分析\modules整体架构.pn"></p><p>plugins：作为elasticsearch必备的插件的相关代码，丰富ES的相关功能，比如IK分词器插件、mapper-attachments/ingest-attachment文件处理插件。</p><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/plugings%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.png" alt=":\我的资料\ELK日志监控\es源码分析\plugings整体架构.pn"></p><h1 id="二、Elasticsearch整体架构图"><a href="#二、Elasticsearch整体架构图" class="headerlink" title="二、Elasticsearch整体架构图"></a>二、Elasticsearch整体架构图</h1><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/ES%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt=":\我的资料\ELK日志监控\es源码分析\ES架构图.pn"></p><p>服务发现以及选主 ZenDiscovery</p><p>恢复以及容灾</p><p>搜索引擎 Search</p><p>ClusterState</p><p>网络层</p><p>Rest 和 RPC</p><p>线程池</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、源码主要模块&quot;&gt;&lt;a href=&quot;#一、源码主要模块&quot; class=&quot;headerlink&quot; title=&quot;一、源码主要模块&quot;&gt;&lt;/a&gt;一、源码主要模块&lt;/h1&gt;&lt;p&gt;我下载的Elasticsearch的源码版本为5.6.4&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;
      
    
    </summary>
    
      <category term="Elasticsearch源码分析专题" scheme="https://grezhang.github.io/categories/Elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="elasticsearch源码分析" scheme="https://grezhang.github.io/tags/elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="elasticsearch" scheme="https://grezhang.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch源码环境准备</title>
    <link href="https://grezhang.github.io/2018/05/22/ElasticSearch/elasticsearch%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/"/>
    <id>https://grezhang.github.io/2018/05/22/ElasticSearch/elasticsearch源码环境准备/</id>
    <published>2018-05-22T04:12:56.000Z</published>
    <updated>2018-06-25T14:08:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>本次下载的源码版本为 V5.6.4</p><h3 id="1-ElasticSearch源码下载"><a href="#1-ElasticSearch源码下载" class="headerlink" title="1 ElasticSearch源码下载"></a>1 ElasticSearch源码下载</h3><p>ElasticSearch已经托管在github上，地址为：</p><p><a href="https://github.com/elastic/elasticsearch" target="_blank" rel="noopener">https://github.com/elastic/elasticsearch</a></p><p>然后选择相应的版本下载：</p><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/es/es%E6%BA%90%E7%A0%81git%E4%B8%8B%E8%BD%BD.png" alt="es源码git下载"></p><p>然后解压：</p><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/es/es%E8%A7%A3%E5%8E%8B%E6%95%B4%E4%BD%93%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="es解压整体目录结构"></p><h3 id="2-安装gradle环境"><a href="#2-安装gradle环境" class="headerlink" title="2 安装gradle环境"></a>2 安装gradle环境</h3><p>打开{ES_HOME}\buildSrc_\build.gradle,发现需要gradle3.3的版本</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (GradleVersion.current() &lt; GradleVersion.version(<span class="string">'3.3'</span>)) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> GradleException(<span class="string">'Gradle 3.3+ is required to build elasticsearch'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去gradle下载gradle3.3的版本，最好跟文件需要的版本一致。</p><p>安装gradle，这个比较简单，就不再累述，请自行百度。</p><h3 id="3、-运行gradle-idea-gradle-build-x-test"><a href="#3、-运行gradle-idea-gradle-build-x-test" class="headerlink" title="3、 运行gradle idea,gradle build -x test"></a>3、 运行gradle idea,gradle build -x test</h3><p>这里我使用的是idea工具来调试源码,因此先不要用idea导入该项目,而是进入到下载的elasticsearch目录下,执行gradle idea,等待漫长的依赖下载,等待下载完成后 执行 gradle build -x test 对源码进行编译,等待编译完成.</p><h3 id="4-注释掉jar-hell相关代码"><a href="#4-注释掉jar-hell相关代码" class="headerlink" title="4. 注释掉jar hell相关代码"></a>4. 注释掉jar hell相关代码</h3><p>   全局搜索JarHell.checkJarHell,以及checkJarHell,注释掉相应的代码,否则运行会报错</p><h3 id="5-配置Edit-Configuation"><a href="#5-配置Edit-Configuation" class="headerlink" title="5. 配置Edit Configuation"></a>5. 配置Edit Configuation</h3><ul><li>mainClass为 org.elasticsearch.bootstrap.Elasticsearch VM options为</li><li>Des.path.home=/Users/admin/elk/elasticsearch-5.5.0 -Dlog4j2.disable.jmx=true</li></ul><h3 id="6-运行org-elasticsearch-bootstrap-Elasticsearch中的main方法"><a href="#6-运行org-elasticsearch-bootstrap-Elasticsearch中的main方法" class="headerlink" title="6. 运行org.elasticsearch.bootstrap.Elasticsearch中的main方法"></a>6. 运行org.elasticsearch.bootstrap.Elasticsearch中的main方法</h3><p>需要配置一些参数：</p><p><strong>-Des.path.home</strong><br>指定es的目录地址，elasticsearch在启动中会加载一些默认配置以及插件,我们直接加载elasticsearch安装目录下的配置和插件即可</p><p>如果不配置会报错：<br>Exception in thread “main” java.lang.IllegalStateException: path.home is not configured</p><p><strong>-Dlog4j2.disable.jmx=true</strong><br>为elasticsearch在启动过程中使用到了jmx,我们这里禁止使用即可</p><p>如果不配置会报错：<br>main ERROR Could not register mbeans java.security.AccessControlException: access denied (“javax.management.MBeanTrustPermission” “register”)</p><p><strong>注意</strong></p><ol><li>如果报错没有找到config</li><li>如果报错没有找到 plugins</li><li>如果报错：java.lang.IllegalStateException: Unsupported transport.type []</li></ol><p>解决方案：去官网下个zip包：<br><a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/downloads/elasticsearch</a></p><p>再次运行成功</p><h3 id="7-浏览器访问"><a href="#7-浏览器访问" class="headerlink" title="7. 浏览器访问"></a>7. 浏览器访问</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本次下载的源码版本为 V5.6.4&lt;/p&gt;
&lt;h3 id=&quot;1-ElasticSearch源码下载&quot;&gt;&lt;a href=&quot;#1-ElasticSearch源码下载&quot; class=&quot;headerlink&quot; title=&quot;1 ElasticSearch源码下载&quot;&gt;&lt;/a&gt;1 El
      
    
    </summary>
    
      <category term="Elasticsearch源码分析专题" scheme="https://grezhang.github.io/categories/Elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="elasticsearch源码分析" scheme="https://grezhang.github.io/tags/elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="elasticsearch" scheme="https://grezhang.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>分布式服务治理-dubbo（五）源码分析之核心功能源码</title>
    <link href="https://grezhang.github.io/2017/07/05/dubbo/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86-dubbo%EF%BC%88%E4%BA%94%EF%BC%89%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81/"/>
    <id>https://grezhang.github.io/2017/07/05/dubbo/分布式服务治理-dubbo（五）源码分析之核心源码/</id>
    <published>2017-07-05T04:12:56.000Z</published>
    <updated>2018-07-10T15:52:35.953Z</updated>
    
    <content type="html"><![CDATA[<p>通过上一篇对Dubbo SPI机制的源码分析，我们知道，Extension.getExtensionLoader().getAdaptiveExtension();会动态生成Protocol$Adaptive</p><p>同时也知道知道</p><p>@SPI(“”): 扩展点接口注解</p><p>@Adaptive:这个注解有如下规则：</p><ul><li>如果这个注解是在方法级别上，会动态生成一个自适应的适配器，比如Protocol$Adaptive</li><li>如果这个注解是在类级别上，表示直接加载自定义的自适应适配器</li></ul><p>我们接着上一篇来分析</p><h2 id="SPI之继续"><a href="#SPI之继续" class="headerlink" title="SPI之继续"></a>SPI之继续</h2><h3 id="getExtension-“”-方法分析"><a href="#getExtension-“”-方法分析" class="headerlink" title="getExtension(“”)方法分析"></a>getExtension(“”)方法分析</h3><p>Extension.getExtensionLoader().getExtension(“”)：这个方法表示加载一个指定名称的扩展点</p><p>比如Protocol接口如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI</span>(<span class="string">"dubbo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getDefaultPort</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Adaptive</span></span><br><span class="line">    &lt;T&gt; <span class="function">Exporter&lt;T&gt; <span class="title">export</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Adaptive</span></span><br><span class="line">    &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">refer</span><span class="params">(Class&lt;T&gt; type, URL url)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时com.alibaba.dubbo.rpc.Protocol文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">registry=com.alibaba.dubbo.registry.integration.RegistryProtocol</span><br><span class="line">dubbo=com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol</span><br><span class="line">#这是包装类</span><br><span class="line">filter=com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper</span><br><span class="line">#这是包装类</span><br><span class="line">listener=com.alibaba.dubbo.rpc.protocol.ProtocolListenerWrapper</span><br><span class="line">mock=com.alibaba.dubbo.rpc.support.MockProtocol</span><br><span class="line">injvm=com.alibaba.dubbo.rpc.protocol.injvm.InjvmProtocol</span><br><span class="line">rmi=com.alibaba.dubbo.rpc.protocol.rmi.RmiProtocol</span><br><span class="line">hessian=com.alibaba.dubbo.rpc.protocol.hessian.HessianProtocol</span><br><span class="line">com.alibaba.dubbo.rpc.protocol.http.HttpProtocol</span><br><span class="line">com.alibaba.dubbo.rpc.protocol.webservice.WebServiceProtocol</span><br><span class="line">thrift=com.alibaba.dubbo.rpc.protocol.thrift.ThriftProtocol</span><br><span class="line">memcached=com.alibaba.dubbo.rpc.protocol.memcached.MemcachedProtocol</span><br><span class="line"></span><br><span class="line">redis=com.alibaba.dubbo.rpc.protocol.redis.RedisProtocol</span><br></pre></td></tr></table></figure><p>同时这个包装类的构造方法是以扩展点为参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtocolFilterWrapper</span> <span class="keyword">implements</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Protocol protocol;</span><br><span class="line"><span class="comment">// 以扩展点为参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProtocolFilterWrapper</span><span class="params">(Protocol protocol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (protocol == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"protocol == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.protocol = protocol;</span><br><span class="line">    &#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtocolListenerWrapper</span> <span class="keyword">implements</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Protocol protocol;</span><br><span class="line">    <span class="comment">// 以扩展点为参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProtocolListenerWrapper</span><span class="params">(Protocol protocol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (protocol == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"protocol == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.protocol = protocol;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>那么通过Extension.getExtensionLoader().getExtension(“dubbo”)会获得它的包装类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ProtocolFilterWrapper(ProtocolListenerWrapper(Protocol$Adaptive))</span><br></pre></td></tr></table></figure><p>生成的Protocol$Adaptive内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.extension.ExtensionLoader;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Protocol</span>$<span class="title">Adpative</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">alibaba</span>.<span class="title">dubbo</span>.<span class="title">rpc</span>.<span class="title">Protocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDefaultPort</span><span class="params">()</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> com.alibaba.dubbo.rpc.<span class="function">Invoker <span class="title">refer</span><span class="params">(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1)</span> <span class="keyword">throws</span> com.alibaba.dubbo.rpc.RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arg1 == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"url == null"</span>);</span><br><span class="line">        com.alibaba.dubbo.common.URL url = arg1;</span><br><span class="line">        String extName = ( url.getProtocol() == <span class="keyword">null</span> ? <span class="string">"dubbo"</span> : url.getProtocol() );</span><br><span class="line">        <span class="keyword">if</span>(extName == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url("</span> + url.toString() + <span class="string">") use keys([protocol])"</span>);</span><br><span class="line">        com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);</span><br><span class="line">        <span class="keyword">return</span> extension.refer(arg0, arg1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> com.alibaba.dubbo.rpc.<span class="function">Exporter <span class="title">export</span><span class="params">(com.alibaba.dubbo.rpc.Invoker arg0)</span> <span class="keyword">throws</span> com.alibaba.dubbo.rpc.RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arg0 == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"com.alibaba.dubbo.rpc.Invoker argument == null"</span>);</span><br><span class="line">        <span class="keyword">if</span> (arg0.getUrl() == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"com.alibaba.dubbo.rpc.Invoker argument getUrl() == null"</span>);com.alibaba.dubbo.common.URL url = arg0.getUrl();</span><br><span class="line">        String extName = ( url.getProtocol() == <span class="keyword">null</span> ? <span class="string">"dubbo"</span> : url.getProtocol() );</span><br><span class="line">        <span class="keyword">if</span>(extName == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url("</span> + url.toString() + <span class="string">") use keys([protocol])"</span>);</span><br><span class="line">        com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);</span><br><span class="line">        <span class="keyword">return</span> extension.export(arg0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="injectExtension方法"><a href="#injectExtension方法" class="headerlink" title="injectExtension方法"></a>injectExtension方法</h3><p>该方法主要是进行依赖注入的，如果加载的方法存在扩展点的属性，并且这个方法是一个set方法，那么它会进行依赖注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">injectExtension</span><span class="params">(T instance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (objectFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Method method : instance.getClass().getMethods()) &#123;</span><br><span class="line">                   <span class="comment">// 如果有set方法</span></span><br><span class="line">                    <span class="keyword">if</span> (method.getName().startsWith(<span class="string">"set"</span>)</span><br><span class="line">                            &amp;&amp; method.getParameterTypes().length == <span class="number">1</span></span><br><span class="line">                            &amp;&amp; Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line">                        Class&lt;?&gt; pt = method.getParameterTypes()[<span class="number">0</span>];</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            String property = method.getName().length() &gt; <span class="number">3</span> ? method.getName().substring(<span class="number">3</span>, <span class="number">4</span>).toLowerCase() + method.getName().substring(<span class="number">4</span>) : <span class="string">""</span>;</span><br><span class="line">                           <span class="comment">// 通过objectFactory去获得一个实例对象</span></span><br><span class="line">                            Object object = objectFactory.getExtension(pt, property);</span><br><span class="line">                            <span class="keyword">if</span> (object != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                method.invoke(instance, object);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            logger.error(<span class="string">"fail to inject via method "</span> + method.getName()</span><br><span class="line">                                    + <span class="string">" of interface "</span> + type.getName() + <span class="string">": "</span> + e.getMessage(), e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码我们知道： Object object = objectFactory.getExtension(pt, property)就是它的核心过程，我们来看看：</p><p>还记得我们上一篇提到的在ExtensionLoader初始化时，有这么一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objectFactory = (type == ExtensionFactory.class ? <span class="keyword">null</span> : ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension());</span><br></pre></td></tr></table></figure><p>那么这个objectFactory和getAdaptiveExtension分别是什么呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExtensionFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get extension.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type object type.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name object name.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> object instance.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getExtension</span><span class="params">(Class&lt;T&gt; type, String name)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们查看源码知道：getExtension方法有三个实现类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AdaptiveExtensionFactory</span><br><span class="line">SpiExtensionFactory</span><br><span class="line">SpringExtensionFactory</span><br></pre></td></tr></table></figure><p>到这里我们知道它肯定会走AdaptiveExtensionFactory的getExtension方法，这是为什么呢？</p><p>想想我们的 @Adaptive注解的作用，就明白了，这是一个自定义的扩展点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Adaptive</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdaptiveExtensionFactory</span> <span class="keyword">implements</span> <span class="title">ExtensionFactory</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>通过上面的分析我们知道了 ： <strong>objectFactory=》AdaptiveExtensionFactory </strong></p><p><strong>Object object = AdaptiveExtensionFactory </strong></p><p>搜索所有的com.alibaba.dubbo.common.extension.ExtensionFactory我们找到三个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring=com.alibaba.dubbo.config.spring.extension.SpringExtensionFactory</span><br><span class="line">adaptive=com.alibaba.dubbo.common.extension.factory.AdaptiveExtensionFactory</span><br><span class="line">spi=com.alibaba.dubbo.common.extension.factory.SpiExtensionFactory</span><br></pre></td></tr></table></figure><p>那么这个factories=[spring=com.alibaba.dubbo.config.spring.extension.SpringExtensionFactory</p><p>spi=com.alibaba.dubbo.common.extension.factory.SpiExtensionFactory]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getExtension</span><span class="params">(Class&lt;T&gt; type, String name)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (ExtensionFactory factory : factories) &#123;</span><br><span class="line">           T extension = factory.getExtension(type, name);</span><br><span class="line">           <span class="keyword">if</span> (extension != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> extension;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="dubbo-源码分析之服务发布及注册流程"><a href="#dubbo-源码分析之服务发布及注册流程" class="headerlink" title="dubbo 源码分析之服务发布及注册流程"></a>dubbo 源码分析之服务发布及注册流程</h2><h3 id="服务发布源码入口"><a href="#服务发布源码入口" class="headerlink" title="服务发布源码入口"></a>服务发布源码入口</h3><p>在dubbo中，我们会配置类似这样的如下一些配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo应用名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demo-provider"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo注册中心地址 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册中心--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://192.168.1.104:2181"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo协议配置，默认使用dubbo，端口20880  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用Dubbo发布暴露的服务接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.gre.world.dubbo.user.IUserService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span> <span class="attr">protocol</span>=<span class="string">"dubbo"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo发布暴露的服务接口实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.gre.world.dubbo.user.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，在dubbo中，我们没有基于Spring的配置去做，而是dubbo本身提供的一些配置，那么Spring一定提供了自定义Schema标签的一些扩展机制。利用该扩展机制可以自定义扩展自己的标签。在dubbo扩展如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DubboNamespaceHandler extends NamespaceHandlerSupport Spring的扩展</span><br><span class="line">DubboBeanDefinitionParser extends BeanDefinitionParser Spring解析</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Version.checkDuplicate(DubboNamespaceHandler.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"application"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ApplicationConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"module"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ModuleConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"registry"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(RegistryConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"monitor"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(MonitorConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"provider"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProviderConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"consumer"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ConsumerConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"protocol"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProtocolConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"service"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ServiceBean.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"reference"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ReferenceBean.class, <span class="keyword">false</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"annotation"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(AnnotationBean.class, <span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道服务发布的入口是ServiceBean这个类，服务注册是ReferenceBean类</p><p>是通过下面路径找到的上述入口：</p><p>/META-INF/spring.handlers</p><p>dubbo-config -&gt; spring 文件解析入口</p><p>我们先带着一个问题去阅读Dubbo 服务发布的源码流程：</p><ul><li>启动一个服务的时候做了什么事（猜测一下：调用注册中心发布一个服务到zookeeper，启动一个Netty服务）</li></ul><p>我们来看看ServiceBean这个类：</p><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/dubbo/ServiceBean%E7%B1%BB%E5%9B%BE.png" alt="ServiceBean类图"></p><p>ServiceBean继承了InitializingBean、DisposableBean、ApplicationContextAware、ApplicationListener、BeanNameAware这几个类，那么这个类的作用在这里就不再叙述。实现InitializingBean的类，会在Spring Bean初始化的时候执行afterPropertiesSet方法。</p><h4 id="afterPropertiesSet方法"><a href="#afterPropertiesSet方法" class="headerlink" title="afterPropertiesSet方法"></a>afterPropertiesSet方法</h4><p>该方法会做很多判断，最终我们找到一个发布的入口export方法：首先判断是否有延迟启动设置，然后调用export方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">      <span class="keyword">if</span> (!isDelay()) &#123;</span><br><span class="line">            export();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ServiceConfig-export方法"><a href="#ServiceConfig-export方法" class="headerlink" title="ServiceConfig#export方法"></a>ServiceConfig#export方法</h4><p>在该方法中判断provider是否为空，如果不为空，则获取export对象和delay，使用非常粗暴的线程睡眠方式来处理延迟，不论是否延迟，都会去调用doExport方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">export</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (export == <span class="keyword">null</span>) &#123;</span><br><span class="line">               export = provider.getExport();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (delay == <span class="keyword">null</span>) &#123;</span><br><span class="line">               delay = provider.getDelay();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (export != <span class="keyword">null</span> &amp;&amp; !export.booleanValue()) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (delay != <span class="keyword">null</span> &amp;&amp; delay &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       Thread.sleep(delay);</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                   &#125;</span><br><span class="line">                   doExport();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">           thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">           thread.setName(<span class="string">"DelayExportServiceThread"</span>);</span><br><span class="line">           thread.start();</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           doExport();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="ServiceConfig-doExport方法"><a href="#ServiceConfig-doExport方法" class="headerlink" title="ServiceConfig#doExport方法"></a>ServiceConfig#doExport方法</h4><p>该方法对一些成员变量进行判断赋值，同时做一些应用的版本兼容、注册中心、协议等的检查，最后调用doExportUrls方法</p><h4 id="ServiceConfig-doExportUrls方法"><a href="#ServiceConfig-doExportUrls方法" class="headerlink" title="ServiceConfig#doExportUrls方法"></a>ServiceConfig#doExportUrls方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span>&#125;)</span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doExportUrls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     List&lt;URL&gt; registryURLs = loadRegistries(<span class="keyword">true</span>);<span class="comment">// 是不是获得注册中心的配置</span></span><br><span class="line">     <span class="keyword">for</span> (ProtocolConfig protocolConfig : protocols) &#123; <span class="comment">// 是否支持多协议发布处理</span></span><br><span class="line">         doExportUrlsFor1Protocol(protocolConfig, registryURLs);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>我们将这段代码分两部分：</p><p>List<url> registryURLs = loadRegistries(true);// 是不是获得注册中心的配置</url></p><p>loadRegistries该方法会处理注册中心的地址，由于我们这里使用的是zookeeper，那么它会处理成 zookeeper:// ip:port 这样的形式。</p><pre><code>for (ProtocolConfig protocolConfig : protocols) { // 是否支持多协议发布处理               doExportUrlsFor1Protocol(protocolConfig, registryURLs);}</code></pre><p>循环处理多协议支持，这里的protocolConfig其实就是&lt;dubbo:protocol &gt;这个标签配置的所有内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ServiceBean-doExportUrlsFor1Protocol方法"><a href="#ServiceBean-doExportUrlsFor1Protocol方法" class="headerlink" title="ServiceBean#doExportUrlsFor1Protocol方法"></a>ServiceBean#doExportUrlsFor1Protocol方法</h4><p>在该方法中，主要是获取协议配置名称和主机地址、协议端口号将其处理成协议的URL对象，然后把这个地址暴露出去。</p><p>URL对象如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dubbo://192.168.56.1:20880/com.gre.world.dubbo.user.IUserService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.5.4&amp;generic=false&amp;interface=com.gre.world.dubbo.user.IUserService&amp;methods=sayHello&amp;pid=1860&amp;side=provider&amp;timestamp=1530952106422</span><br></pre></td></tr></table></figure><p>在该方法中有一段很重要的核心逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (registryURLs != <span class="keyword">null</span> &amp;&amp; registryURLs.size() &gt; <span class="number">0</span></span><br><span class="line">                        &amp;&amp; url.getParameter(<span class="string">"register"</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (URL registryURL : registryURLs) &#123;</span><br><span class="line">                        url = url.addParameterIfAbsent(<span class="string">"dynamic"</span>, registryURL.getParameter(<span class="string">"dynamic"</span>));</span><br><span class="line">                        URL monitorUrl = loadMonitor(registryURL);</span><br><span class="line">                        <span class="keyword">if</span> (monitorUrl != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            url = url.addParameterAndEncoded(Constants.MONITOR_KEY, monitorUrl.toFullString());</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">                            logger.info(<span class="string">"Register dubbo service "</span> + interfaceClass.getName() + <span class="string">" url "</span> + url + <span class="string">" to registry "</span> + registryURL);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 通过proxyFactory来获取Invoker对象</span></span><br><span class="line">                        Invoker&lt;?&gt; invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString()));</span><br><span class="line">                        <span class="comment">// 注册服务</span></span><br><span class="line">                        Exporter&lt;?&gt; exporter = protocol.export(invoker);</span><br><span class="line">                        <span class="comment">// 将服务添加到List中</span></span><br><span class="line">                        exporters.add(exporter);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Invoker&lt;?&gt; invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, url);</span><br><span class="line"></span><br><span class="line">                    Exporter&lt;?&gt; exporter = protocol.export(invoker);</span><br><span class="line">                    exporters.add(exporter);</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><p>该代码非常复杂：这里有几行代码非常重要</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过proxyFactory来获取Invoker对象</span></span><br><span class="line">Invoker&lt;?&gt; invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString()));</span><br><span class="line"> <span class="comment">// 注册服务</span></span><br><span class="line">Exporter&lt;?&gt; exporter = protocol.export(invoker);</span><br><span class="line"><span class="comment">// 将服务添加到List中</span></span><br><span class="line">exporters.add(exporter);</span><br></pre></td></tr></table></figure><p>我们先分析第二段代码，至于为什么，理由如下：Invoker对象获取非常复杂，在不干扰我们整天流程的情况，可以先从简单的入手。</p><h5 id="Exporter-lt-gt-exporter-protocol-export-invoker-分析"><a href="#Exporter-lt-gt-exporter-protocol-export-invoker-分析" class="headerlink" title="Exporter&lt;?&gt; exporter = protocol.export(invoker)分析"></a>Exporter&lt;?&gt; exporter = protocol.export(invoker)分析</h5><p>我们来看看在这个场景下protocol是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();</span><br></pre></td></tr></table></figure><p>通过前面对SPI机制的分析，我们知道protocol应该使用Protocol$Adaptive。</p><p>它会调用Protocol$Adaptive#export方法，该方法的主要逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> com.alibaba.dubbo.rpc.<span class="function">Exporter <span class="title">export</span><span class="params">(com.alibaba.dubbo.rpc.Invoker arg0)</span> <span class="keyword">throws</span> com.alibaba.dubbo.rpc.RpcException </span>&#123;</span><br><span class="line">     <span class="comment">// 判断Invoker对象是否为空</span></span><br><span class="line">      <span class="keyword">if</span> (arg0 == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"com.alibaba.dubbo.rpc.Invoker argument == null"</span>);</span><br><span class="line">     <span class="comment">// URL为空，报错</span></span><br><span class="line">      <span class="keyword">if</span> (arg0.getUrl() == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"com.alibaba.dubbo.rpc.Invoker argument getUrl() == null"</span>);com.alibaba.dubbo.common.URL url = arg0.getUrl();</span><br><span class="line">     <span class="comment">// 根据URL获取扩展点指定的名称，默认名称为dubbo</span></span><br><span class="line">      String extName = ( url.getProtocol() == <span class="keyword">null</span> ? <span class="string">"dubbo"</span> : url.getProtocol() );</span><br><span class="line">      <span class="keyword">if</span>(extName == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url("</span> + url.toString() + <span class="string">") use keys([protocol])"</span>);</span><br><span class="line">     <span class="comment">// 根据getExtension方法获取一个指定名称的扩展点</span></span><br><span class="line">      com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);</span><br><span class="line">      <span class="keyword">return</span> extension.export(arg0);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Protocol extension = (Protocol)ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(extName);</p><p>这个extension是什么？</p><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/dubbo/invoker%E5%AE%9E%E4%BE%8B.png" alt="invoker实例"></p><p>这个invoker里面有URL地址</p><p>那么我们拿到的URL应该下面这种形式的：</p><p>registry://192.168.1….</p><p>这个<strong>extName=registry</strong> </p><p>Protocol extension =ExtensionLoader.<em>getExtensionLoader</em>(Protocol.class).getExtension(extName);</p><p>registry=com.alibaba.dubbo.registry.integration.RegistryProtocol</p><p><strong>这个extension应该就是一个指定名称的扩展点：RegistryProtocol</strong></p><p>那么最终会调用：RegistryProtocol的export方法</p><p>PS：这段代码设计非常好，使用了适配器，我们增加扩展点，不需要写很多if else if 。。。这样的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dubbo://</span><br><span class="line">rmi://</span><br><span class="line">hessian://</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(dubbo)</span><br><span class="line"></span><br><span class="line">else if(rmi</span><br><span class="line"></span><br><span class="line">elseif (hessian)</span><br><span class="line"></span><br><span class="line">else if(myprotocol…</span><br></pre></td></tr></table></figure><p>这就是自适应扩展点的优势。</p><h4 id="RegistryProtocol的export方法"><a href="#RegistryProtocol的export方法" class="headerlink" title="RegistryProtocol的export方法"></a>RegistryProtocol的export方法</h4><p>这个方法有一行重要的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ExporterChangeableWrapper&lt;T&gt; exporter = doLocalExport(originInvoker);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">ExporterChangeableWrapper&lt;T&gt; <span class="title">doLocalExport</span><span class="params">(<span class="keyword">final</span> Invoker&lt;T&gt; originInvoker)</span> </span>&#123;</span><br><span class="line">        String key = getCacheKey(originInvoker);</span><br><span class="line">        ExporterChangeableWrapper&lt;T&gt; exporter = (ExporterChangeableWrapper&lt;T&gt;) bounds.get(key);</span><br><span class="line">        <span class="keyword">if</span> (exporter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (bounds) &#123;</span><br><span class="line">                exporter = (ExporterChangeableWrapper&lt;T&gt;) bounds.get(key);</span><br><span class="line">                <span class="keyword">if</span> (exporter == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">final</span> Invoker&lt;?&gt; invokerDelegete = <span class="keyword">new</span> InvokerDelegete&lt;T&gt;(originInvoker, getProviderUrl(originInvoker));</span><br><span class="line">                    exporter = <span class="keyword">new</span> ExporterChangeableWrapper&lt;T&gt;((Exporter&lt;T&gt;) protocol.export(invokerDelegete), originInvoker);</span><br><span class="line">                    bounds.put(key, exporter);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (ExporterChangeableWrapper&lt;T&gt;) exporter;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>doLocalExport有两行重要的代码：他会封装一个invokerDelegete，然后调用protocol.export</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Invoker&lt;?&gt; invokerDelegete = <span class="keyword">new</span> InvokerDelegete&lt;T&gt;(originInvoker, getProviderUrl(originInvoker));</span><br><span class="line">exporter = <span class="keyword">new</span> ExporterChangeableWrapper&lt;T&gt;((Exporter&lt;T&gt;) protocol.export(invokerDelegete), originInvoker);</span><br></pre></td></tr></table></figure><p>我们先分析第二行代码：exporter = new ExporterChangeableWrapper<t>((Exporter<t>) protocol.export(invokerDelegete), originInvoker) 这个protocol应该是ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptive()方法获取的自适应扩展点 Protocol$Adaptive（这个代码就不贴了）,我们回到RegistryProtocol的开头：</t></t></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Protocol protocol;</span><br><span class="line">....</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProtocol</span><span class="params">(Protocol protocol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.protocol = protocol;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>我们知道，如果定义了扩展点并且有一个set方法，那么它在加载的时候就会注入该扩展点到缓存。</p><p>那么这个Protocol$Adaptive中的</p><p><em>Protocol extension =ExtensionLoader.</em>getExtensionLoader*(Protocol.class).getExtension(extName)  又是什么？（猜测一下 :smile:）</p><details><br>  <summary>extension分析</summary><br>  这个URL到这里应该是dubbo了，那么这个extName=dubbo，<br><br><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/dubbo/invokerDelegate%E5%AE%9E%E4%BE%8B.png" alt="invokerDelegate实例"><br><br>而com.alibaba.dubbo.rpc.Protocol文件内容如下：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filter=com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper</span><br><span class="line">listener=com.alibaba.dubbo.rpc.protocol.ProtocolListenerWrapper</span><br><span class="line">mock=com.alibaba.dubbo.rpc.support.MockProtocol</span><br></pre></td></tr></table></figure><br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtocolFilterWrapper</span> <span class="keyword">implements</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Protocol protocol;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProtocolFilterWrapper</span><span class="params">(Protocol protocol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (protocol == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"protocol == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.protocol = protocol;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtocolListenerWrapper</span> <span class="keyword">implements</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Protocol protocol;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProtocolListenerWrapper</span><span class="params">(Protocol protocol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (protocol == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"protocol == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.protocol = protocol;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br><br>我们在前面的分析中已经讲过，如果这个扩展点有包装类，它会去加载，之前讲过ExtensionLoader的方法如下<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">private</span> T <span class="title">createExtension</span><span class="params">(String name)</span> </span>&#123; <span class="comment">// 这时的name=dubbo</span></span><br><span class="line">       Class&lt;?&gt; clazz = getExtensionClasses().get(name);</span><br><span class="line">     。。。</span><br><span class="line">       <span class="comment">// 这个wrapperClasses是通过loadFile加载而来的</span></span><br><span class="line">       Set&lt;Class&lt;?&gt;&gt; wrapperClasses = cachedWrapperClasses;</span><br><span class="line">           <span class="keyword">if</span> (wrapperClasses != <span class="keyword">null</span> &amp;&amp; wrapperClasses.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">for</span> (Class&lt;?&gt; wrapperClass : wrapperClasses) &#123;</span><br><span class="line">                   instance = injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance));</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><br><br>所以这个extension应该是ProtocolFilterWrapper(ProtocolListenerWrapper(DubboProtocol))，这里实际上是链式调用。<br><br></details><h5 id="ProtocolFilterWrapper-export方法分析"><a href="#ProtocolFilterWrapper-export方法分析" class="headerlink" title="ProtocolFilterWrapper#export方法分析"></a>ProtocolFilterWrapper#export方法分析</h5><p>在这个方法中，获取所有的Filter，然后调用buildInvokerChain方法进行链式调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  public &lt;T&gt; Exporter&lt;T&gt; export(Invoker&lt;T&gt; invoker) throws RpcException &#123;</span><br><span class="line">        if (Constants.REGISTRY_PROTOCOL.equals(invoker.getUrl().getProtocol())) &#123;</span><br><span class="line">            return protocol.export(invoker);</span><br><span class="line">        &#125;</span><br><span class="line">        return protocol.export(buildInvokerChain(invoker, Constants.SERVICE_FILTER_KEY, Constants.PROVIDER));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">private static &lt;T&gt; Invoker&lt;T&gt; buildInvokerChain(final Invoker&lt;T&gt; invoker, String key, String group) &#123;</span><br><span class="line">          Invoker&lt;T&gt; last = invoker;</span><br><span class="line">          List&lt;Filter&gt; filters = ExtensionLoader.getExtensionLoader(Filter.class).getActivateExtension(invoker.getUrl(), key, group);</span><br></pre></td></tr></table></figure><p>这个getActivateExtension是一个自动激活的扩展点，它会去加载路径下的所有filter。这个filters内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">echo=com.alibaba.dubbo.rpc.filter.EchoFilter</span><br><span class="line">generic=com.alibaba.dubbo.rpc.filter.GenericFilter</span><br><span class="line">genericimpl=com.alibaba.dubbo.rpc.filter.GenericImplFilter</span><br><span class="line">token=com.alibaba.dubbo.rpc.filter.TokenFilter</span><br><span class="line">accesslog=com.alibaba.dubbo.rpc.filter.AccessLogFilter</span><br><span class="line">activelimit=com.alibaba.dubbo.rpc.filter.ActiveLimitFilter</span><br><span class="line">classloader=com.alibaba.dubbo.rpc.filter.ClassLoaderFilter</span><br><span class="line">context=com.alibaba.dubbo.rpc.filter.ContextFilter</span><br><span class="line">consumercontext=com.alibaba.dubbo.rpc.filter.ConsumerContextFilter</span><br><span class="line">exception=com.alibaba.dubbo.rpc.filter.ExceptionFilter</span><br><span class="line">executelimit=com.alibaba.dubbo.rpc.filter.ExecuteLimitFilter</span><br><span class="line">deprecated=com.alibaba.dubbo.rpc.filter.DeprecatedFilter</span><br><span class="line">compatible=com.alibaba.dubbo.rpc.filter.CompatibleFilter</span><br><span class="line">timeout=com.alibaba.dubbo.rpc.filter.TimeoutFilter</span><br></pre></td></tr></table></figure><h5 id="ProtocolListenerWrapper-export方法分析"><a href="#ProtocolListenerWrapper-export方法分析" class="headerlink" title="ProtocolListenerWrapper#export方法分析"></a>ProtocolListenerWrapper#export方法分析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Exporter&lt;T&gt; <span class="title">export</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Constants.REGISTRY_PROTOCOL.equals(invoker.getUrl().getProtocol())) &#123;</span><br><span class="line">        <span class="keyword">return</span> protocol.export(invoker);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ListenerExporterWrapper&lt;T&gt;(protocol.export(invoker),<span class="comment">// protocol=DubboProtocol</span></span><br><span class="line">            Collections.unmodifiableList(ExtensionLoader.getExtensionLoader(ExporterListener.class)</span><br><span class="line">                    .getActivateExtension(invoker.getUrl(), Constants.EXPORTER_LISTENER_KEY)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终于到了DubboProtocol这个类了。</p><h4 id="DubboProtocol-export方法分析"><a href="#DubboProtocol-export方法分析" class="headerlink" title="DubboProtocol#export方法分析"></a>DubboProtocol#export方法分析</h4><p>未完待续….</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过上一篇对Dubbo SPI机制的源码分析，我们知道，Extension.getExtensionLoader().getAdaptiveExtension();会动态生成Protocol$Adaptive&lt;/p&gt;
&lt;p&gt;同时也知道知道&lt;/p&gt;
&lt;p&gt;@SPI(“”): 
      
    
    </summary>
    
      <category term="分布式服务治理-dubb" scheme="https://grezhang.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86-dubb/"/>
    
    
      <category term="分布式服务治理" scheme="https://grezhang.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/"/>
    
      <category term="dubbo" scheme="https://grezhang.github.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>分布式服务治理-dubbo（四）源码分析之SPI</title>
    <link href="https://grezhang.github.io/2017/07/01/dubbo/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86-dubbo%EF%BC%88%E5%9B%9B%EF%BC%89%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8BSPI/"/>
    <id>https://grezhang.github.io/2017/07/01/dubbo/分布式服务治理-dubbo（四）源码分析之SPI/</id>
    <published>2017-07-01T04:12:56.000Z</published>
    <updated>2018-07-10T15:51:25.778Z</updated>
    
    <content type="html"><![CDATA[<p>本篇我们进入Dubbo的源码分析篇，先来学习Dubbo一个非常重要的机制：SPI。</p><p>在学习Dubbo的SPI之前，我们先要了解Java的SPI，主要解决几个问题：</p><ul><li>什么是SPI？</li><li>Java的SPI机制的规范及原理</li><li>dubbo的SPI规范</li><li>dubbo的SPI机制原理</li><li>如何利用dubbo的SPI去扩展dubbo的功能？</li></ul><h2 id="什么是SPI"><a href="#什么是SPI" class="headerlink" title="什么是SPI"></a>什么是SPI</h2><p>请参考<a href="https://zhuanlan.zhihu.com/p/28909673" target="_blank" rel="noopener">知乎</a> 上的，上面分析得很到位，由浅入深的讲解了什么是SPI以及SPI的思想。</p><p>可以看看官方的解释：看着还是一脸懵逼</p><p>SPI 全称为 (Service Provider Interface) ,是JDK内置的一种服务提供发现机制。<br>目前有不少框架用它来做服务的扩展发现， 简单来说，它就是一种动态替换发现的机制， 举个例子来说，<br>有个接口，想运行时动态的给它添加实现，你只需要添加一个实现。 <strong>形成一种插拔式的扩展手段。</strong></p><h2 id="Java的SPI机制的规范及原理"><a href="#Java的SPI机制的规范及原理" class="headerlink" title="Java的SPI机制的规范及原理"></a>Java的SPI机制的规范及原理</h2><h3 id="Java-SPI规范如下："><a href="#Java-SPI规范如下：" class="headerlink" title="Java SPI规范如下："></a>Java SPI规范如下：</h3><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/dubbo/Java%20SPI.jpg" alt="Java SPI"></p><h3 id="实现一个SPI机制"><a href="#实现一个SPI机制" class="headerlink" title="实现一个SPI机制"></a>实现一个SPI机制</h3><p>实现的代码流程如下：</p><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/dubbo/Java%20SPI%E4%BD%BF%E7%94%A8.png" alt="Java SPI使用"></p><h4 id="定义规范"><a href="#定义规范" class="headerlink" title="定义规范"></a>定义规范</h4><p>创建一个规范工程DataBaseDriver</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gre.world.driver<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>DataBaseDriver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>DataBaseDriver<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.20.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gre.world.driver;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 风骚的GRE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descriptions</span> 定义一个数据库连接规范</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/30.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DataBaseDirver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">connect</span><span class="params">(String host,<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包到本地仓库: mvn install</p><h4 id="MySQL数据库实现"><a href="#MySQL数据库实现" class="headerlink" title="MySQL数据库实现"></a>MySQL数据库实现</h4><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gre.world.driver.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-driver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mysql-driver<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gre.world.driver<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>DataBaseDriver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.20.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gre.world.driver.mysql;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gre.world.driver.DataBaseDirver;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 风骚的GRE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descriptions</span> MySQL实现的规范</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/30.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlDataBaseDriver</span> <span class="keyword">implements</span> <span class="title">DataBaseDirver</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">connect</span><span class="params">(String host, <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MySQL connecting host:"</span>+host+<span class="string">" and por:"</span>+port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在resources目录下创建:META-INF/services目录，然后创建com.gre.world.driver.DataBaseDirver文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.gre.world.driver.mysql.MysqlDataBaseDriver</span><br></pre></td></tr></table></figure><h4 id="Oracle数据库实现"><a href="#Oracle数据库实现" class="headerlink" title="Oracle数据库实现"></a>Oracle数据库实现</h4><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gre.world.driver.oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>oracle-driver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>oracle-driver<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gre.world.driver<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>DataBaseDriver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.20.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gre.world.driver.oracle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gre.world.driver.DataBaseDirver;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 风骚的GRE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descriptions</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/30.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OracleDataBaseDriver</span> <span class="keyword">implements</span> <span class="title">DataBaseDirver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">connect</span><span class="params">(String host, <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Oracle connecting host:"</span>+host+<span class="string">" and por:"</span>+port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在resources目录下创建:META-INF/services目录，然后创建com.gre.world.driver.DataBaseDirver，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.gre.world.driver.oracle.OracleDataBaseDriver</span><br></pre></td></tr></table></figure><p>打包到本地仓库: mvn install</p><h4 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h4><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gre.world.driver.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dubbo-server<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gre.world.driver.oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>oracle-driver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gre.world.driver.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-driver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.20.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gre.world.driver.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gre.world.driver.DataBaseDirver;</span><br><span class="line"><span class="keyword">import</span> com.gre.world.driver.mysql.MysqlDataBaseDriver;</span><br><span class="line"><span class="keyword">import</span> com.gre.world.driver.oracle.OracleDataBaseDriver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ServiceLoader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 风骚的GRE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descriptions</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/30.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBaseConnect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ServiceLoader&lt;DataBaseDirver&gt; dataBaseDirvers = ServiceLoader.load(DataBaseDirver.class);</span><br><span class="line">        <span class="keyword">for</span> (DataBaseDirver dirver:dataBaseDirvers)&#123;</span><br><span class="line">            <span class="keyword">if</span> (dirver <span class="keyword">instanceof</span> OracleDataBaseDriver)&#123;</span><br><span class="line">                System.out.println(dirver.connect(<span class="string">"127.0.0.1"</span>,<span class="number">1521</span>));</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dirver <span class="keyword">instanceof</span> MysqlDataBaseDriver)&#123;</span><br><span class="line">                System.out.println(dirver.connect(<span class="string">"127.0.0.1"</span>,<span class="number">3306</span>));</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Oracle connecting host:127.0.0.1 and por:1521</span><br><span class="line">MySQL connecting host:127.0.0.1 and por:3306</span><br></pre></td></tr></table></figure><h3 id="Java-SPI总结"><a href="#Java-SPI总结" class="headerlink" title="Java SPI总结"></a>Java SPI总结</h3><h4 id="SPI-规范总结"><a href="#SPI-规范总结" class="headerlink" title="SPI 规范总结"></a>SPI 规范总结</h4><p>实现 SPI，就需要按照 SPI 本身定义的规范来进行配置，SPI规范如下</p><p>1.需要在 classpath 下创建一个目录，该目录命名必须是：</p><p>META-INF/services</p><p>2.在该目录下创建一个 properties 文件，该文件需要满足以下几个条件</p><p>a)文件名必须是扩展的接口的全路径名称</p><p>b)文件内部描述的是该扩展接口的所有实现类</p><p>c)文件的编码格式是 UTF-8</p><p>3.通过 java.util.ServiceLoader 的加载机制来发现</p><h4 id="SPI-的实际应用"><a href="#SPI-的实际应用" class="headerlink" title="SPI 的实际应用"></a>SPI 的实际应用</h4><p>SPI 在很多地方有应用，大家可以看看最常用的 java.sql.Driver 驱动。JDK 官方提供了 java.sql.Driver 这个驱动扩展点，但是你们并没有看到 JDK 中有对应的 Driver 实现。 那在哪里实现呢？</p><p>以连接 Mysql 为例，我们需要添加 mysql-connector-java 依赖。然后，你们可以在这个 jar 包中找到 SPI 的配置信息。</p><p>如下图，所以 java.sql.Driver 由各个数据库厂商自行实现。这就是 SPI 的实际应用。当然除了这个意外，大家在 spring 的包中也可以看到相应的痕迹</p><h5 id="SPI-的缺点"><a href="#SPI-的缺点" class="headerlink" title="SPI 的缺点"></a>SPI 的缺点</h5><p>1.JDK 标准的 SPI 会一次性加载实例化扩展点的所有实现，什么意思呢？就是如果你在 META-INF/service 下的文件里面加了 N 个实现类，那么 JDK 启动的时候都会一次性全部加载。那么如果有的扩展点实现初始化很耗时或者如果有些实现类并没有用到，那么会很浪费资源</p><p>如果扩展点加载失败，会导致调用方报错，而且这个错误很难定位到是这个原因</p><h2 id="dubbo的SPI规范"><a href="#dubbo的SPI规范" class="headerlink" title="dubbo的SPI规范"></a>dubbo的SPI规范</h2><p>基于 Dubbo 提供的 SPI 规范实现自己的扩展</p><p>在了解 Dubbo 的 SPI 机制之前，先通过一段代码初步了解</p><p>代码先不写了，看官网例子即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gre.world.dubbo.user.spi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.URL;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.Exporter;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.Invoker;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.Protocol;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.RpcException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 风骚的GRE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descriptions</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/7/1.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProtocol</span> <span class="keyword">implements</span> <span class="title">Protocol</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDefaultPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">8888</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Exporter&lt;T&gt; <span class="title">export</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">refer</span><span class="params">(Class&lt;T&gt; aClass, URL url)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在resources/META-INF/services下创建com.alibaba.dubbo.rpc.Protocol文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defineProtocol=com.gre.world.dubbo.user.spi.MyProtocol</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gre.world.dubbo.user.bootstrap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.extension.ExtensionLoader;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.Protocol;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 风骚的GRE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descriptions</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/7/1.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SPIBootstrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">                <span class="keyword">new</span> String[] &#123;<span class="string">"MATE-INF/spring/provider.xml"</span>&#125;);</span><br><span class="line">        context.start();</span><br><span class="line">        Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(<span class="string">"defineProtocol"</span>);</span><br><span class="line">        System.out.println(protocol.getDefaultPort());</span><br><span class="line">        <span class="comment">// press any key to exit</span></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dubbo 的实现方式，这样，我们就能够形成一个对比，得到这两种实现方式的差异</p><p>大部分的思想都是和 SPI 是一样，只是下面两个地方有差异。</p><p>1.需要在 resource 目录下配置 META-INF/dubbo 或者 META-INF/dubbo/internal 或者 META-INF/services，并基于 SPI 接口去创建一个文件</p><p>文件名称和接口名称保持一致，文件内容和 SPI 有差异，内容是 KEY 对应 Value</p><h2 id="Dubbo-SPI-机制源码阅读"><a href="#Dubbo-SPI-机制源码阅读" class="headerlink" title="Dubbo SPI 机制源码阅读"></a>Dubbo SPI 机制源码阅读</h2><p>我们必须要知道，下面这两段代码，到底做了什么，以及会返回一个什么样的结果，如果这个不清楚，后续的代码阅读，你就没办法清晰学习。</p><ul><li>ps: 源码阅读，带着疑问去了解【为什么传入一个 myProtocol 就能获得自定义的 DefineProtocol 对象】、</li></ul><p>getAdaptiveExtension 是一个什么东西？</p><ul><li>源码阅读入口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. Protocol protocol = ExtensionLoader. getExtensionLoader(Protocol.class).getExtension(<span class="string">"myProtocol"</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class). getAdaptiveExtension();</span><br></pre></td></tr></table></figure><p>我们基于第二段代码来分析，至于为什么不用第一段，利用如下：</p><p>1.在dubbo服务发布的过程中，会有这段代码的体现</p><p>2.分析完下面这一段代码，对第一段的理解会很容易：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class). getAdaptiveExtension();</span><br></pre></td></tr></table></figure><ul><li>第一段是通过Class去获取一个ExtensionLoader对象，有点类似一个工厂模式。</li></ul><p>第一段是通过Class去获取一个ExtensionLoader对象，有点类似一个工厂模式。</p><ul><li>第二段getAdaptiveExtension去获取一个自适应扩展点。</li></ul><h3 id="Extension源码结构"><a href="#Extension源码结构" class="headerlink" title="Extension源码结构"></a>Extension源码结构</h3><p>了解源码结构，建立一个全局认识，结构图如下：</p><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/dubbo/SPI%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="SPI源码结构图"></p><h3 id="初步了解这些源码在扩展点中的痕迹"><a href="#初步了解这些源码在扩展点中的痕迹" class="headerlink" title="初步了解这些源码在扩展点中的痕迹"></a>初步了解这些源码在扩展点中的痕迹</h3><h4 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h4><p>以下是Protocol的源码，可以看到在这个源码中有两个注解，一个是类级别上的@SPI(“dubbo”),另一个是方法级别上的@Adaptive</p><p>@SPI表示当前的接口是一个扩展点，可以实现自己的扩展实现，默认的扩展接口是DubboProtocol</p><p>@Adaptive表示是一个自适应扩展点，在方法级别上，会动态生成一个适配器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI</span>(<span class="string">"dubbo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取缺省端口，当用户没有配置端口时使用。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缺省端口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getDefaultPort</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暴露远程服务：&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 1. 协议在接收请求时，应记录请求来源方地址信息：RpcContext.getContext().setRemoteAddress();&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 2. export()必须是幂等的，也就是暴露同一个URL的Invoker两次，和暴露一次没有区别。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 3. export()传入的Invoker由框架实现并传入，协议不需要关心。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;     服务的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invoker 服务的执行体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> exporter 暴露服务的引用，用于取消暴露</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RpcException 当暴露服务出错时抛出，比如端口已占用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Adaptive</span></span><br><span class="line">    &lt;T&gt; <span class="function">Exporter&lt;T&gt; <span class="title">export</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 引用远程服务：&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 1. 当用户调用refer()所返回的Invoker对象的invoke()方法时，协议需相应执行同URL远端export()传入的Invoker对象的invoke()方法。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 2. refer()返回的Invoker由协议实现，协议通常需要在此Invoker中发送远程请求。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 3. 当url中有设置check=false时，连接失败不能抛出异常，并内部自动恢复。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;  服务的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 服务的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url  远程服务的URL地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> invoker 服务的本地代理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RpcException 当连接服务提供方失败时抛出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Adaptive</span></span><br><span class="line">    &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">refer</span><span class="params">(Class&lt;T&gt; type, URL url)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放协议：&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 1. 取消该协议所有已经暴露和引用的服务。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 2. 释放协议所占用的所有资源，比如连接和端口。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 3. 协议在释放后，依然能暴露和引用新的服务。&lt;br&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="getExtensionLoader"><a href="#getExtensionLoader" class="headerlink" title="getExtensionLoader"></a>getExtensionLoader</h4><p>该方法需要一个Class类型的参数，该参数表示希望加载的扩展点类型，该参数必须是接口，且该接口必须被@SPI注解注释，否则拒绝处理。检查通过后会检查ExtensionLoader缓存中是否已经存在该扩展点对应的ExtensionLoader，如果有则直接返回，否则，创建一个新的ExtensionLoader负责加载该扩展实现，同时将其缓存起来。可以看到对于每一个扩展，dubbo会有一个对应的ExtensionLoader实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ExtensionLoader&lt;T&gt; <span class="title">getExtensionLoader</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (type == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Extension type == null"</span>);</span><br><span class="line">       <span class="keyword">if</span> (!type.isInterface()) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Extension type("</span> + type + <span class="string">") is not interface!"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 检查Class类型的参数，该参数表示希望加载的扩展点类型，该参数必须是接口，且该接口必须被@SPI注解注释</span></span><br><span class="line">       <span class="keyword">if</span> (!withExtensionAnnotation(type)) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Extension type("</span> + type +</span><br><span class="line">                   <span class="string">") is not extension, because WITHOUT @"</span> + SPI.class.getSimpleName() + <span class="string">" Annotation!"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 先从缓存中获取ExtensionLoader</span></span><br><span class="line">       ExtensionLoader&lt;T&gt; loader = (ExtensionLoader&lt;T&gt;) EXTENSION_LOADERS.get(type);</span><br><span class="line">       <span class="comment">// 如果缓存中没有实例</span></span><br><span class="line">       <span class="keyword">if</span> (loader == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="comment">// 则创建并且缓存该实例</span></span><br><span class="line">           EXTENSION_LOADERS.putIfAbsent(type, <span class="keyword">new</span> ExtensionLoader&lt;T&gt;(type));</span><br><span class="line">           loader = (ExtensionLoader&lt;T&gt;) EXTENSION_LOADERS.get(type);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> loader;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>ExtensionLoader提供了两个私有构造函数，并且在这里面对两个成员变量type/objectFactory进行赋值,而objectFactory是什么呢？这里先留一个悬念。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ExtensionLoader</span><span class="params">(Class&lt;?&gt; type)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.type = type;</span><br><span class="line">       objectFactory = (type == ExtensionFactory.class ? <span class="keyword">null</span> : ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="getAdaptiveExtension"><a href="#getAdaptiveExtension" class="headerlink" title="getAdaptiveExtension"></a>getAdaptiveExtension</h4><p>通过getExtensionLoader获得了对应的ExtensionLoader实例以后，再调用getAdaptiveExtension方法来获得一个自适应扩展点。接下来我们来看看代码的实现</p><p>ps：简单对自适应扩展点做一个解释，大家一定了解过适配器模式，而这个自适应扩展点就是一个适配器。</p><p>在这个方法里面主要做几个事情：</p><ul><li>从cachedAdaptiveInstance这个缓存中获得一个对象实例。</li><li>如果实例为空，则说明是第一次加载，则通过一个双重检查锁的方式去创建一个适配器扩展点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> T <span class="title">getAdaptiveExtension</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 先从缓存中获取对象实例</span></span><br><span class="line">       Object instance = cachedAdaptiveInstance.get();</span><br><span class="line">       <span class="comment">// 如果为空，则使用双重检查锁方式创建一个实例</span></span><br><span class="line">       <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (createAdaptiveInstanceError == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">synchronized</span> (cachedAdaptiveInstance) &#123;</span><br><span class="line">                   instance = cachedAdaptiveInstance.get();</span><br><span class="line">                   <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                       <span class="keyword">try</span> &#123;</span><br><span class="line">                           <span class="comment">// 创建对象实例</span></span><br><span class="line">                           instance = createAdaptiveExtension();</span><br><span class="line">                           <span class="comment">// 设置到缓存中</span></span><br><span class="line">                           cachedAdaptiveInstance.set(instance);</span><br><span class="line">                       &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                           createAdaptiveInstanceError = t;</span><br><span class="line">                           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"fail to create adaptive instance: "</span> + t.toString(), t);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"fail to create adaptive instance: "</span> + createAdaptiveInstanceError.toString(), createAdaptiveInstanceError);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> (T) instance;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="createAdaptiveExtension"><a href="#createAdaptiveExtension" class="headerlink" title="createAdaptiveExtension"></a>createAdaptiveExtension</h4><p>上面有一个重要的方法createAdaptiveExtension,我们来分析该方法做了什么？</p><p>这段代码有两个结构，一个是injectExtension，另一个是getAdaptiveExtensionClass，我们需要了解一下getAdaptiveExtensionClass方法做了什么？很显然，从后面的newInstance()来看，应该是获得一个类并且进行实例创建。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">private</span> T <span class="title">createAdaptiveExtension</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> injectExtension((T) getAdaptiveExtensionClass().newInstance());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Can not create adaptive extenstion "</span> + type + <span class="string">", cause: "</span> + e.getMessage(), e);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="getAdaptiveExtensionClass"><a href="#getAdaptiveExtensionClass" class="headerlink" title="getAdaptiveExtensionClass"></a>getAdaptiveExtensionClass</h4><p>从方法名来看，是获得一个适配器扩展点的类，在这段代码中做了两个事情：</p><ul><li>getExtensionClasses加载所有路径下的扩展点</li><li>createAdaptiveExtensionClass动态创建一个扩展点</li></ul><p>cachedAdaptiveClass这里会有一个判断，用来判断当前Protocol扩展点是否存在一个自定义的适配器，如果有，则直接返回自定义适配器，否则，就动态创建，这个值是在getExtensionClasses方法中进行赋值的，这块代码我们稍后再看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;?&gt; getAdaptiveExtensionClass() &#123;</span><br><span class="line">       getExtensionClasses();</span><br><span class="line">       <span class="keyword">if</span> (cachedAdaptiveClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> cachedAdaptiveClass;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> cachedAdaptiveClass = createAdaptiveExtensionClass();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="createAdaptiveExtensionClass"><a href="#createAdaptiveExtensionClass" class="headerlink" title="createAdaptiveExtensionClass"></a>createAdaptiveExtensionClass</h4><p>该方法主要是动态生成适配器代码，以及动态编译</p><ul><li>createAdaptiveExtensionClassCode动态创建一个字节码文件，返回code这个字符串</li><li>通过compiler.compile进行编译，默认情况下使用javassist</li><li>通过ClassLoader加载到JVM中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;?&gt; createAdaptiveExtensionClass() &#123;</span><br><span class="line">        String code = createAdaptiveExtensionClassCode();</span><br><span class="line">        ClassLoader classLoader = findClassLoader();</span><br><span class="line">        com.alibaba.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension();</span><br><span class="line">        <span class="keyword">return</span> compiler.compile(code, classLoader);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>CODE字节码内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.extension.ExtensionLoader;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Protocol</span>$<span class="title">Adpative</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">alibaba</span>.<span class="title">dubbo</span>.<span class="title">rpc</span>.<span class="title">Protocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDefaultPort</span><span class="params">()</span> </span>&#123;<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> com.alibaba.dubbo.rpc.<span class="function">Invoker <span class="title">refer</span><span class="params">(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1)</span> <span class="keyword">throws</span> com.alibaba.dubbo.rpc.RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arg1 == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"url == null"</span>);</span><br><span class="line">        com.alibaba.dubbo.common.URL url = arg1;</span><br><span class="line">        String extName = ( url.getProtocol() == <span class="keyword">null</span> ? <span class="string">"dubbo"</span> : url.getProtocol() );</span><br><span class="line">        <span class="keyword">if</span>(extName == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url("</span> + url.toString() + <span class="string">") use keys([protocol])"</span>);</span><br><span class="line">        com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);</span><br><span class="line">        <span class="keyword">return</span> extension.refer(arg0, arg1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> com.alibaba.dubbo.rpc.<span class="function">Exporter <span class="title">export</span><span class="params">(com.alibaba.dubbo.rpc.Invoker arg0)</span> <span class="keyword">throws</span> com.alibaba.dubbo.rpc.RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arg0 == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"com.alibaba.dubbo.rpc.Invoker argument == null"</span>);</span><br><span class="line">        <span class="keyword">if</span> (arg0.getUrl() == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"com.alibaba.dubbo.rpc.Invoker argument getUrl() == null"</span>);com.alibaba.dubbo.common.URL url = arg0.getUrl();</span><br><span class="line">        String extName = ( url.getProtocol() == <span class="keyword">null</span> ? <span class="string">"dubbo"</span> : url.getProtocol() );</span><br><span class="line">        <span class="keyword">if</span>(extName == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url("</span> + url.toString() + <span class="string">") use keys([protocol])"</span>);</span><br><span class="line">        com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);</span><br><span class="line">        <span class="keyword">return</span> extension.export(arg0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Protocol-Adpative主要功能"><a href="#Protocol-Adpative主要功能" class="headerlink" title="Protocol$Adpative主要功能"></a>Protocol$Adpative主要功能</h4><p>通过上面的代码分析，我们可以知道，该类的主要功能是：</p><ul><li>从URL或扩展接口获取扩展接口实现类的名称</li><li>根据名称获取实现类ExtensionLoader.getExtensionLoader(扩展接口).getExtension(扩展接口实现类名称)</li></ul><p>需要明白一点，dubbo的内部传参都是基于URL来实现的，也就是说dubbo是基于URL驱动的技术。所以适配器类的目的是在运行期获取扩展接口的真正实现类来调用，解耦接口和实现，这样的话要不就我们实现自己的适配器类，要不就dubbo来帮我们生成，而这些都是通过@Adaptive来实现。</p><h4 id="getAdaptiveExtension整体流程"><a href="#getAdaptiveExtension整体流程" class="headerlink" title="getAdaptiveExtension整体流程"></a>getAdaptiveExtension整体流程</h4><p>到目前为止，我们的getAdaptiveExtension的主线走完了，我们来简单整理一下他们的调用关系：</p><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/dubbo/getAdaptiveExtension%E8%B0%83%E7%94%A8%E9%A1%BA%E5%BA%8F.png" alt="getAdaptiveExtension调用顺序"></p><p>我 们 再 回 过 去 梳 理 下 代 码 ， 实 际 上 在 调 用 createAdaptiveExtensionClass 之前，还做了一个操作。是执行 getExtensionClasses 方法，我们来看看这个方法做了什么事情</p><h4 id="getExtensionClasses"><a href="#getExtensionClasses" class="headerlink" title="getExtensionClasses"></a>getExtensionClasses</h4><p>这个方法就是加载扩展点实现类了。这段代码本来应该先看的，但是这段代码不太容易理解。就把顺序交换了一下，这段代码主要做以下几个事情：</p><ul><li>从cachedClasses中获得一个结果，这个结果实际上就是所有的扩展点，key对应name，value对应class</li><li>通过双重检查锁进行判断</li><li>调用loadExtensionClasses方法去加载左右扩展点的实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, Class&lt;?&gt;&gt; getExtensionClasses() &#123;</span><br><span class="line">        <span class="comment">// 从缓存中获取一个结果</span></span><br><span class="line">        Map&lt;String, Class&lt;?&gt;&gt; classes = cachedClasses.get();</span><br><span class="line">        <span class="comment">// 双重检查锁判断</span></span><br><span class="line">        <span class="keyword">if</span> (classes == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (cachedClasses) &#123;</span><br><span class="line">                classes = cachedClasses.get();</span><br><span class="line">                <span class="keyword">if</span> (classes == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 加载扩展点的实现</span></span><br><span class="line">                    classes = loadExtensionClasses();</span><br><span class="line">                    <span class="comment">// 设置到缓存中</span></span><br><span class="line">                    cachedClasses.set(classes);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classes;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="loadExtensionClasses"><a href="#loadExtensionClasses" class="headerlink" title="loadExtensionClasses"></a>loadExtensionClasses</h4><p>该方法是从不同的目录去加载不同扩展点的实现，在最开始使用dubbo的SPI中有提到过，它会去加载META-INF/dubbo ； META-INF/internal ; META-INF/services这三个目录下的扩展点实现。主要逻辑如下：</p><ul><li>获得当前扩展点的注解，也就是Protocol这个类的注解 @SPI</li><li>判断这个注解不为空，则再次获得@SPI注解的value值</li><li>如果value有值，也就是@SPI(“dubbo”)，则将这个dubbo的值赋给cachedDefaultName，这就是为什么我们能够通过ExtensionLoader.getExtensionLoader(Protocol.class).getDefaultExtension() ,能够获得 DubboProtocol 这个扩展点的原因</li><li>最后，通过loadFile方法去加载指定路径下的所有扩展点。也就是META-INF/dubbo ； META-INF/internal ; META-INF/services这三个目录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此方法已经getExtensionClasses方法同步过。</span></span><br><span class="line">   <span class="keyword">private</span> Map&lt;String, Class&lt;?&gt;&gt; loadExtensionClasses() &#123;</span><br><span class="line">       <span class="keyword">final</span> SPI defaultAnnotation = type.getAnnotation(SPI.class);</span><br><span class="line">       <span class="keyword">if</span> (defaultAnnotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">           String value = defaultAnnotation.value();</span><br><span class="line">           <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; (value = value.trim()).length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               String[] names = NAME_SEPARATOR.split(value);</span><br><span class="line">               <span class="keyword">if</span> (names.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"more than 1 default extension name on extension "</span> + type.getName()</span><br><span class="line">                           + <span class="string">": "</span> + Arrays.toString(names));</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (names.length == <span class="number">1</span>) cachedDefaultName = names[<span class="number">0</span>];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       Map&lt;String, Class&lt;?&gt;&gt; extensionClasses = <span class="keyword">new</span> HashMap&lt;String, Class&lt;?&gt;&gt;();</span><br><span class="line">       loadFile(extensionClasses, DUBBO_INTERNAL_DIRECTORY);</span><br><span class="line">       loadFile(extensionClasses, DUBBO_DIRECTORY);</span><br><span class="line">       loadFile(extensionClasses, SERVICES_DIRECTORY);</span><br><span class="line">       <span class="keyword">return</span> extensionClasses;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="loadFile"><a href="#loadFile" class="headerlink" title="loadFile"></a>loadFile</h4><p>解析指定路径下的文件，获取对应的扩展点，通过反射的方式进行实例化以后，put 到 extensionClasses 这个 Map 集合中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadFile</span><span class="params">(Map&lt;String, Class&lt;?&gt;&gt; extensionClasses, String dir)</span> </span>&#123;</span><br><span class="line">       String fileName = dir + type.getName();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Enumeration&lt;java.net.URL&gt; urls;</span><br><span class="line">           ClassLoader classLoader = findClassLoader();</span><br><span class="line">           <span class="keyword">if</span> (classLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">               urls = classLoader.getResources(fileName);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               urls = ClassLoader.getSystemResources(fileName);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (urls != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">                   java.net.URL url = urls.nextElement();</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(url.openStream(), <span class="string">"utf-8"</span>));</span><br><span class="line">                       <span class="keyword">try</span> &#123;</span><br><span class="line">                           String line = <span class="keyword">null</span>;</span><br><span class="line">                           <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                               <span class="keyword">final</span> <span class="keyword">int</span> ci = line.indexOf(<span class="string">'#'</span>);</span><br><span class="line">                               <span class="keyword">if</span> (ci &gt;= <span class="number">0</span>) line = line.substring(<span class="number">0</span>, ci);</span><br><span class="line">                               line = line.trim();</span><br><span class="line">                               <span class="keyword">if</span> (line.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                   <span class="keyword">try</span> &#123;</span><br><span class="line">                                       String name = <span class="keyword">null</span>;</span><br><span class="line">                                       <span class="keyword">int</span> i = line.indexOf(<span class="string">'='</span>);</span><br><span class="line">                                       <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                           name = line.substring(<span class="number">0</span>, i).trim();</span><br><span class="line">                                           line = line.substring(i + <span class="number">1</span>).trim();</span><br><span class="line">                                       &#125;</span><br><span class="line">                                       <span class="keyword">if</span> (line.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                           Class&lt;?&gt; clazz = Class.forName(line, <span class="keyword">true</span>, classLoader);</span><br><span class="line">                                           <span class="keyword">if</span> (!type.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                                               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Error when load extension class(interface: "</span> +</span><br><span class="line">                                                       type + <span class="string">", class line: "</span> + clazz.getName() + <span class="string">"), class "</span></span><br><span class="line">                                                       + clazz.getName() + <span class="string">"is not subtype of interface."</span>);</span><br><span class="line">                                           &#125;</span><br><span class="line">                                           <span class="keyword">if</span> (clazz.isAnnotationPresent(Adaptive.class)) &#123;</span><br><span class="line">                                               <span class="keyword">if</span> (cachedAdaptiveClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                                   cachedAdaptiveClass = clazz;</span><br><span class="line">                                               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!cachedAdaptiveClass.equals(clazz)) &#123;</span><br><span class="line">                                                   <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"More than 1 adaptive class found: "</span></span><br><span class="line">                                                           + cachedAdaptiveClass.getClass().getName()</span><br><span class="line">                                                           + <span class="string">", "</span> + clazz.getClass().getName());</span><br><span class="line">                                               &#125;</span><br><span class="line">                                           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                               <span class="keyword">try</span> &#123;</span><br><span class="line">                                                   <span class="comment">//如果没有 Adaptive 注解，则判断当前类是否带有参数是type 类型的构造函数，如果有，则认为是</span></span><br><span class="line">                                                   <span class="comment">//wrapper 类。这个 wrapper 实际上就是对扩展类进行装饰.</span></span><br><span class="line">                                                   <span class="comment">//可以在 dubbo-rpc-api/internal 下找到 Protocol 文件，发现 Protocol 配置了 3 个装饰</span></span><br><span class="line">                                                   <span class="comment">//分别是,filter/listener/mock. 所以 Protocol 这个实 例来说，会增加对应的装饰器</span></span><br><span class="line">                                                   clazz.getConstructor(type);</span><br><span class="line">                                                   <span class="comment">//得到带有 public DubboProtocol(Protocol protocol)的扩展点。进行包装</span></span><br><span class="line">                                                   Set&lt;Class&lt;?&gt;&gt; wrappers = cachedWrapperClasses;</span><br><span class="line">                                                   <span class="keyword">if</span> (wrappers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                                       cachedWrapperClasses = <span class="keyword">new</span> ConcurrentHashSet&lt;Class&lt;?&gt;&gt;();</span><br><span class="line">                                                       wrappers = cachedWrapperClasses;</span><br><span class="line">                                                   &#125;</span><br><span class="line">                                                   wrappers.add(clazz);<span class="comment">//包装类 </span></span><br><span class="line">                                               &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                                                   clazz.getConstructor();</span><br><span class="line">                                                   <span class="keyword">if</span> (name == <span class="keyword">null</span> || name.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                                                       name = findAnnotationName(clazz);</span><br><span class="line">                                                       <span class="keyword">if</span> (name == <span class="keyword">null</span> || name.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                                                           <span class="keyword">if</span> (clazz.getSimpleName().length() &gt; type.getSimpleName().length()</span><br><span class="line">                                                                   &amp;&amp; clazz.getSimpleName().endsWith(type.getSimpleName())) &#123;</span><br><span class="line">                                                               name = clazz.getSimpleName().substring(<span class="number">0</span>, clazz.getSimpleName().length() - type.getSimpleName().length()).toLowerCase();</span><br><span class="line">                                                           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No such extension name for the class "</span> + clazz.getName() + <span class="string">" in the config "</span> + url);</span><br><span class="line">                                                           &#125;</span><br><span class="line">                                                       &#125;</span><br><span class="line">                                                   &#125;</span><br><span class="line">                                                   String[] names = NAME_SEPARATOR.split(name);</span><br><span class="line">                                                   <span class="keyword">if</span> (names != <span class="keyword">null</span> &amp;&amp; names.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                                       Activate activate = clazz.getAnnotation(Activate.class);</span><br><span class="line">                                                       <span class="keyword">if</span> (activate != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                                           cachedActivates.put(names[<span class="number">0</span>], activate);</span><br><span class="line">                                                       &#125;</span><br><span class="line">                                                       <span class="keyword">for</span> (String n : names) &#123;</span><br><span class="line">                                                           <span class="keyword">if</span> (!cachedNames.containsKey(clazz)) &#123;</span><br><span class="line">                                                               cachedNames.put(clazz, n);</span><br><span class="line">                                                           &#125;</span><br><span class="line">                                                           Class&lt;?&gt; c = extensionClasses.get(n);</span><br><span class="line">                                                           <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                                               extensionClasses.put(n, clazz);</span><br><span class="line">                                                           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c != clazz) &#123;</span><br><span class="line">                                                               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Duplicate extension "</span> + type.getName() + <span class="string">" name "</span> + n + <span class="string">" on "</span> + c.getName() + <span class="string">" and "</span> + clazz.getName());</span><br><span class="line">                                                           &#125;</span><br><span class="line">                                                       &#125;</span><br><span class="line">                                                   &#125;</span><br><span class="line">                                               &#125;</span><br><span class="line">                                           &#125;</span><br><span class="line">                                       &#125;</span><br><span class="line">                                   &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                                       IllegalStateException e = <span class="keyword">new</span> IllegalStateException(<span class="string">"Failed to load extension class(interface: "</span> + type + <span class="string">", class line: "</span> + line + <span class="string">") in "</span> + url + <span class="string">", cause: "</span> + t.getMessage(), t);</span><br><span class="line">                                       exceptions.put(line, e);</span><br><span class="line">                                   &#125;</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125; <span class="comment">// end of while read lines</span></span><br><span class="line">                       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                           reader.close();</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                       logger.error(<span class="string">"Exception when load extension class(interface: "</span> +</span><br><span class="line">                               type + <span class="string">", class file: "</span> + url + <span class="string">") in "</span> + url, t);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="comment">// end of while urls</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">           logger.error(<span class="string">"Exception when load extension class(interface: "</span> +</span><br><span class="line">                   type + <span class="string">", description file: "</span> + fileName + <span class="string">")."</span>, t);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="阶段性小结"><a href="#阶段性小结" class="headerlink" title="阶段性小结"></a>阶段性小结</h4><p>截止到目前，我们已经把基于 Protocol 的自适应扩展点看完了。也明白最终这句话应该返回的对象是什么了.</p><p>Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class). getAdaptiveExtension();</p><p>也就是，这段代码中，最终的 protocol 应该等于 = Protocol$Adaptive</p><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/dubbo/getAdaptiveExtension%E8%B0%83%E7%94%A8%E9%A1%BA%E5%BA%8F.png" alt="getAdaptiveExtension调用顺序"></p><p>我们还有injectExtension没有讲</p><h4 id="injectExtension"><a href="#injectExtension" class="headerlink" title="injectExtension"></a>injectExtension</h4><p>还记得这段代码吗？上面分析的代码，只是知道，最终 getAdaptiveExtensionClass.new Instance 获得一个自适应扩展点。而还有一段代码</p><p>injectExtension 没有讲。简单来说，这个方法的作用，是为这个自适应扩展点进行依赖注入。类似于 spring 里面的依赖注入功能。</p><p>为适配器类的 setter 方法插入其他扩展点或实现。具体过程就不再分析，感兴趣的可以自己去看看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">private</span> T <span class="title">createAdaptiveExtension</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 可以实现扩展点的注入</span></span><br><span class="line">           <span class="keyword">return</span> injectExtension((T) getAdaptiveExtensionClass().newInstance());</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Can not create adaptive extenstion "</span> + type + <span class="string">", cause: "</span> + e.getMessage(), e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>getExtensionLoader 这个方法中，会调用 ExtensionLoader 的私有构造方法进行初始化，其中有一个 objectFactory. 这个是干嘛的呢？先想想</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇我们进入Dubbo的源码分析篇，先来学习Dubbo一个非常重要的机制：SPI。&lt;/p&gt;
&lt;p&gt;在学习Dubbo的SPI之前，我们先要了解Java的SPI，主要解决几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是SPI？&lt;/li&gt;
&lt;li&gt;Java的SPI机制的规范及原理&lt;/
      
    
    </summary>
    
      <category term="分布式服务治理-dubb" scheme="https://grezhang.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86-dubb/"/>
    
    
      <category term="分布式服务治理" scheme="https://grezhang.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/"/>
    
      <category term="dubbo" scheme="https://grezhang.github.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>分布式服务治理-dubbo（三）实战演练</title>
    <link href="https://grezhang.github.io/2017/06/27/dubbo/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86-dubbo%EF%BC%88%E4%B8%89%EF%BC%89%E5%AE%9E%E6%88%98%E6%BC%94%E7%BB%83/"/>
    <id>https://grezhang.github.io/2017/06/27/dubbo/分布式服务治理-dubbo（三）实战演练/</id>
    <published>2017-06-27T04:12:56.000Z</published>
    <updated>2018-06-25T15:25:07.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="分布式服务治理-dubb" scheme="https://grezhang.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86-dubb/"/>
    
    
      <category term="分布式服务治理" scheme="https://grezhang.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/"/>
    
      <category term="dubbo" scheme="https://grezhang.github.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>分布式服务治理-dubbo（二）常用配置分析</title>
    <link href="https://grezhang.github.io/2017/06/24/dubbo/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86-dubbo%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8%E5%88%86%E6%9E%90/"/>
    <id>https://grezhang.github.io/2017/06/24/dubbo/分布式服务治理-dubbo（二）常用配置使用分析/</id>
    <published>2017-06-24T04:12:56.000Z</published>
    <updated>2018-07-10T15:48:34.201Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要介绍dubbo中常用的配置，包含的内容如下：</p><ul><li>多协议</li><li>多版本</li><li>集群容错</li><li>主机绑定</li><li>服务降级</li><li>配置有限级别</li><li>多注册中心</li><li>启动时检查</li><li>重试</li><li>LoadBalance</li></ul><p>本项目是接着上一篇搭建的工程继续使用的：</p><h2 id="多协议"><a href="#多协议" class="headerlink" title="多协议"></a>多协议</h2><p>Dubbo 允许配置多协议，在不同服务上支持不同协议或者同一服务上同时支持多种协议。</p><p>不同服务在性能上适用不同协议进行传输，比如大数据用短连接协议，小数据大并发用长连接协议</p><p>服务端配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo应用名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demo-provider"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo注册中心地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多协议配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo协议配置，默认使用dubbo，端口20880  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"hessian"</span> <span class="attr">port</span>=<span class="string">"8084"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用Dubbo发布暴露的服务接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.gre.world.dubbo.user.IUserService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span> <span class="attr">protocol</span>=<span class="string">"dubbo"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用hessiaon发布暴露的服务接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.gre.world.dubbo.user.IUserService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span> <span class="attr">protocol</span>=<span class="string">"hessian"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo发布暴露的服务接口实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.gre.world.dubbo.user.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>消费端配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demo-consumer"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用Hessian 协议调用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"hessian"</span> <span class="attr">port</span>=<span class="string">"8084"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">interface</span>=<span class="string">"com.gre.world.dubbo.user.IUserService"</span> <span class="attr">protocol</span>=<span class="string">"hessian"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多注册中心"><a href="#多注册中心" class="headerlink" title="多注册中心"></a>多注册中心</h2><p>Dubbo 支持同一服务向多注册中心同时注册，或者不同服务分别注册到不同的注册中心上去，甚至可以同时引用注册在不同注册中心上的同名服务。另外，注册中心是支持自定义扩展的.</p><p>比如：中文站有些服务来不及在青岛部署，只在杭州部署，而青岛的其它应用需要引用此服务，就可以将服务同时注册到两个注册中心。</p><p>提供方：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--注册中心--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">id</span>=<span class="string">"zk1"</span> <span class="attr">address</span>=<span class="string">"zookeeper://192.168.1.104:2181"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">id</span>=<span class="string">"zk2"</span> <span class="attr">address</span>=<span class="string">"zookeeper://192.168.1.104:2182"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.gre.world.dubbo.user.IUserService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span> <span class="attr">protocol</span>=<span class="string">"dubbo"</span> <span class="attr">registry</span>=<span class="string">"zk1,zk2"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="启动检查配置"><a href="#启动检查配置" class="headerlink" title="启动检查配置"></a>启动检查配置</h2><p>Dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线时，能及早发现问题，默认 <code>check=&quot;true&quot;</code>。</p><p>可以通过 <code>check=&quot;false&quot;</code> 关闭检查，比如，测试时，有些服务不关心，或者出现了循环依赖，必须有一方先启动。</p><p>另外，如果你的 Spring 容器是懒加载的，或者通过 API 编程延迟引用服务，请关闭 check，否则服务临时不可用时，会抛出异常，拿到 null 引用，如果 <code>check=&quot;false&quot;</code>，总是会返回引用，当服务恢复时，能自动连上。</p><p>实例：</p><p>服务端没有启动，直接启动客户端报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">2018-06-30 13:50:22,729 INFO [com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistry] -  [DUBBO] Notify urls for subscribe url consumer://192.168.56.1/com.gre.world.dubbo.user.IUserService?application=demo-consumer&amp;category=providers,configurators,routers&amp;dubbo=2.5.4&amp;interface=com.gre.world.dubbo.user.IUserService&amp;methods=sayHello&amp;pid=17040&amp;protocol=hessian&amp;revision=1.0-SNAPSHOT&amp;side=consumer&amp;timestamp=1530337822096, urls: [empty://192.168.56.1/com.gre.world.dubbo.user.IUserService?application=demo-consumer&amp;category=providers&amp;dubbo=2.5.4&amp;interface=com.gre.world.dubbo.user.IUserService&amp;methods=sayHello&amp;pid=17040&amp;protocol=hessian&amp;revision=1.0-SNAPSHOT&amp;side=consumer&amp;timestamp=1530337822096, empty://192.168.56.1/com.gre.world.dubbo.user.IUserService?application=demo-consumer&amp;category=configurators&amp;dubbo=2.5.4&amp;interface=com.gre.world.dubbo.user.IUserService&amp;methods=sayHello&amp;pid=17040&amp;protocol=hessian&amp;revision=1.0-SNAPSHOT&amp;side=consumer&amp;timestamp=1530337822096, empty://192.168.56.1/com.gre.world.dubbo.user.IUserService?application=demo-consumer&amp;category=routers&amp;dubbo=2.5.4&amp;interface=com.gre.world.dubbo.user.IUserService&amp;methods=sayHello&amp;pid=17040&amp;protocol=hessian&amp;revision=1.0-SNAPSHOT&amp;side=consumer&amp;timestamp=1530337822096], dubbo version: 2.5.4, current host: 192.168.56.1</span><br><span class="line">Exception in thread &quot;main&quot; org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;userService&apos;: FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: Failed to check the status of the service com.gre.world.dubbo.user.IUserService. No provider available for the service com.gre.world.dubbo.user.IUserService from the url zookeeper://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-consumer&amp;dubbo=2.5.4&amp;interface=com.gre.world.dubbo.user.IUserService&amp;methods=sayHello&amp;pid=17040&amp;protocol=hessian&amp;revision=1.0-SNAPSHOT&amp;side=consumer&amp;timestamp=1530337822096 to the consumer 192.168.56.1 use dubbo version 2.5.4</span><br><span class="line">at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:175)</span><br><span class="line">at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:103)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1634)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:254)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1078)</span><br><span class="line">at com.gre.world.dubbo.client.App.main(App.java:17)</span><br><span class="line">Caused by: java.lang.IllegalStateException: Failed to check the status of the service com.gre.world.dubbo.user.IUserService. No provider available for the service com.gre.world.dubbo.user.IUserService from the url zookeeper://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-consumer&amp;dubbo=2.5.4&amp;interface=com.gre.world.dubbo.user.IUserService&amp;methods=sayHello&amp;pid=17040&amp;protocol=hessian&amp;revision=1.0-SNAPSHOT&amp;side=consumer&amp;timestamp=1530337822096 to the consumer 192.168.56.1 use dubbo version 2.5.4</span><br><span class="line">at com.alibaba.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:407)</span><br><span class="line">at com.alibaba.dubbo.config.ReferenceConfig.init(ReferenceConfig.java:320)</span><br><span class="line">at com.alibaba.dubbo.config.ReferenceConfig.get(ReferenceConfig.java:159)</span><br><span class="line">at com.alibaba.dubbo.config.spring.ReferenceBean.getObject(ReferenceBean.java:65)</span><br><span class="line">at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:168)</span><br><span class="line">... 6 more</span><br></pre></td></tr></table></figure><p>解决方式：在调用方做如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">interface</span>=<span class="string">"com.gre.world.dubbo.user.IUserService"</span> <span class="attr">protocol</span>=<span class="string">"hessian"</span> <span class="attr">check</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="集群容错模式"><a href="#集群容错模式" class="headerlink" title="集群容错模式"></a>集群容错模式</h2><p>什么是容错机制？ 容错机制指的是某种系统控制在一定范围内的一种允许或包容犯错情况的发生，举个简单例子，我们在电脑上运行一个程序，有时候会出现无响应的情况，然后系统会弹出一个提示框让我们选择，是立即结束还是继续等待，然后根据我们的选择执行对应的操作，这就是“容错”。 </p><p>在分布式架构下，网络、硬件、应用都可能发生故障，由于各个服务之间可能存在依赖关系，如果一条链路中的其中一个节点出现故障，将会导致雪崩效应。为了减少某一个节点故障的影响范围，所以我们才需要去构建容错服务，来优雅的处理这种中断的响应结果</p><h3 id="Failover-Cluster"><a href="#Failover-Cluster" class="headerlink" title="Failover Cluster"></a>Failover Cluster</h3><p>失败自动切换，当出现失败，重试其它服务器 <a href="http://dubbo.apache.org/books/dubbo-user-book/demos/fault-tolerent-strategy.html#fn_1" target="_blank" rel="noopener">1</a>。通常用于读操作，但重试会带来更长延迟。可通过 <code>retries=&quot;2&quot;</code> 来设置重试次数(不含第一次)。</p><p>重试次数配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"findFoo"</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Failfast-Cluster"><a href="#Failfast-Cluster" class="headerlink" title="Failfast Cluster"></a>Failfast Cluster</h3><p>快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</p><h3 id="Failsafe-Cluster"><a href="#Failsafe-Cluster" class="headerlink" title="Failsafe Cluster"></a>Failsafe Cluster</h3><p>失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</p><h3 id="Failback-Cluster"><a href="#Failback-Cluster" class="headerlink" title="Failback Cluster"></a>Failback Cluster</h3><p>失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</p><h3 id="Forking-Cluster"><a href="#Forking-Cluster" class="headerlink" title="Forking Cluster"></a>Forking Cluster</h3><p>并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 <code>forks=&quot;2&quot;</code> 来设置最大并行数。</p><h3 id="Broadcast-Cluster"><a href="#Broadcast-Cluster" class="headerlink" title="Broadcast Cluster"></a>Broadcast Cluster</h3><p>广播调用所有提供者，逐个调用，任意一台报错则报错 <a href="http://dubbo.apache.org/books/dubbo-user-book/demos/fault-tolerent-strategy.html#fn_2" target="_blank" rel="noopener">2</a>。通常用于通知所有提供者更新缓存或日志等本地资源信息。</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>在集群负载均衡时，Dubbo 提供了多种均衡策略，缺省为 <code>random</code> 随机调用。</p><p>可以自行扩展负载均衡策略，参见：<a href="http://dubbo.apache.org/books/dubbo-dev-book/impls/load-balance.html" target="_blank" rel="noopener">负载均衡扩展</a></p><p>dubbo提供了几种负载均衡策略：</p><h3 id="Random-LoadBalance"><a href="#Random-LoadBalance" class="headerlink" title="Random LoadBalance"></a>Random LoadBalance</h3><ul><li><strong>随机</strong>，按权重设置随机概率。</li><li>在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</li></ul><h3 id="RoundRobin-LoadBalance"><a href="#RoundRobin-LoadBalance" class="headerlink" title="RoundRobin LoadBalance"></a>RoundRobin LoadBalance</h3><ul><li><strong>轮循</strong>，按公约后的权重设置轮循比率。</li><li>存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</li></ul><h3 id="LeastActive-LoadBalance"><a href="#LeastActive-LoadBalance" class="headerlink" title="LeastActive LoadBalance"></a>LeastActive LoadBalance</h3><ul><li><strong>最少活跃调用数</strong>，相同活跃数的随机，活跃数指调用前后计数差。</li><li>使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</li></ul><h3 id="ConsistentHash-LoadBalance"><a href="#ConsistentHash-LoadBalance" class="headerlink" title="ConsistentHash LoadBalance"></a>ConsistentHash LoadBalance</h3><ul><li><strong>一致性 Hash</strong>，相同参数的请求总是发到同一提供者。</li><li>当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。</li><li>算法参见：<a href="http://en.wikipedia.org/wiki/Consistent_hashing" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Consistent_hashing</a></li><li>缺省只对第一个参数 Hash，如果要修改，请配置 <code>&lt;dubbo:parameter key=&quot;hash.arguments&quot; value=&quot;0,1&quot; /&gt;</code></li><li>缺省用 160 份虚拟节点，如果要修改，请配置 <code>&lt;dubbo:parameter key=&quot;hash.nodes&quot; value=&quot;320&quot; /&gt;</code></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>服务端1配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo应用名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demo-provider"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo注册中心地址 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册中心--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">id</span>=<span class="string">"zk1"</span> <span class="attr">address</span>=<span class="string">"zookeeper://192.168.1.104:2181"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo协议配置，默认使用dubbo，端口20880  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用Dubbo发布暴露的服务接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.gre.world.dubbo.user.IUserService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span> <span class="attr">protocol</span>=<span class="string">"dubbo"</span> <span class="attr">registry</span>=<span class="string">"zk1"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo发布暴露的服务接口实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.gre.world.dubbo.user.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cluster1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">                <span class="keyword">new</span> String[] &#123;<span class="string">"MATE-INF/spring/dubbo-cluster1.xml"</span>&#125;);</span><br><span class="line">        context.start();</span><br><span class="line">        <span class="comment">// press any key to exit</span></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端2配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo应用名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demo-provider"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo注册中心地址 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册中心--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">id</span>=<span class="string">"zk1"</span> <span class="attr">address</span>=<span class="string">"zookeeper://192.168.1.104:2181"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo协议配置，默认使用dubbo，端口20880  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20881"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用Dubbo发布暴露的服务接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.gre.world.dubbo.user.IUserService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span> <span class="attr">protocol</span>=<span class="string">"dubbo"</span> <span class="attr">registry</span>=<span class="string">"zk1"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo发布暴露的服务接口实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.gre.world.dubbo.user.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cluster2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">                <span class="keyword">new</span> String[] &#123;<span class="string">"MATE-INF/spring/dubbo-cluster2.xml"</span>&#125;);</span><br><span class="line">        context.start();</span><br><span class="line">        <span class="comment">// press any key to exit</span></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动两个服务端：</p><p>客户端配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">interface</span>=<span class="string">"com.gre.world.dubbo.user.IUserService"</span> <span class="attr">check</span>=<span class="string">"false"</span> <span class="attr">cluster</span>=<span class="string">"failsafe"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClusterTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">"MATE-INF/spring/consumer.xml"</span>&#125;);</span><br><span class="line">        context.start();</span><br><span class="line">        <span class="comment">// obtain proxy object for remote invocation</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">            IUserService demoService = (IUserService) context.getBean(<span class="string">"userService"</span>);</span><br><span class="line">            <span class="comment">// execute remote invocation</span></span><br><span class="line">            String hello = demoService.sayHello(<span class="string">"world"</span>);</span><br><span class="line">            <span class="comment">// show the result</span></span><br><span class="line">            System.out.println(hello);</span><br><span class="line">        &#125;</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Cluster1:Hello,world</span><br><span class="line">Cluster1:Hello,world</span><br><span class="line">Cluster2:Hello,world</span><br><span class="line">Cluster2:Hello,world</span><br><span class="line">Cluster1:Hello,world</span><br><span class="line">Cluster1:Hello,world</span><br><span class="line">Cluster2:Hello,world</span><br><span class="line">Cluster1:Hello,world</span><br><span class="line">Cluster1:Hello,world</span><br><span class="line">Cluster2:Hello,world</span><br></pre></td></tr></table></figure><h2 id="多版本"><a href="#多版本" class="headerlink" title="多版本"></a>多版本</h2><p>设置不同版本的目的，就是要考虑到接口升级以后带来的兼容问题。在 Dubbo 中配置不同版本的接口，会在 Zookeeper 地址中有多个协议 url 的体现，具体内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dubbo://192.168.56.1:20880/com.gre.world.dubbo.user.IUserService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.5.4&amp;generic=false&amp;interface=com.gre.world.dubbo.user.IUserService&amp;methods=sayHello&amp;pid=9256&amp;revision=1.0.0&amp;side=provider&amp;timestamp=1530339755336&amp;version=1.0.0</span><br><span class="line"></span><br><span class="line">dubbo://192.168.56.1:20880/com.gre.world.dubbo.user.IUserService2?anyhost=true&amp;application=demo-provider&amp;dubbo=2.5.4&amp;generic=false&amp;interface=com.gre.world.dubbo.user.IUserService&amp;methods=sayHello&amp;pid=9256&amp;revision=2.0.0&amp;side=provider&amp;timestamp=1530339756043&amp;version=2.0.0, dubbo version: 2.5.4, current host: 127.0.0.1</span><br></pre></td></tr></table></figure><p>当一个接口实现，出现不兼容升级时，可以用版本号过渡，版本号不同的服务相互间不引用。</p><p>可以按照以下的步骤进行版本迁移：</p><ol><li>在低压力时间段，先升级一半提供者为新版本</li><li>再将所有消费者升级为新版本</li><li>然后将剩下的一半提供者升级为新版本</li></ol><h3 id="服务端配置："><a href="#服务端配置：" class="headerlink" title="服务端配置："></a>服务端配置：</h3><p>provider-version.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo应用名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demo-provider"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo注册中心地址 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册中心--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">id</span>=<span class="string">"zk1"</span> <span class="attr">address</span>=<span class="string">"zookeeper://192.168.1.104:2181"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 多协议配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo协议配置，默认使用dubbo，端口20880  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用Dubbo发布暴露的服务接口,发布不同的版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.gre.world.dubbo.user.IUserService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span> <span class="attr">protocol</span>=<span class="string">"dubbo"</span> <span class="attr">registry</span>=<span class="string">"zk1"</span> <span class="attr">version</span>=<span class="string">"1.0.0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.gre.world.dubbo.user.IUserService"</span> <span class="attr">ref</span>=<span class="string">"userService2"</span> <span class="attr">protocol</span>=<span class="string">"dubbo"</span> <span class="attr">registry</span>=<span class="string">"zk1"</span> <span class="attr">version</span>=<span class="string">"2.0.0"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo发布暴露的服务接口实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.gre.world.dubbo.user.UserServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService2"</span> <span class="attr">class</span>=<span class="string">"com.gre.world.dubbo.user.UserServiceImpl2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootstrapVerson</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">                <span class="keyword">new</span> String[] &#123;<span class="string">"MATE-INF/spring/provider-version.xml"</span>&#125;);</span><br><span class="line">        context.start();</span><br><span class="line">        <span class="comment">// press any key to exit</span></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>consumer-version.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demo-consumer"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用Hessian 协议调用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;dubbo:protocol name="hessian" port="8084" /&gt;--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;dubbo:reference id="userService" interface="com.gre.world.dubbo.user.IUserService" protocol="hessian" check="false"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">interface</span>=<span class="string">"com.gre.world.dubbo.user.IUserService"</span> <span class="attr">version</span>=<span class="string">"2.0.0"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VersionTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">"MATE-INF/spring/consumer-version.xml"</span>&#125;);</span><br><span class="line">        context.start();</span><br><span class="line">        <span class="comment">// obtain proxy object for remote invocation</span></span><br><span class="line">        IUserService demoService = (IUserService) context.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        <span class="comment">// execute remote invocation</span></span><br><span class="line">        String hello = demoService.sayHello(<span class="string">"world"</span>);</span><br><span class="line">        <span class="comment">// show the result</span></span><br><span class="line">        System.out.println(hello);</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vesion2:Hello,world</span><br></pre></td></tr></table></figure><h2 id="主机绑定"><a href="#主机绑定" class="headerlink" title="主机绑定"></a>主机绑定</h2><p>在 发 布 一 个 Dubbo 服 务 的 时 候 ， 会 生 成 一 个 dubbo://ip:port 的协议地址，那么这个 IP 是根据什么生成的呢？大家可以在 ServiceConfig.java 代码中找到如下代码;可以发现，在生成绑定的主机的时候，会通过一层一层的判断，直到获取到合法的 ip 地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 从配置文件中获取</span></span><br><span class="line">        String host = protocolConfig.getHost();</span><br><span class="line">        <span class="keyword">if</span> (provider != <span class="keyword">null</span> &amp;&amp; (host == <span class="keyword">null</span> || host.length() == <span class="number">0</span>)) &#123;</span><br><span class="line">            host = provider.getHost();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> anyhost = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (NetUtils.isInvalidLocalHost(host)) &#123;</span><br><span class="line">            anyhost = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 2.获取本机IP地址</span></span><br><span class="line">                host = InetAddress.getLocalHost().getHostAddress();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">                logger.warn(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (NetUtils.isInvalidLocalHost(host)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (registryURLs != <span class="keyword">null</span> &amp;&amp; registryURLs.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (URL registryURL : registryURLs) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                          <span class="comment">//3 获取IP地址:如果是 127.* 等 loopback 地址，则扫描各网卡，获取网卡 IP</span></span><br><span class="line">                            Socket socket = <span class="keyword">new</span> Socket();</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                SocketAddress addr = <span class="keyword">new</span> InetSocketAddress(registryURL.getHost(), registryURL.getPort());</span><br><span class="line">                                socket.connect(addr, <span class="number">1000</span>);</span><br><span class="line">                                host = socket.getLocalAddress().getHostAddress();</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    socket.close();</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            logger.warn(e.getMessage(), e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (NetUtils.isInvalidLocalHost(host)) &#123;</span><br><span class="line">                    host = NetUtils.getLocalHost();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>在dubbo指定IP地址配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">host</span>=<span class="string">"205.182.23.201"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h2><p>服务降级的主要目的是保证核心服务可用。</p><p>降级可以有几个层面的分类： 自动降级和人工降级； 按照功能可以分为：读服务降级和写服务降级；</p><ul><li>1.对一些非核心服务进行人工降级，在大促之前通过降级开关关闭哪些推荐内容、评价等对主流程没有影响的功能</li><li>2.故障降级，比如调用的远程服务挂了，网络故障、或者 RPC 服务返回异常。 那么可以直接降级，降级的方案比如设置默认值、采用兜底数据（系统推荐的行为广告挂了，可以提前准备静态页面做返回）等等</li><li>3.限流降级，在秒杀这种流量比较集中并且流量特别大的情况下，因为突发访问量特别大可能会导致系统支撑不了。这个时候可以采用限流来限制访问量。当达到阀值时，后续的请求被降级，比如进入排队页面，比如跳转到错误页（活动太火爆，稍后重试等）</li></ul><p>dubbo 的降级方式： Mock</p><p>实现步骤</p><p>1.在 client 端创建一个 TestMock 类，实现对应 IGpHello</p><p>的接口（需要对哪个接口进行 mock，就实现哪个），名称必须以 Mock 结尾</p><p>2.在 client 端的 xml 配置文件中，添加如下配置，增加一个 mock 属性指向创建的 TestMock</p><p>3.模拟错误（设置 timeout），模拟超时异常，运行测试</p><p>做技术人的之路明灯，做职场生涯的精神导师</p><p>代码即可访问到 TestMock 这个类。当服务端故障解除以后，调用过程将恢复正常</p><p>我们故意将接口调用超时时间设置很短：配置如下</p><p>consumer-mock.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demo-consumer"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用Hessian 协议调用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;dubbo:protocol name="hessian" port="8084" /&gt;--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;dubbo:reference id="userService" interface="com.gre.world.dubbo.user.IUserService" protocol="hessian" check="false"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">interface</span>=<span class="string">"com.gre.world.dubbo.user.IUserService"</span> <span class="attr">version</span>=<span class="string">"2.0.0"</span> <span class="attr">mock</span>=<span class="string">"com.gre.world.dubbo.client.TestMock"</span> <span class="attr">timeout</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMock</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"系统繁忙，请稍后再试！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientMockTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">"MATE-INF/spring/consumer-mock.xml"</span>&#125;);</span><br><span class="line">        context.start();</span><br><span class="line">        <span class="comment">// obtain proxy object for remote invocation</span></span><br><span class="line">        IUserService demoService = (IUserService) context.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        <span class="comment">// execute remote invocation</span></span><br><span class="line">        String hello = demoService.sayHello(<span class="string">"world"</span>);</span><br><span class="line">        <span class="comment">// show the result</span></span><br><span class="line">        System.out.println(hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">系统繁忙，请稍后再试！</span><br></pre></td></tr></table></figure><h2 id="配置优先级别"><a href="#配置优先级别" class="headerlink" title="配置优先级别"></a>配置优先级别</h2><p>➢ 以 timeout 为例，显示了配置的查找顺序，其它 retries, loadbalance 等类似。</p><p>1.方法级优先，接口级次之，全局配置再次之。</p><p>2.如果级别一样，则消费方优先，提供方次之。</p><p>其中，服务提供方配置，通过 URL 经由注册中心传递给消费方。</p><p>建议由服务提供方设置超时，因为一个方法需要执行多长时间，服务提供方更清楚，如果一个消费方同时引用多个服务，就不需要关心每个服务的超时设置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇主要介绍dubbo中常用的配置，包含的内容如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多协议&lt;/li&gt;
&lt;li&gt;多版本&lt;/li&gt;
&lt;li&gt;集群容错&lt;/li&gt;
&lt;li&gt;主机绑定&lt;/li&gt;
&lt;li&gt;服务降级&lt;/li&gt;
&lt;li&gt;配置有限级别&lt;/li&gt;
&lt;li&gt;多注册中心&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="分布式服务治理-dubb" scheme="https://grezhang.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86-dubb/"/>
    
    
      <category term="分布式服务治理" scheme="https://grezhang.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/"/>
    
      <category term="dubbo" scheme="https://grezhang.github.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>分布式服务治理-dubbo（一）入门</title>
    <link href="https://grezhang.github.io/2017/06/22/dubbo/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86-dubbo%EF%BC%88%E4%B8%80%EF%BC%89%E5%85%A5%E9%97%A8/"/>
    <id>https://grezhang.github.io/2017/06/22/dubbo/分布式服务治理-dubbo（一）入门/</id>
    <published>2017-06-22T04:12:56.000Z</published>
    <updated>2018-07-10T15:48:17.256Z</updated>
    
    <content type="html"><![CDATA[<h3 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h3><p>了解什么是dubbo？</p><p>知道dubbo能做什么？</p><p>dubbo使用入门？</p><p>如何快速启动 Dubbo 服务？</p><p>多协议支持</p><p>多注册中心支持</p><p>启动检查机制？</p><h3 id="1-什么是Dubbo"><a href="#1-什么是Dubbo" class="headerlink" title="1. 什么是Dubbo"></a>1. 什么是Dubbo</h3><p>Dubbo是阿里巴巴SOA服务化治理方案的核心框架，每天为2,000+个服务提供3,000,000,000+次访问量支持，并被广泛应用于阿里巴巴集团的各成员站点：</p><p>Dubbo是一个分布式服务治理框架，致力于提供性能和透明化的RPC远程调用服务方案，以及SOA的服务治理方案，其核心内容包括：</p><ul><li>（1）远程通信：提供多种基于长连接的NIO框架抽象化封装，包括多线程模型、序列化、以及“请求-响应”模式的交换方式</li><li>（2）集群容错：提供基于接口的透明远程过程调用，包括多协议支持、以及软负载均衡、失败容错、地址路由，动态配置等集群支持</li><li>（3）自动发现：基于注册中心目录服务，使消费方能动态的查找到服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器</li></ul><h4 id="1-1-架构的发展"><a href="#1-1-架构的发展" class="headerlink" title="1.1 架构的发展"></a>1.1 架构的发展</h4><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/dubbo/%E6%9E%B6%E6%9E%84%E5%88%9D%E6%9C%9F.png" alt="架构初期"></p><p>对于早期来说，由于业务处于发展初期，加上人力资源紧张，上面的架构在用户访问量不是很大的时候，还是没有问题的，随着业务进一步的发展，我们可能会增加机器的配置，做纵向扩展，能够解决暂时性的问题。但是，总有一天，这个架构有扛不住的时候，机器的资源不可能无限制的增加。那么就需要对架构进行升级，支持横向扩展。</p><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/dubbo/%E6%9E%B6%E6%9E%84%E5%8F%91%E5%B1%95%E6%BC%94%E5%8F%98.png" alt="架构发展演变"></p><h4 id="1-2-带来哪些问题"><a href="#1-2-带来哪些问题" class="headerlink" title="1.2 带来哪些问题"></a>1.2 带来哪些问题</h4><ul><li><p>(1) 当服务变得越来越多，服务URL配置管理变得非常困难， F5硬件负载单点压力有变得越来越大。</p><p>此时就需要一个服务注册中心，动态的注册和发现服务，使服务的位置透明</p><p>并通过在消费方获取服务提供方提供的0地址列表，实现软负载均衡和Failover，降低对F5硬件负载均衡器的依赖，也减少部分成本。</p></li><li><p>(2) 当进一步发展，服务之间的依赖关系变得错综复杂，甚至分不清哪个应用应该在哪个应该之前启动，架构师都不能完整的描述整个应该的架构关系。</p><p>这时就需要自动画出应用间的依赖关系图，以帮助架构师理清关系。</p></li><li><p>(3) 服务的调用量越来越大，服务的容量问题就暴露出来，这个服务需要多少机器支撑？什么时候该加机器？</p><p>为了解决这些问题，第一步，要将服务现在每天的调用量，响应时间，都统计出来，作为容量规划的参考指标。</p><p> 其次，要可以动态调整权重，在线上，将某台机器的权重一直加大，并在加大的过程中记录响应时间的变化，直到响应时间到达阀值，记录此时的访问量，再以此访问量乘以机器数反推总容量。</p></li></ul><h4 id="1-3-Dubbo架构图"><a href="#1-3-Dubbo架构图" class="headerlink" title="1.3 Dubbo架构图"></a>1.3 Dubbo架构图</h4><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/dubbo/dubbo%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="dubbo架构图"></p><h3 id="2-dubbo入门案例"><a href="#2-dubbo入门案例" class="headerlink" title="2.dubbo入门案例"></a>2.dubbo入门案例</h3><p>我们创建两个工程：dubbo-server（有server-api、provider模块）、dubbo-client。如下图所示：</p><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/dubbo/dubbo-server.png" alt="dubbo-server"></p><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/dubbo/dubbo-client.png" alt="dubbo-client"></p><p>在server-api中：我们定义一个接口IUserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在server-provider中，实现该接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello,"</span>+msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在server-provider模块中，在resources目录下创建/META-INF/spring创建provider.xml文件，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo应用名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demo-provider"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo注册中心地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo协议配置，默认使用dubbo，端口20880  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo发布暴露的服务接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.gre.world.dubbo.user.IUserService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dubbo发布暴露的服务接口实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.gre.world.dubbo.user.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建一个Bootstrap类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 风骚的GRE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Descriptions</span> Dubbo 服务端启动类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bootstrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">                <span class="keyword">new</span> String[] &#123;<span class="string">"MATE-INF/spring/provider.xml"</span>&#125;);</span><br><span class="line">        context.start();</span><br><span class="line">        <span class="comment">// press any key to exit</span></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后运行main方法，就可以发布一个服务了。</p><p>在dubbo-client工程中，创建一个App类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.gre.world.dubbo.user.IUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">"MATE-INF/spring/consumer.xml"</span>&#125;);</span><br><span class="line">        context.start();</span><br><span class="line">        <span class="comment">// obtain proxy object for remote invocation</span></span><br><span class="line">        IUserService demoService = (IUserService) context.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        <span class="comment">// execute remote invocation</span></span><br><span class="line">        String hello = demoService.sayHello(<span class="string">"world"</span>);</span><br><span class="line">        <span class="comment">// show the result</span></span><br><span class="line">        System.out.println(hello);</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在resources目录下创建/META-INF/spring创建consumer.xml文件，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demo-consumer"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">interface</span>=<span class="string">"com.gre.world.dubbo.user.IUserService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行：输出结果如下</p><p>Hello,world</p><p>最后给出pom.xml配置文件</p><p>dubbo-server/pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gre.world.dubbo.user<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>server-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>server-provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dubbo-server<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gre.world.dubbo.user<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>server-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.20.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>dubbo-server/server-provider/pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gre.world.dubbo.user<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>server-provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>server-provider<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gre.world.dubbo.user<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>server-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.20.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Releases<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>dubbo-client/pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gre.world.dubbo.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dubbo-client<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.gre.world.dubbo.user<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>server-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.20.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Releases<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-dubbo注册中心原理"><a href="#3-dubbo注册中心原理" class="headerlink" title="3.dubbo注册中心原理"></a>3.dubbo注册中心原理</h3><p><img src="https://github.com/GreZhang/GreZhang.github.io/raw/master/images/dubbo/dubbo%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%8E%9F%E7%90%86.png" alt="dubbo注册中心原理"></p><p>从上图中我们可以了解到，dubbo服务端在启动时，会在zookeeper中创建/dubbo目录，然后将需要发布的服务地址（全类路径）创建在/dubbo目录下，在每个服务地址下创建提供方的对应协议的地址列表（比如dubbo协议），而这些地址列表的状态由zk session来维护。</p><p>在我们客户端启动时，回去找到对应的服务地址，然后监听它。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;学习目标：&quot;&gt;&lt;a href=&quot;#学习目标：&quot; class=&quot;headerlink&quot; title=&quot;学习目标：&quot;&gt;&lt;/a&gt;学习目标：&lt;/h3&gt;&lt;p&gt;了解什么是dubbo？&lt;/p&gt;
&lt;p&gt;知道dubbo能做什么？&lt;/p&gt;
&lt;p&gt;dubbo使用入门？&lt;/p&gt;
&lt;p&gt;如
      
    
    </summary>
    
      <category term="分布式服务治理-dubb" scheme="https://grezhang.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86-dubb/"/>
    
    
      <category term="分布式服务治理" scheme="https://grezhang.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/"/>
    
      <category term="dubbo" scheme="https://grezhang.github.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Redis面试题整理</title>
    <link href="https://grezhang.github.io/2017/06/22/redis/redis/"/>
    <id>https://grezhang.github.io/2017/06/22/redis/redis/</id>
    <published>2017-06-22T04:12:56.000Z</published>
    <updated>2018-07-02T01:58:29.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、Redis为什么单线程的，能说说它的原理吗"><a href="#1、Redis为什么单线程的，能说说它的原理吗" class="headerlink" title="1、Redis为什么单线程的，能说说它的原理吗"></a>1、Redis为什么单线程的，能说说它的原理吗</h3><p>Redis使用了单线程架构和I/O多路复用模型来实现高性能的内存数据库服务。Redis使用了单线程架构，预防了多线程可能产生的竞争问题，但是也会引入另外的问题。Redis单线程架构导致无法充分利用CPU多核特性，通常的做法是在一台机器上部署多个Redis实例。</p><p>那么Redis使用单线程模型，为什么还那么快：</p><p>第一，纯内存访问，Redis将所有数据放在内存中，内存的响应时长大约为100纳秒，这是Redis达到每秒万级别访问的重要基础。<br>第二，非阻塞I/O，Redis使用epoll作为I/O多路复用技术的实现，再加上Redis自身的事件处理模型将epoll中的连接、读写、关闭都转换为事件，不在网络I/O上浪费过多的时间。</p><p>第三，单线程避免了线程切换和竞态产生的消耗。</p><h3 id="2、mySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据"><a href="#2、mySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据" class="headerlink" title="2、mySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据"></a>2、mySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据</h3><p>Redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。redis 提供 6种数据淘汰策略：</p><ul><li>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li><li>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li><li>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li><li>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</li><li>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</li><li>no-enviction（驱逐）：禁止驱逐数据</li></ul><h3 id="3、缓存穿透可以介绍⼀一下么？你认为应该如何解决这个问题"><a href="#3、缓存穿透可以介绍⼀一下么？你认为应该如何解决这个问题" class="headerlink" title="3、缓存穿透可以介绍⼀一下么？你认为应该如何解决这个问题"></a>3、缓存穿透可以介绍⼀一下么？你认为应该如何解决这个问题</h3><p>缓存穿透是指用户查询数据，在数据库没有，自然在缓存中也不会有。这样就导致用户查询的时候，在缓存中找不到，每次都要去数据库中查询。</p><p>解决思路：</p><p>1，如果查询<a href="http://cpro.baidu.com/cpro/ui/uijs.php?adclass=0&amp;app_id=0&amp;c=news&amp;cf=1001&amp;ch=0&amp;di=128&amp;fv=17&amp;is_app=0&amp;jk=9d81f77002e20c6d&amp;k=%CA%FD%BE%DD%BF%E2&amp;k0=%CA%FD%BE%DD%BF%E2&amp;kdi0=0&amp;luki=7&amp;mcpm=0&amp;n=10&amp;p=baidu&amp;q=smileking_cpr&amp;rb=0&amp;rs=1&amp;seller_id=1&amp;sid=6d0ce20270f7819d&amp;ssp2=1&amp;stid=9&amp;t=tpclicked3_hc&amp;td=1682280&amp;tu=u1682280&amp;u=http%3A%2F%2Fwww.th7.cn%2Fdb%2Fnosql%2F201510%2F136276.shtml&amp;urlid=0" target="_blank" rel="noopener">数据库</a>也为空，直接设置一个默认值存放到缓存，这样第二次到缓冲中获取就有值了，而不会继续访问数据库，这种办法最简单粗暴。</p><p>2，根据缓存数据Key的规则。例如我们公司是做机顶盒的，缓存数据以Mac为Key，Mac是有规则，如果不符合规则就过滤掉，这样可以过滤一部分查询。在做缓存规划的时候，Key有一定规则的话，可以采取这种办法。这种办法只能缓解一部分的压力，过滤和系统无关的查询，但是无法根治。</p><p>3，采用布隆<a href="http://cpro.baidu.com/cpro/ui/uijs.php?adclass=0&amp;app_id=0&amp;c=news&amp;cf=1001&amp;ch=0&amp;di=128&amp;fv=17&amp;is_app=0&amp;jk=9d81f77002e20c6d&amp;k=%B9%FD%C2%CB%C6%F7&amp;k0=%B9%FD%C2%CB%C6%F7&amp;kdi0=0&amp;luki=6&amp;mcpm=0&amp;n=10&amp;p=baidu&amp;q=smileking_cpr&amp;rb=0&amp;rs=1&amp;seller_id=1&amp;sid=6d0ce20270f7819d&amp;ssp2=1&amp;stid=9&amp;t=tpclicked3_hc&amp;td=1682280&amp;tu=u1682280&amp;u=http%3A%2F%2Fwww.th7.cn%2Fdb%2Fnosql%2F201510%2F136276.shtml&amp;urlid=0" target="_blank" rel="noopener">过滤器</a>，将所有可能存在的数据哈希到一个足够大的BitSet中，不存在的数据将会被拦截掉，从而避免了对<a href="http://cpro.baidu.com/cpro/ui/uijs.php?adclass=0&amp;app_id=0&amp;c=news&amp;cf=1001&amp;ch=0&amp;di=128&amp;fv=17&amp;is_app=0&amp;jk=9d81f77002e20c6d&amp;k=%B5%D7%B2%E3&amp;k0=%B5%D7%B2%E3&amp;kdi0=0&amp;luki=2&amp;mcpm=0&amp;n=10&amp;p=baidu&amp;q=smileking_cpr&amp;rb=0&amp;rs=1&amp;seller_id=1&amp;sid=6d0ce20270f7819d&amp;ssp2=1&amp;stid=9&amp;t=tpclicked3_hc&amp;td=1682280&amp;tu=u1682280&amp;u=http%3A%2F%2Fwww.th7.cn%2Fdb%2Fnosql%2F201510%2F136276.shtml&amp;urlid=0" target="_blank" rel="noopener">底层</a>存储系统的查询压力。关于布隆<a href="http://cpro.baidu.com/cpro/ui/uijs.php?adclass=0&amp;app_id=0&amp;c=news&amp;cf=1001&amp;ch=0&amp;di=128&amp;fv=17&amp;is_app=0&amp;jk=9d81f77002e20c6d&amp;k=%B9%FD%C2%CB%C6%F7&amp;k0=%B9%FD%C2%CB%C6%F7&amp;kdi0=0&amp;luki=6&amp;mcpm=0&amp;n=10&amp;p=baidu&amp;q=smileking_cpr&amp;rb=0&amp;rs=1&amp;seller_id=1&amp;sid=6d0ce20270f7819d&amp;ssp2=1&amp;stid=9&amp;t=tpclicked3_hc&amp;td=1682280&amp;tu=u1682280&amp;u=http%3A%2F%2Fwww.th7.cn%2Fdb%2Fnosql%2F201510%2F136276.shtml&amp;urlid=0" target="_blank" rel="noopener">过滤器</a>，详情查看：基于BitSet的布隆过滤器(Bloom Filter) </p><p>大并发的缓存穿透会导致缓存雪崩。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、Redis为什么单线程的，能说说它的原理吗&quot;&gt;&lt;a href=&quot;#1、Redis为什么单线程的，能说说它的原理吗&quot; class=&quot;headerlink&quot; title=&quot;1、Redis为什么单线程的，能说说它的原理吗&quot;&gt;&lt;/a&gt;1、Redis为什么单线程的，能说
      
    
    </summary>
    
      <category term="Redis面试" scheme="https://grezhang.github.io/categories/Redis%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="https://grezhang.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Redis" scheme="https://grezhang.github.io/tags/Redis/"/>
    
  </entry>
  
</feed>
